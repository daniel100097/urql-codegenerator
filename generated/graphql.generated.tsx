/*
 * This file was generated by graphql-code-generator with the apollo-hooks-codegen plugin.
 * Any changes made to the file will be overwritten.
 */

import gql from 'graphql-tag';
import * as Urql from 'urql';

/*
 * GraphQL Input Types
 */

type CordFilter = {
    order?: Nullable<CordFilterOrder>;
    orderBy?: Nullable<CordFilterOrderBy>;
    take?: Nullable<CordFilterTake>;
    offset?: Nullable<CordFilterOffset>;
    search?: Nullable<CordFilterSearch>;
    fieldValueFilters?: Nullable<ReadonlyArray<CordFilterFieldValueFilters>>;
    searchInRelations?: Nullable<CordFilterSearchInRelations>;
};

type CordFilterOrder = string;
type CordFilterOrderBy = string;
type CordFilterTake = number;
type CordFilterOffset = number;
type CordFilterSearch = string;
type CordFilterFieldValueFilters = CordFilterValue;
type CordFilterSearchInRelations = boolean;

type CordFilterValue = {
    key: CordFilterValueKey;
    value?: Nullable<CordFilterValueValue>;
};

type CordFilterValueKey = string;
type CordFilterValueValue = string;

type FinanceTransactionCreateInput = {
    positions: ReadonlyArray<FinanceTransactionCreateInputPositions>;
    endDate: FinanceTransactionCreateInputEndDate;
    type: FinanceTransactionCreateInputType;
    description: FinanceTransactionCreateInputDescription;
    userId: FinanceTransactionCreateInputUserId;
};

type FinanceTransactionCreateInputPositions = FinanceTransactionItemInput;
type FinanceTransactionCreateInputEndDate = any;
type FinanceTransactionCreateInputType = string;
type FinanceTransactionCreateInputDescription = string;
type FinanceTransactionCreateInputUserId = string;

type FinanceTransactionItemInput = {
    amount: FinanceTransactionItemInputAmount;
    vat: FinanceTransactionItemInputVat;
    title: FinanceTransactionItemInputTitle;
};

type FinanceTransactionItemInputAmount = number;
type FinanceTransactionItemInputVat = number;
type FinanceTransactionItemInputTitle = string;

type HostNodeEditInput = {
    id?: Nullable<HostNodeEditInputId>;
    name: HostNodeEditInputName;
    remoteAddress: HostNodeEditInputRemoteAddress;
    section: HostNodeEditInputSection;
    type: HostNodeEditInputType;
    maxInstances?: Nullable<HostNodeEditInputMaxInstances>;
    hostNodeFilterKey?: Nullable<HostNodeEditInputHostNodeFilterKey>;
    forcePublicBackupTranfer?: Nullable<HostNodeEditInputForcePublicBackupTranfer>;
};

type HostNodeEditInputId = string;
type HostNodeEditInputName = string;
type HostNodeEditInputRemoteAddress = string;
type HostNodeEditInputSection = number;
type HostNodeEditInputType = string;
type HostNodeEditInputMaxInstances = number;
type HostNodeEditInputHostNodeFilterKey = string;
type HostNodeEditInputForcePublicBackupTranfer = boolean;

type ProductEditInput = {
    expire: ProductEditInputExpire;
    id: ProductEditInputId;
};

type ProductEditInputExpire = any;
type ProductEditInputId = string;

type SupportQuickResponseEditDto = {
    content: SupportQuickResponseEditDtoContent;
    title?: Nullable<SupportQuickResponseEditDtoTitle>;
    id: SupportQuickResponseEditDtoId;
};

type SupportQuickResponseEditDtoContent = string;
type SupportQuickResponseEditDtoTitle = string;
type SupportQuickResponseEditDtoId = string;

type SupportQuickResponseCreateDto = {
    content: SupportQuickResponseCreateDtoContent;
    title?: Nullable<SupportQuickResponseCreateDtoTitle>;
};

type SupportQuickResponseCreateDtoContent = string;
type SupportQuickResponseCreateDtoTitle = string;

type SupportTicketNewInput = {
    subject: SupportTicketNewInputSubject;
    category: SupportTicketNewInputCategory;
    fileIds: ReadonlyArray<SupportTicketNewInputFileIds>;
    priority: SupportTicketNewInputPriority;
    message: SupportTicketNewInputMessage;
};

type SupportTicketNewInputSubject = string;
type SupportTicketNewInputCategory = string;
type SupportTicketNewInputFileIds = string;
type SupportTicketNewInputPriority = number;
type SupportTicketNewInputMessage = string;

type ProductTemplateVserverCreateInput = {
    active: ProductTemplateVserverCreateInputActive;
    basePrice: ProductTemplateVserverCreateInputBasePrice;
    coresId: ProductTemplateVserverCreateInputCoresId;
    memoryId: ProductTemplateVserverCreateInputMemoryId;
    setup: ProductTemplateVserverCreateInputSetup;
    spaceId: ProductTemplateVserverCreateInputSpaceId;
    urlKey: ProductTemplateVserverCreateInputUrlKey;
    title: ProductTemplateVserverCreateInputTitle;
    platform: ProductTemplateVserverCreateInputPlatform;
};

type ProductTemplateVserverCreateInputActive = boolean;
type ProductTemplateVserverCreateInputBasePrice = number;
type ProductTemplateVserverCreateInputCoresId = string;
type ProductTemplateVserverCreateInputMemoryId = string;
type ProductTemplateVserverCreateInputSetup = number;
type ProductTemplateVserverCreateInputSpaceId = string;
type ProductTemplateVserverCreateInputUrlKey = string;
type ProductTemplateVserverCreateInputTitle = string;
type ProductTemplateVserverCreateInputPlatform = string;

type ProductTemplateVserverEditInput = {
    active: ProductTemplateVserverEditInputActive;
    basePrice: ProductTemplateVserverEditInputBasePrice;
    coresId: ProductTemplateVserverEditInputCoresId;
    memoryId: ProductTemplateVserverEditInputMemoryId;
    setup: ProductTemplateVserverEditInputSetup;
    spaceId: ProductTemplateVserverEditInputSpaceId;
    urlKey: ProductTemplateVserverEditInputUrlKey;
    title: ProductTemplateVserverEditInputTitle;
    platform: ProductTemplateVserverEditInputPlatform;
    id: ProductTemplateVserverEditInputId;
    hostNodeFilterKey?: Nullable<ProductTemplateVserverEditInputHostNodeFilterKey>;
};

type ProductTemplateVserverEditInputActive = boolean;
type ProductTemplateVserverEditInputBasePrice = number;
type ProductTemplateVserverEditInputCoresId = string;
type ProductTemplateVserverEditInputMemoryId = string;
type ProductTemplateVserverEditInputSetup = number;
type ProductTemplateVserverEditInputSpaceId = string;
type ProductTemplateVserverEditInputUrlKey = string;
type ProductTemplateVserverEditInputTitle = string;
type ProductTemplateVserverEditInputPlatform = string;
type ProductTemplateVserverEditInputId = string;
type ProductTemplateVserverEditInputHostNodeFilterKey = string;

type UserInputUserEditAddress = {
    birthdate?: Nullable<UserInputUserEditAddressBirthdate>;
    street1?: Nullable<UserInputUserEditAddressStreet1>;
    phone?: Nullable<UserInputUserEditAddressPhone>;
    phoneMobile?: Nullable<UserInputUserEditAddressPhoneMobile>;
    vatId?: Nullable<UserInputUserEditAddressVatId>;
    zip?: Nullable<UserInputUserEditAddressZip>;
    company?: Nullable<UserInputUserEditAddressCompany>;
    firstname?: Nullable<UserInputUserEditAddressFirstname>;
    lastname?: Nullable<UserInputUserEditAddressLastname>;
    title?: Nullable<UserInputUserEditAddressTitle>;
    city?: Nullable<UserInputUserEditAddressCity>;
};

type UserInputUserEditAddressBirthdate = string;
type UserInputUserEditAddressStreet1 = string;
type UserInputUserEditAddressPhone = string;
type UserInputUserEditAddressPhoneMobile = string;
type UserInputUserEditAddressVatId = string;
type UserInputUserEditAddressZip = string;
type UserInputUserEditAddressCompany = string;
type UserInputUserEditAddressFirstname = string;
type UserInputUserEditAddressLastname = string;
type UserInputUserEditAddressTitle = string;
type UserInputUserEditAddressCity = string;

type UserInputRegister = {
    email: UserInputRegisterEmail;
    password: UserInputRegisterPassword;
    nickname?: Nullable<UserInputRegisterNickname>;
    userAddress?: Nullable<UserInputRegisterUserAddress>;
};

type UserInputRegisterEmail = string;
type UserInputRegisterPassword = string;
type UserInputRegisterNickname = string;
type UserInputRegisterUserAddress = UserInputRegisterAddress;

type UserInputRegisterAddress = {
    birthdate?: Nullable<UserInputRegisterAddressBirthdate>;
    street1?: Nullable<UserInputRegisterAddressStreet1>;
    phone?: Nullable<UserInputRegisterAddressPhone>;
    phoneMobile?: Nullable<UserInputRegisterAddressPhoneMobile>;
    vatId?: Nullable<UserInputRegisterAddressVatId>;
    zip?: Nullable<UserInputRegisterAddressZip>;
    company?: Nullable<UserInputRegisterAddressCompany>;
    firstname?: Nullable<UserInputRegisterAddressFirstname>;
    lastname?: Nullable<UserInputRegisterAddressLastname>;
    title?: Nullable<UserInputRegisterAddressTitle>;
    city?: Nullable<UserInputRegisterAddressCity>;
    country?: Nullable<UserInputRegisterAddressCountry>;
};

type UserInputRegisterAddressBirthdate = string;
type UserInputRegisterAddressStreet1 = string;
type UserInputRegisterAddressPhone = string;
type UserInputRegisterAddressPhoneMobile = string;
type UserInputRegisterAddressVatId = string;
type UserInputRegisterAddressZip = string;
type UserInputRegisterAddressCompany = string;
type UserInputRegisterAddressFirstname = string;
type UserInputRegisterAddressLastname = string;
type UserInputRegisterAddressTitle = string;
type UserInputRegisterAddressCity = string;
type UserInputRegisterAddressCountry = string;

type ProductVserverImageCreateInput = {
    active: ProductVserverImageCreateInputActive;
    title: ProductVserverImageCreateInputTitle;
    platform: ProductVserverImageCreateInputPlatform;
    logoId?: Nullable<ProductVserverImageCreateInputLogoId>;
    resourceUrl: ProductVserverImageCreateInputResourceUrl;
};

type ProductVserverImageCreateInputActive = boolean;
type ProductVserverImageCreateInputTitle = string;
type ProductVserverImageCreateInputPlatform = string;
type ProductVserverImageCreateInputLogoId = string;
type ProductVserverImageCreateInputResourceUrl = string;

type ProductVserverImageEditInput = {
    active: ProductVserverImageEditInputActive;
    title: ProductVserverImageEditInputTitle;
    platform: ProductVserverImageEditInputPlatform;
    logoId?: Nullable<ProductVserverImageEditInputLogoId>;
    resourceUrl: ProductVserverImageEditInputResourceUrl;
    id: ProductVserverImageEditInputId;
};

type ProductVserverImageEditInputActive = boolean;
type ProductVserverImageEditInputTitle = string;
type ProductVserverImageEditInputPlatform = string;
type ProductVserverImageEditInputLogoId = string;
type ProductVserverImageEditInputResourceUrl = string;
type ProductVserverImageEditInputId = string;

/*,
 * Fragments from undefined,
 */

/*,
 * Operations from undefined,
 */

useQueryMeHasAcl.Document = gql`
    query me_has_acl($acl: String!) {
        acl_has_acl(acl: $acl)
    }
` as DocumentNode;

export function useQueryMeHasAcl(
    options?: QueryHookOptions<MeHasAclData, MeHasAclVariables>
) {
    const result = useQuery<MeHasAclData, MeHasAclVariables>(
        useQueryMeHasAcl.Document,
        { ...queryDefaultOptions, ...options }
    );
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryMeHasAcl.lazy = function (
    options?: LazyQueryHookOptions<MeHasAclData, MeHasAclVariables>
) {
    return useLazyQuery(useQueryMeHasAcl.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type MeHasAclVariables = {
    acl: MeHasAclVariablesAcl;
};

type MeHasAclVariablesAcl = string;

export type MeHasAclData = {
    acl_has_acl: MeHasAclDataAclHasAcl;
};

type MeHasAclDataAclHasAcl = boolean;

useQueryAcls.Document = gql`
    query acls($filter: CordFilter) {
        acls(filter: $filter) {
            edges {
                id
                acl
            }
            pageInfo {
                totalCount
            }
        }
    }
` as DocumentNode;

export function useQueryAcls(
    options?: QueryHookOptions<AclsData, AclsVariables>
) {
    const result = useQuery<AclsData, AclsVariables>(useQueryAcls.Document, {
        ...queryDefaultOptions,
        ...options,
    });
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryAcls.lazy = function (
    options?: LazyQueryHookOptions<AclsData, AclsVariables>
) {
    return useLazyQuery(useQueryAcls.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type AclsVariables = {
    filter?: Nullable<AclsVariablesFilter>;
};

type AclsVariablesFilter = CordFilter;

export type AclsData = {
    acls: AclsDataAcls;
};

type AclsDataAcls = {
    __typename?: 'AclResultMany';
    edges: Array<AclsDataAclsEdges>;
    pageInfo: AclsDataAclsPageInfo;
};

type AclsDataAclsEdges = {
    __typename?: 'Acl';
    id: AclsDataAclsEdgesId;
    acl: AclsDataAclsEdgesAcl;
};

type AclsDataAclsEdgesId = string;
type AclsDataAclsEdgesAcl = string;
type AclsDataAclsPageInfo = {
    __typename?: 'CordPageInfo';
    totalCount: AclsDataAclsPageInfoTotalCount;
};

type AclsDataAclsPageInfoTotalCount = number;

useMutationAclRefillAclCache.Document = gql`
    mutation aclRefillAclCache {
        aclRefillAclCache
    }
` as DocumentNode;

export function useMutationAclRefillAclCache(
    options?: MutationHookOptions<
        AclRefillAclCacheData,
        AclRefillAclCacheVariables
    >
): MutationHookFn<AclRefillAclCacheData, AclRefillAclCacheVariables> {
    return useMutation<AclRefillAclCacheData, AclRefillAclCacheVariables>(
        useMutationAclRefillAclCache.Document,
        { ...mutationDefaultOptions, ...options }
    ) as any;
}

export type AclRefillAclCacheVariables = {};

export type AclRefillAclCacheData = {
    aclRefillAclCache: AclRefillAclCacheDataAclRefillAclCache;
};

type AclRefillAclCacheDataAclRefillAclCache = boolean;

/*,
 * Fragments from undefined,
 */

/*,
 * Operations from undefined,
 */

useMutationCreateBackupServer.Document = gql`
    mutation createBackupServer(
        $backupPath: String!
        $name: String
        $port: Int!
        $username: String!
        $privateKey: String!
        $host: String!
        $localHost: String!
    ) {
        backupServerCreate(
            data: {
                backupPath: $backupPath
                name: $name
                port: $port
                privateKey: $privateKey
                username: $username
                host: $host
                localHost: $localHost
            }
        ) {
            id
        }
    }
` as DocumentNode;

export function useMutationCreateBackupServer(
    options?: MutationHookOptions<
        CreateBackupServerData,
        CreateBackupServerVariables
    >
): MutationHookFn<CreateBackupServerData, CreateBackupServerVariables> {
    return useMutation<CreateBackupServerData, CreateBackupServerVariables>(
        useMutationCreateBackupServer.Document,
        { ...mutationDefaultOptions, ...options }
    ) as any;
}

export type CreateBackupServerVariables = {
    backupPath: CreateBackupServerVariablesBackupPath;
    name?: Nullable<CreateBackupServerVariablesName>;
    port: CreateBackupServerVariablesPort;
    username: CreateBackupServerVariablesUsername;
    privateKey: CreateBackupServerVariablesPrivateKey;
    host: CreateBackupServerVariablesHost;
    localHost: CreateBackupServerVariablesLocalHost;
};

type CreateBackupServerVariablesBackupPath = string;
type CreateBackupServerVariablesName = string;
type CreateBackupServerVariablesPort = number;
type CreateBackupServerVariablesUsername = string;
type CreateBackupServerVariablesPrivateKey = string;
type CreateBackupServerVariablesHost = string;
type CreateBackupServerVariablesLocalHost = string;

export type CreateBackupServerData = {
    backupServerCreate: CreateBackupServerDataBackupServerCreate;
};

type CreateBackupServerDataBackupServerCreate = {
    __typename?: 'BackupServer';
    id: CreateBackupServerDataBackupServerCreateId;
};

type CreateBackupServerDataBackupServerCreateId = string;

useMutationEditBackupServer.Document = gql`
    mutation editBackupServer(
        $id: ID!
        $backupPath: String
        $name: String
        $port: Int
        $username: String
        $privateKey: String
        $host: String
        $localHost: String!
    ) {
        backupServerEdit(
            data: {
                id: $id
                backupPath: $backupPath
                name: $name
                port: $port
                privateKey: $privateKey
                username: $username
                host: $host
                localHost: $localHost
            }
        ) {
            id
        }
    }
` as DocumentNode;

export function useMutationEditBackupServer(
    options?: MutationHookOptions<
        EditBackupServerData,
        EditBackupServerVariables
    >
): MutationHookFn<EditBackupServerData, EditBackupServerVariables> {
    return useMutation<EditBackupServerData, EditBackupServerVariables>(
        useMutationEditBackupServer.Document,
        { ...mutationDefaultOptions, ...options }
    ) as any;
}

export type EditBackupServerVariables = {
    id: EditBackupServerVariablesId;
    backupPath?: Nullable<EditBackupServerVariablesBackupPath>;
    name?: Nullable<EditBackupServerVariablesName>;
    port?: Nullable<EditBackupServerVariablesPort>;
    username?: Nullable<EditBackupServerVariablesUsername>;
    privateKey?: Nullable<EditBackupServerVariablesPrivateKey>;
    host?: Nullable<EditBackupServerVariablesHost>;
    localHost: EditBackupServerVariablesLocalHost;
};

type EditBackupServerVariablesId = string;
type EditBackupServerVariablesBackupPath = string;
type EditBackupServerVariablesName = string;
type EditBackupServerVariablesPort = number;
type EditBackupServerVariablesUsername = string;
type EditBackupServerVariablesPrivateKey = string;
type EditBackupServerVariablesHost = string;
type EditBackupServerVariablesLocalHost = string;

export type EditBackupServerData = {
    backupServerEdit: EditBackupServerDataBackupServerEdit;
};

type EditBackupServerDataBackupServerEdit = {
    __typename?: 'BackupServer';
    id: EditBackupServerDataBackupServerEditId;
};

type EditBackupServerDataBackupServerEditId = string;

useMutationDeleteBackupServerById.Document = gql`
    mutation deleteBackupServerById($id: ID!) {
        backupServerDelete(id: $id)
    }
` as DocumentNode;

export function useMutationDeleteBackupServerById(
    options?: MutationHookOptions<
        DeleteBackupServerByIdData,
        DeleteBackupServerByIdVariables
    >
): MutationHookFn<DeleteBackupServerByIdData, DeleteBackupServerByIdVariables> {
    return useMutation<
        DeleteBackupServerByIdData,
        DeleteBackupServerByIdVariables
    >(useMutationDeleteBackupServerById.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type DeleteBackupServerByIdVariables = {
    id: DeleteBackupServerByIdVariablesId;
};

type DeleteBackupServerByIdVariablesId = string;

export type DeleteBackupServerByIdData = {
    backupServerDelete: DeleteBackupServerByIdDataBackupServerDelete;
};

type DeleteBackupServerByIdDataBackupServerDelete = boolean;

useQueryBackupServers.Document = gql`
    query backupServers($filter: CordFilter) {
        backupServers(filter: $filter) {
            edges {
                id
                name
                update
                backupPath
                privateKey
                username
                host
            }
            pageInfo {
                totalCount
            }
        }
    }
` as DocumentNode;

export function useQueryBackupServers(
    options?: QueryHookOptions<BackupServersData, BackupServersVariables>
) {
    const result = useQuery<BackupServersData, BackupServersVariables>(
        useQueryBackupServers.Document,
        { ...queryDefaultOptions, ...options }
    );
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryBackupServers.lazy = function (
    options?: LazyQueryHookOptions<BackupServersData, BackupServersVariables>
) {
    return useLazyQuery(useQueryBackupServers.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type BackupServersVariables = {
    filter?: Nullable<BackupServersVariablesFilter>;
};

type BackupServersVariablesFilter = CordFilter;

export type BackupServersData = {
    backupServers: BackupServersDataBackupServers;
};

type BackupServersDataBackupServers = {
    __typename?: 'BackupServerResultMany';
    edges: Array<BackupServersDataBackupServersEdges>;
    pageInfo: BackupServersDataBackupServersPageInfo;
};

type BackupServersDataBackupServersEdges = {
    __typename?: 'BackupServer';
    id: BackupServersDataBackupServersEdgesId;
    name: BackupServersDataBackupServersEdgesName;
    update: BackupServersDataBackupServersEdgesUpdate;
    backupPath: BackupServersDataBackupServersEdgesBackupPath;
    privateKey: BackupServersDataBackupServersEdgesPrivateKey;
    username: BackupServersDataBackupServersEdgesUsername;
    host: BackupServersDataBackupServersEdgesHost;
};

type BackupServersDataBackupServersEdgesId = string;
type BackupServersDataBackupServersEdgesName = string;
type BackupServersDataBackupServersEdgesUpdate = any;
type BackupServersDataBackupServersEdgesBackupPath = string;
type BackupServersDataBackupServersEdgesPrivateKey = string;
type BackupServersDataBackupServersEdgesUsername = string;
type BackupServersDataBackupServersEdgesHost = string;
type BackupServersDataBackupServersPageInfo = {
    __typename?: 'CordPageInfo';
    totalCount: BackupServersDataBackupServersPageInfoTotalCount;
};

type BackupServersDataBackupServersPageInfoTotalCount = number;

useQueryBackupServerById.Document = gql`
    query backupServerById($id: ID!) {
        backupServer(id: $id) {
            id
            name
            update
            backupPath
            privateKey
            port
            username
            host
            deletable
            localHost
        }
    }
` as DocumentNode;

export function useQueryBackupServerById(
    options?: QueryHookOptions<BackupServerByIdData, BackupServerByIdVariables>
) {
    const result = useQuery<BackupServerByIdData, BackupServerByIdVariables>(
        useQueryBackupServerById.Document,
        { ...queryDefaultOptions, ...options }
    );
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryBackupServerById.lazy = function (
    options?: LazyQueryHookOptions<
        BackupServerByIdData,
        BackupServerByIdVariables
    >
) {
    return useLazyQuery(useQueryBackupServerById.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type BackupServerByIdVariables = {
    id: BackupServerByIdVariablesId;
};

type BackupServerByIdVariablesId = string;

export type BackupServerByIdData = {
    backupServer: BackupServerByIdDataBackupServer;
};

type BackupServerByIdDataBackupServer = {
    __typename?: 'BackupServer';
    id: BackupServerByIdDataBackupServerId;
    name: BackupServerByIdDataBackupServerName;
    update: BackupServerByIdDataBackupServerUpdate;
    backupPath: BackupServerByIdDataBackupServerBackupPath;
    privateKey: BackupServerByIdDataBackupServerPrivateKey;
    port: BackupServerByIdDataBackupServerPort;
    username: BackupServerByIdDataBackupServerUsername;
    host: BackupServerByIdDataBackupServerHost;
    deletable: BackupServerByIdDataBackupServerDeletable;
    localHost?: Nullable<BackupServerByIdDataBackupServerLocalHost>;
};

type BackupServerByIdDataBackupServerId = string;
type BackupServerByIdDataBackupServerName = string;
type BackupServerByIdDataBackupServerUpdate = any;
type BackupServerByIdDataBackupServerBackupPath = string;
type BackupServerByIdDataBackupServerPrivateKey = string;
type BackupServerByIdDataBackupServerPort = number;
type BackupServerByIdDataBackupServerUsername = string;
type BackupServerByIdDataBackupServerHost = string;
type BackupServerByIdDataBackupServerDeletable = boolean;
type BackupServerByIdDataBackupServerLocalHost = string;

/*,
 * Fragments from undefined,
 */

/*,
 * Operations from undefined,
 */

useQueryBlogPostRead.Document = gql`
    query blogPostRead {
        blogPostRead {
            title
            link
            pubDate
            html
        }
    }
` as DocumentNode;

export function useQueryBlogPostRead(
    options?: QueryHookOptions<BlogPostReadData, BlogPostReadVariables>
) {
    const result = useQuery<BlogPostReadData, BlogPostReadVariables>(
        useQueryBlogPostRead.Document,
        { ...queryDefaultOptions, ...options }
    );
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryBlogPostRead.lazy = function (
    options?: LazyQueryHookOptions<BlogPostReadData, BlogPostReadVariables>
) {
    return useLazyQuery(useQueryBlogPostRead.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type BlogPostReadVariables = {};

export type BlogPostReadData = {
    blogPostRead: Array<BlogPostReadDataBlogPostRead>;
};

type BlogPostReadDataBlogPostRead = {
    __typename?: 'Blogfeed';
    title: BlogPostReadDataBlogPostReadTitle;
    link: BlogPostReadDataBlogPostReadLink;
    pubDate: BlogPostReadDataBlogPostReadPubDate;
    html: BlogPostReadDataBlogPostReadHtml;
};

type BlogPostReadDataBlogPostReadTitle = string;
type BlogPostReadDataBlogPostReadLink = string;
type BlogPostReadDataBlogPostReadPubDate = any;
type BlogPostReadDataBlogPostReadHtml = string;

/*,
 * Fragments from undefined,
 */
export type ProductDomainPart = {
    id: ProductDomainPartId;
    attributes: ProductDomainPartAttributes;
    name: ProductDomainPartName;
    create: ProductDomainPartCreate;
    authcode?: Nullable<ProductDomainPartAuthcode>;
    requestNewAuthcode: ProductDomainPartRequestNewAuthcode;
    registered: ProductDomainPartRegistered;
    product: ProductDomainPartProduct;
    tld: ProductDomainPartTld;
};

type ProductDomainPartId = string;
type ProductDomainPartAttributes = any;
type ProductDomainPartName = string;
type ProductDomainPartCreate = any;
type ProductDomainPartAuthcode = string;
type ProductDomainPartRequestNewAuthcode = boolean;
type ProductDomainPartRegistered = boolean;
type ProductDomainPartProduct = {
    __typename?: 'Product';
    id: ProductDomainPartProductId;
    expire?: Nullable<ProductDomainPartProductExpire>;
};

type ProductDomainPartProductId = string;
type ProductDomainPartProductExpire = any;
type ProductDomainPartTld = string;
const _gql_ProductDomainPart = gql`
    fragment ProductDomainPart on ProductDomain {
        id
        attributes
        name
        create
        authcode
        requestNewAuthcode
        registered
        product {
            id
            expire
        }
        tld
    }
`;

/*,
 * Operations from undefined,
 */

useQueryProductDomains.Document = gql`
    query productDomains($filter: CordFilter) {
        productDomains(filter: $filter) {
            edges {
                id
                create
                authcode
                product {
                    id
                    user {
                        id
                    }
                    expire
                }
                name
                tld
                attributes
            }
            pageInfo {
                totalCount
            }
        }
    }
` as DocumentNode;

export function useQueryProductDomains(
    options?: QueryHookOptions<ProductDomainsData, ProductDomainsVariables>
) {
    const result = useQuery<ProductDomainsData, ProductDomainsVariables>(
        useQueryProductDomains.Document,
        { ...queryDefaultOptions, ...options }
    );
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryProductDomains.lazy = function (
    options?: LazyQueryHookOptions<ProductDomainsData, ProductDomainsVariables>
) {
    return useLazyQuery(useQueryProductDomains.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type ProductDomainsVariables = {
    filter?: Nullable<ProductDomainsVariablesFilter>;
};

type ProductDomainsVariablesFilter = CordFilter;

export type ProductDomainsData = {
    productDomains: ProductDomainsDataProductDomains;
};

type ProductDomainsDataProductDomains = {
    __typename?: 'ProductDomainResultMany';
    edges: Array<ProductDomainsDataProductDomainsEdges>;
    pageInfo: ProductDomainsDataProductDomainsPageInfo;
};

type ProductDomainsDataProductDomainsEdges = {
    __typename?: 'ProductDomain';
    id: ProductDomainsDataProductDomainsEdgesId;
    create: ProductDomainsDataProductDomainsEdgesCreate;
    authcode?: Nullable<ProductDomainsDataProductDomainsEdgesAuthcode>;
    product: ProductDomainsDataProductDomainsEdgesProduct;
    name: ProductDomainsDataProductDomainsEdgesName;
    tld: ProductDomainsDataProductDomainsEdgesTld;
    attributes: ProductDomainsDataProductDomainsEdgesAttributes;
};

type ProductDomainsDataProductDomainsEdgesId = string;
type ProductDomainsDataProductDomainsEdgesCreate = any;
type ProductDomainsDataProductDomainsEdgesAuthcode = string;
type ProductDomainsDataProductDomainsEdgesProduct = {
    __typename?: 'Product';
    id: ProductDomainsDataProductDomainsEdgesProductId;
    user: ProductDomainsDataProductDomainsEdgesProductUser;
    expire?: Nullable<ProductDomainsDataProductDomainsEdgesProductExpire>;
};

type ProductDomainsDataProductDomainsEdgesProductId = string;
type ProductDomainsDataProductDomainsEdgesProductUser = {
    __typename?: 'User';
    id: ProductDomainsDataProductDomainsEdgesProductUserId;
};

type ProductDomainsDataProductDomainsEdgesProductUserId = string;
type ProductDomainsDataProductDomainsEdgesProductExpire = any;
type ProductDomainsDataProductDomainsEdgesName = string;
type ProductDomainsDataProductDomainsEdgesTld = string;
type ProductDomainsDataProductDomainsEdgesAttributes = any;
type ProductDomainsDataProductDomainsPageInfo = {
    __typename?: 'CordPageInfo';
    totalCount: ProductDomainsDataProductDomainsPageInfoTotalCount;
};

type ProductDomainsDataProductDomainsPageInfoTotalCount = number;

useQueryProductDomainById.Document = gql`
    query productDomainById($id: ID!) {
        productDomainById(id: $id) {
            ...ProductDomainPart
        }
    }
    ${_gql_ProductDomainPart}
` as DocumentNode;

export function useQueryProductDomainById(
    options?: QueryHookOptions<
        ProductDomainByIdData,
        ProductDomainByIdVariables
    >
) {
    const result = useQuery<ProductDomainByIdData, ProductDomainByIdVariables>(
        useQueryProductDomainById.Document,
        { ...queryDefaultOptions, ...options }
    );
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryProductDomainById.lazy = function (
    options?: LazyQueryHookOptions<
        ProductDomainByIdData,
        ProductDomainByIdVariables
    >
) {
    return useLazyQuery(useQueryProductDomainById.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type ProductDomainByIdVariables = {
    id: ProductDomainByIdVariablesId;
};

type ProductDomainByIdVariablesId = string;

export type ProductDomainByIdData = {
    productDomainById: ProductDomainByIdDataProductDomainById;
};

type ProductDomainByIdDataProductDomainById = ProductDomainPart & {
    __typename?: 'ProductDomain';
};

useQueryMyProductDomains.Document = gql`
    query myProductDomains {
        productDomainsMy {
            id
            name
            product {
                id
                expire
            }
            tld
        }
    }
` as DocumentNode;

export function useQueryMyProductDomains(
    options?: QueryHookOptions<MyProductDomainsData, MyProductDomainsVariables>
) {
    const result = useQuery<MyProductDomainsData, MyProductDomainsVariables>(
        useQueryMyProductDomains.Document,
        { ...queryDefaultOptions, ...options }
    );
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryMyProductDomains.lazy = function (
    options?: LazyQueryHookOptions<
        MyProductDomainsData,
        MyProductDomainsVariables
    >
) {
    return useLazyQuery(useQueryMyProductDomains.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type MyProductDomainsVariables = {};

export type MyProductDomainsData = {
    productDomainsMy: Array<MyProductDomainsDataProductDomainsMy>;
};

type MyProductDomainsDataProductDomainsMy = {
    __typename?: 'ProductDomain';
    id: MyProductDomainsDataProductDomainsMyId;
    name: MyProductDomainsDataProductDomainsMyName;
    product: MyProductDomainsDataProductDomainsMyProduct;
    tld: MyProductDomainsDataProductDomainsMyTld;
};

type MyProductDomainsDataProductDomainsMyId = string;
type MyProductDomainsDataProductDomainsMyName = string;
type MyProductDomainsDataProductDomainsMyProduct = {
    __typename?: 'Product';
    id: MyProductDomainsDataProductDomainsMyProductId;
    expire?: Nullable<MyProductDomainsDataProductDomainsMyProductExpire>;
};

type MyProductDomainsDataProductDomainsMyProductId = string;
type MyProductDomainsDataProductDomainsMyProductExpire = any;
type MyProductDomainsDataProductDomainsMyTld = string;

useMutationProductDomainRequestNewAuthcode.Document = gql`
    mutation productDomainRequestNewAuthcode($id: ID!) {
        productDomainRequestNewAuthcode(id: $id) {
            ...ProductDomainPart
        }
    }
    ${_gql_ProductDomainPart}
` as DocumentNode;

export function useMutationProductDomainRequestNewAuthcode(
    options?: MutationHookOptions<
        ProductDomainRequestNewAuthcodeData,
        ProductDomainRequestNewAuthcodeVariables
    >
): MutationHookFn<
    ProductDomainRequestNewAuthcodeData,
    ProductDomainRequestNewAuthcodeVariables
> {
    return useMutation<
        ProductDomainRequestNewAuthcodeData,
        ProductDomainRequestNewAuthcodeVariables
    >(useMutationProductDomainRequestNewAuthcode.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type ProductDomainRequestNewAuthcodeVariables = {
    id: ProductDomainRequestNewAuthcodeVariablesId;
};

type ProductDomainRequestNewAuthcodeVariablesId = string;

export type ProductDomainRequestNewAuthcodeData = {
    productDomainRequestNewAuthcode: ProductDomainRequestNewAuthcodeDataProductDomainRequestNewAuthcode;
};

type ProductDomainRequestNewAuthcodeDataProductDomainRequestNewAuthcode = ProductDomainPart & {
    __typename?: 'ProductDomain';
};

useMutationProductDomainDelete.Document = gql`
    mutation productDomainDelete($id: ID!) {
        productDomainDelete(id: $id)
    }
` as DocumentNode;

export function useMutationProductDomainDelete(
    options?: MutationHookOptions<
        ProductDomainDeleteData,
        ProductDomainDeleteVariables
    >
): MutationHookFn<ProductDomainDeleteData, ProductDomainDeleteVariables> {
    return useMutation<ProductDomainDeleteData, ProductDomainDeleteVariables>(
        useMutationProductDomainDelete.Document,
        { ...mutationDefaultOptions, ...options }
    ) as any;
}

export type ProductDomainDeleteVariables = {
    id: ProductDomainDeleteVariablesId;
};

type ProductDomainDeleteVariablesId = string;

export type ProductDomainDeleteData = {
    productDomainDelete: ProductDomainDeleteDataProductDomainDelete;
};

type ProductDomainDeleteDataProductDomainDelete = boolean;

useMutationProductDomainSetAuthcode.Document = gql`
    mutation productDomainSetAuthcode($id: ID!, $authcode: String!) {
        productDomainSetAuthcode(id: $id, authcode: $authcode) {
            ...ProductDomainPart
        }
    }
    ${_gql_ProductDomainPart}
` as DocumentNode;

export function useMutationProductDomainSetAuthcode(
    options?: MutationHookOptions<
        ProductDomainSetAuthcodeData,
        ProductDomainSetAuthcodeVariables
    >
): MutationHookFn<
    ProductDomainSetAuthcodeData,
    ProductDomainSetAuthcodeVariables
> {
    return useMutation<
        ProductDomainSetAuthcodeData,
        ProductDomainSetAuthcodeVariables
    >(useMutationProductDomainSetAuthcode.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type ProductDomainSetAuthcodeVariables = {
    id: ProductDomainSetAuthcodeVariablesId;
    authcode: ProductDomainSetAuthcodeVariablesAuthcode;
};

type ProductDomainSetAuthcodeVariablesId = string;
type ProductDomainSetAuthcodeVariablesAuthcode = string;

export type ProductDomainSetAuthcodeData = {
    productDomainSetAuthcode: ProductDomainSetAuthcodeDataProductDomainSetAuthcode;
};

type ProductDomainSetAuthcodeDataProductDomainSetAuthcode = ProductDomainPart & {
    __typename?: 'ProductDomain';
};

/*,
 * Fragments from undefined,
 */

/*,
 * Operations from undefined,
 */

useMutationDsgvoAnonymizeAccount.Document = gql`
    mutation dsgvoAnonymizeAccount($id: ID!) {
        dsgvoAnonymizeAccount(id: $id)
    }
` as DocumentNode;

export function useMutationDsgvoAnonymizeAccount(
    options?: MutationHookOptions<
        DsgvoAnonymizeAccountData,
        DsgvoAnonymizeAccountVariables
    >
): MutationHookFn<DsgvoAnonymizeAccountData, DsgvoAnonymizeAccountVariables> {
    return useMutation<
        DsgvoAnonymizeAccountData,
        DsgvoAnonymizeAccountVariables
    >(useMutationDsgvoAnonymizeAccount.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type DsgvoAnonymizeAccountVariables = {
    id: DsgvoAnonymizeAccountVariablesId;
};

type DsgvoAnonymizeAccountVariablesId = string;

export type DsgvoAnonymizeAccountData = {
    dsgvoAnonymizeAccount: DsgvoAnonymizeAccountDataDsgvoAnonymizeAccount;
};

type DsgvoAnonymizeAccountDataDsgvoAnonymizeAccount = boolean;

/*,
 * Fragments from undefined,
 */
export type EmailTemplatePart = {
    id: EmailTemplatePartId;
    sender: EmailTemplatePartSender;
    subject: EmailTemplatePartSubject;
    template: EmailTemplatePartTemplate;
};

type EmailTemplatePartId = string;
type EmailTemplatePartSender = string;
type EmailTemplatePartSubject = string;
type EmailTemplatePartTemplate = string;
const _gql_EmailTemplatePart = gql`
    fragment EmailTemplatePart on EmailTemplate {
        id
        sender
        subject
        template
    }
`;

/*,
 * Operations from undefined,
 */

useQueryEmailTemplates.Document = gql`
    query EmailTemplates($filter: CordFilter) {
        emailTemplates(filter: $filter) {
            edges {
                ...EmailTemplatePart
            }
            pageInfo {
                totalCount
            }
        }
    }
    ${_gql_EmailTemplatePart}
` as DocumentNode;

export function useQueryEmailTemplates(
    options?: QueryHookOptions<EmailTemplatesData, EmailTemplatesVariables>
) {
    const result = useQuery<EmailTemplatesData, EmailTemplatesVariables>(
        useQueryEmailTemplates.Document,
        { ...queryDefaultOptions, ...options }
    );
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryEmailTemplates.lazy = function (
    options?: LazyQueryHookOptions<EmailTemplatesData, EmailTemplatesVariables>
) {
    return useLazyQuery(useQueryEmailTemplates.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type EmailTemplatesVariables = {
    filter?: Nullable<EmailTemplatesVariablesFilter>;
};

type EmailTemplatesVariablesFilter = CordFilter;

export type EmailTemplatesData = {
    emailTemplates: EmailTemplatesDataEmailTemplates;
};

type EmailTemplatesDataEmailTemplates = {
    __typename?: 'EmailTemplateResultMany';
    edges: Array<EmailTemplatesDataEmailTemplatesEdges>;
    pageInfo: EmailTemplatesDataEmailTemplatesPageInfo;
};

type EmailTemplatesDataEmailTemplatesEdges = EmailTemplatePart & {
    __typename?: 'EmailTemplate';
};

type EmailTemplatesDataEmailTemplatesPageInfo = {
    __typename?: 'CordPageInfo';
    totalCount: EmailTemplatesDataEmailTemplatesPageInfoTotalCount;
};

type EmailTemplatesDataEmailTemplatesPageInfoTotalCount = number;

useQueryEmailTemplateById.Document = gql`
    query emailTemplateById($id: ID!) {
        emailTemplateById(id: $id) {
            ...EmailTemplatePart
            templateContent
        }
    }
    ${_gql_EmailTemplatePart}
` as DocumentNode;

export function useQueryEmailTemplateById(
    options?: QueryHookOptions<
        EmailTemplateByIdData,
        EmailTemplateByIdVariables
    >
) {
    const result = useQuery<EmailTemplateByIdData, EmailTemplateByIdVariables>(
        useQueryEmailTemplateById.Document,
        { ...queryDefaultOptions, ...options }
    );
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryEmailTemplateById.lazy = function (
    options?: LazyQueryHookOptions<
        EmailTemplateByIdData,
        EmailTemplateByIdVariables
    >
) {
    return useLazyQuery(useQueryEmailTemplateById.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type EmailTemplateByIdVariables = {
    id: EmailTemplateByIdVariablesId;
};

type EmailTemplateByIdVariablesId = string;

export type EmailTemplateByIdData = {
    emailTemplateById: EmailTemplateByIdDataEmailTemplateById;
};

type EmailTemplateByIdDataEmailTemplateById = EmailTemplatePart & {
    __typename?: 'EmailTemplate';
    templateContent: EmailTemplateByIdDataEmailTemplateByIdTemplateContent;
};

type EmailTemplateByIdDataEmailTemplateByIdTemplateContent = string;

useMutationNewEmailTemplate.Document = gql`
    mutation newEmailTemplate(
        $sender: String!
        $subject: String!
        $template: String!
        $templateContent: String
    ) {
        email_template_new(
            data: {
                sender: $sender
                subject: $subject
                template: $template
                templateContent: $templateContent
            }
        ) {
            ...EmailTemplatePart
            templateContent
        }
    }
    ${_gql_EmailTemplatePart}
` as DocumentNode;

export function useMutationNewEmailTemplate(
    options?: MutationHookOptions<
        NewEmailTemplateData,
        NewEmailTemplateVariables
    >
): MutationHookFn<NewEmailTemplateData, NewEmailTemplateVariables> {
    return useMutation<NewEmailTemplateData, NewEmailTemplateVariables>(
        useMutationNewEmailTemplate.Document,
        { ...mutationDefaultOptions, ...options }
    ) as any;
}

export type NewEmailTemplateVariables = {
    sender: NewEmailTemplateVariablesSender;
    subject: NewEmailTemplateVariablesSubject;
    template: NewEmailTemplateVariablesTemplate;
    templateContent?: Nullable<NewEmailTemplateVariablesTemplateContent>;
};

type NewEmailTemplateVariablesSender = string;
type NewEmailTemplateVariablesSubject = string;
type NewEmailTemplateVariablesTemplate = string;
type NewEmailTemplateVariablesTemplateContent = string;

export type NewEmailTemplateData = {
    email_template_new: NewEmailTemplateDataEmailTemplateNew;
};

type NewEmailTemplateDataEmailTemplateNew = EmailTemplatePart & {
    __typename?: 'EmailTemplate';
    templateContent: NewEmailTemplateDataEmailTemplateNewTemplateContent;
};

type NewEmailTemplateDataEmailTemplateNewTemplateContent = string;

useMutationDeleteEmailTemplate.Document = gql`
    mutation deleteEmailTemplate($id: ID!) {
        email_template_delete(id: $id)
    }
` as DocumentNode;

export function useMutationDeleteEmailTemplate(
    options?: MutationHookOptions<
        DeleteEmailTemplateData,
        DeleteEmailTemplateVariables
    >
): MutationHookFn<DeleteEmailTemplateData, DeleteEmailTemplateVariables> {
    return useMutation<DeleteEmailTemplateData, DeleteEmailTemplateVariables>(
        useMutationDeleteEmailTemplate.Document,
        { ...mutationDefaultOptions, ...options }
    ) as any;
}

export type DeleteEmailTemplateVariables = {
    id: DeleteEmailTemplateVariablesId;
};

type DeleteEmailTemplateVariablesId = string;

export type DeleteEmailTemplateData = {
    email_template_delete: DeleteEmailTemplateDataEmailTemplateDelete;
};

type DeleteEmailTemplateDataEmailTemplateDelete = boolean;

useMutationEditEmailTemplate.Document = gql`
    mutation editEmailTemplate(
        $id: ID!
        $sender: String!
        $subject: String!
        $template: String!
        $templateContent: String
    ) {
        email_template_edit(
            data: {
                id: $id
                sender: $sender
                subject: $subject
                template: $template
                templateContent: $templateContent
            }
        ) {
            ...EmailTemplatePart
            templateContent
        }
    }
    ${_gql_EmailTemplatePart}
` as DocumentNode;

export function useMutationEditEmailTemplate(
    options?: MutationHookOptions<
        EditEmailTemplateData,
        EditEmailTemplateVariables
    >
): MutationHookFn<EditEmailTemplateData, EditEmailTemplateVariables> {
    return useMutation<EditEmailTemplateData, EditEmailTemplateVariables>(
        useMutationEditEmailTemplate.Document,
        { ...mutationDefaultOptions, ...options }
    ) as any;
}

export type EditEmailTemplateVariables = {
    id: EditEmailTemplateVariablesId;
    sender: EditEmailTemplateVariablesSender;
    subject: EditEmailTemplateVariablesSubject;
    template: EditEmailTemplateVariablesTemplate;
    templateContent?: Nullable<EditEmailTemplateVariablesTemplateContent>;
};

type EditEmailTemplateVariablesId = string;
type EditEmailTemplateVariablesSender = string;
type EditEmailTemplateVariablesSubject = string;
type EditEmailTemplateVariablesTemplate = string;
type EditEmailTemplateVariablesTemplateContent = string;

export type EditEmailTemplateData = {
    email_template_edit: EditEmailTemplateDataEmailTemplateEdit;
};

type EditEmailTemplateDataEmailTemplateEdit = EmailTemplatePart & {
    __typename?: 'EmailTemplate';
    templateContent: EditEmailTemplateDataEmailTemplateEditTemplateContent;
};

type EditEmailTemplateDataEmailTemplateEditTemplateContent = string;

/*,
 * Fragments from undefined,
 */

/*,
 * Operations from undefined,
 */

useMutationFileDeleteFile.Document = gql`
    mutation FileDeleteFile($id: ID!) {
        FileDeleteFile(id: $id)
    }
` as DocumentNode;

export function useMutationFileDeleteFile(
    options?: MutationHookOptions<FileDeleteFileData, FileDeleteFileVariables>
): MutationHookFn<FileDeleteFileData, FileDeleteFileVariables> {
    return useMutation<FileDeleteFileData, FileDeleteFileVariables>(
        useMutationFileDeleteFile.Document,
        { ...mutationDefaultOptions, ...options }
    ) as any;
}

export type FileDeleteFileVariables = {
    id: FileDeleteFileVariablesId;
};

type FileDeleteFileVariablesId = string;

export type FileDeleteFileData = {
    FileDeleteFile: FileDeleteFileDataFileDeleteFile;
};

type FileDeleteFileDataFileDeleteFile = boolean;

useQueryMyFiles.Document = gql`
    query myFiles {
        myFiles {
            id
            hasExpired
            url
            exists
            create
            mimetype
            originalname
            expiryDate
        }
    }
` as DocumentNode;

export function useQueryMyFiles(
    options?: QueryHookOptions<MyFilesData, MyFilesVariables>
) {
    const result = useQuery<MyFilesData, MyFilesVariables>(
        useQueryMyFiles.Document,
        { ...queryDefaultOptions, ...options }
    );
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryMyFiles.lazy = function (
    options?: LazyQueryHookOptions<MyFilesData, MyFilesVariables>
) {
    return useLazyQuery(useQueryMyFiles.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type MyFilesVariables = {};

export type MyFilesData = {
    myFiles: Array<MyFilesDataMyFiles>;
};

type MyFilesDataMyFiles = {
    __typename?: 'File';
    id: MyFilesDataMyFilesId;
    hasExpired: MyFilesDataMyFilesHasExpired;
    url: MyFilesDataMyFilesUrl;
    exists: MyFilesDataMyFilesExists;
    create: MyFilesDataMyFilesCreate;
    mimetype: MyFilesDataMyFilesMimetype;
    originalname: MyFilesDataMyFilesOriginalname;
    expiryDate?: Nullable<MyFilesDataMyFilesExpiryDate>;
};

type MyFilesDataMyFilesId = string;
type MyFilesDataMyFilesHasExpired = boolean;
type MyFilesDataMyFilesUrl = string;
type MyFilesDataMyFilesExists = boolean;
type MyFilesDataMyFilesCreate = any;
type MyFilesDataMyFilesMimetype = string;
type MyFilesDataMyFilesOriginalname = string;
type MyFilesDataMyFilesExpiryDate = any;

/*,
 * Fragments from undefined,
 */
export type FinanceTransactionPart = {
    id: FinanceTransactionPartId;
    description?: Nullable<FinanceTransactionPartDescription>;
    create: FinanceTransactionPartCreate;
    total: FinanceTransactionPartTotal;
    isPull: FinanceTransactionPartIsPull;
    isPut: FinanceTransactionPartIsPut;
    billId: FinanceTransactionPartBillId;
    pdf?: Nullable<FinanceTransactionPartPdf>;
    items: Array<FinanceTransactionPartItems>;
    totalExclVat: FinanceTransactionPartTotalExclVat;
    totalInclVat: FinanceTransactionPartTotalInclVat;
};

type FinanceTransactionPartId = string;
type FinanceTransactionPartDescription = string;
type FinanceTransactionPartCreate = any;
type FinanceTransactionPartTotal = number;
type FinanceTransactionPartIsPull = boolean;
type FinanceTransactionPartIsPut = boolean;
type FinanceTransactionPartBillId = string;
type FinanceTransactionPartPdf = {
    __typename?: 'Pdf';
    id: FinanceTransactionPartPdfId;
    url: FinanceTransactionPartPdfUrl;
};

type FinanceTransactionPartPdfId = string;
type FinanceTransactionPartPdfUrl = string;
type FinanceTransactionPartItems = {
    __typename?: 'FinanceTransactionItem';
    id: FinanceTransactionPartItemsId;
    amount: FinanceTransactionPartItemsAmount;
    vat?: Nullable<FinanceTransactionPartItemsVat>;
    getInclVat: FinanceTransactionPartItemsGetInclVat;
    title?: Nullable<FinanceTransactionPartItemsTitle>;
    getExclVat: FinanceTransactionPartItemsGetExclVat;
};

type FinanceTransactionPartItemsId = string;
type FinanceTransactionPartItemsAmount = number;
type FinanceTransactionPartItemsVat = number;
type FinanceTransactionPartItemsGetInclVat = number;
type FinanceTransactionPartItemsTitle = string;
type FinanceTransactionPartItemsGetExclVat = number;
type FinanceTransactionPartTotalExclVat = number;
type FinanceTransactionPartTotalInclVat = number;
const _gql_FinanceTransactionPart = gql`
    fragment FinanceTransactionPart on FinanceTransaction {
        id
        description
        create
        total
        isPull
        isPut
        billId
        pdf {
            id
            url
        }
        items {
            id
            amount
            vat
            getInclVat
            title
            getExclVat
        }
        totalExclVat
        totalInclVat
    }
`;

/*,
 * Operations from undefined,
 */

useQueryFinancePaymentMethods.Document = gql`
    query FinancePaymentMethods {
        FinancePaymentMethods {
            method
            logo
            title

            minPayable
            maxPayable
            active
            forceAllowedValues
            tooltip
            bonusCredits {
                minCredits
                threshold
                bonus
            }
            transactionFee
        }
    }
` as DocumentNode;

export function useQueryFinancePaymentMethods(
    options?: QueryHookOptions<
        FinancePaymentMethodsData,
        FinancePaymentMethodsVariables
    >
) {
    const result = useQuery<
        FinancePaymentMethodsData,
        FinancePaymentMethodsVariables
    >(useQueryFinancePaymentMethods.Document, {
        ...queryDefaultOptions,
        ...options,
    });
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryFinancePaymentMethods.lazy = function (
    options?: LazyQueryHookOptions<
        FinancePaymentMethodsData,
        FinancePaymentMethodsVariables
    >
) {
    return useLazyQuery(useQueryFinancePaymentMethods.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type FinancePaymentMethodsVariables = {};

export type FinancePaymentMethodsData = {
    FinancePaymentMethods: Array<FinancePaymentMethodsDataFinancePaymentMethods>;
};

type FinancePaymentMethodsDataFinancePaymentMethods = {
    __typename?: 'PaymentMethod';
    method: FinancePaymentMethodsDataFinancePaymentMethodsMethod;
    logo: FinancePaymentMethodsDataFinancePaymentMethodsLogo;
    title: FinancePaymentMethodsDataFinancePaymentMethodsTitle;
    minPayable?: Nullable<FinancePaymentMethodsDataFinancePaymentMethodsMinPayable>;
    maxPayable?: Nullable<FinancePaymentMethodsDataFinancePaymentMethodsMaxPayable>;
    active?: Nullable<FinancePaymentMethodsDataFinancePaymentMethodsActive>;
    forceAllowedValues?: Nullable<
        Array<FinancePaymentMethodsDataFinancePaymentMethodsForceAllowedValues>
    >;
    tooltip?: Nullable<FinancePaymentMethodsDataFinancePaymentMethodsTooltip>;
    bonusCredits?: Nullable<
        Array<FinancePaymentMethodsDataFinancePaymentMethodsBonusCredits>
    >;
    transactionFee?: Nullable<FinancePaymentMethodsDataFinancePaymentMethodsTransactionFee>;
};

type FinancePaymentMethodsDataFinancePaymentMethodsMethod = string;
type FinancePaymentMethodsDataFinancePaymentMethodsLogo = string;
type FinancePaymentMethodsDataFinancePaymentMethodsTitle = string;
type FinancePaymentMethodsDataFinancePaymentMethodsMinPayable = number;
type FinancePaymentMethodsDataFinancePaymentMethodsMaxPayable = number;
type FinancePaymentMethodsDataFinancePaymentMethodsActive = boolean;
type FinancePaymentMethodsDataFinancePaymentMethodsForceAllowedValues = number;
type FinancePaymentMethodsDataFinancePaymentMethodsTooltip = string;
type FinancePaymentMethodsDataFinancePaymentMethodsBonusCredits = {
    __typename?: 'BonusCredits';
    minCredits: FinancePaymentMethodsDataFinancePaymentMethodsBonusCreditsMinCredits;
    threshold: FinancePaymentMethodsDataFinancePaymentMethodsBonusCreditsThreshold;
    bonus: FinancePaymentMethodsDataFinancePaymentMethodsBonusCreditsBonus;
};

type FinancePaymentMethodsDataFinancePaymentMethodsBonusCreditsMinCredits = number;
type FinancePaymentMethodsDataFinancePaymentMethodsBonusCreditsThreshold = number;
type FinancePaymentMethodsDataFinancePaymentMethodsBonusCreditsBonus = number;
type FinancePaymentMethodsDataFinancePaymentMethodsTransactionFee = number;

useQueryFinanceTransactions.Document = gql`
    query financeTransactions($filter: CordFilter) {
        financeTransactions(filter: $filter) {
            edges {
                ...FinanceTransactionPart
            }
            pageInfo {
                totalCount
            }
        }
    }
    ${_gql_FinanceTransactionPart}
` as DocumentNode;

export function useQueryFinanceTransactions(
    options?: QueryHookOptions<
        FinanceTransactionsData,
        FinanceTransactionsVariables
    >
) {
    const result = useQuery<
        FinanceTransactionsData,
        FinanceTransactionsVariables
    >(useQueryFinanceTransactions.Document, {
        ...queryDefaultOptions,
        ...options,
    });
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryFinanceTransactions.lazy = function (
    options?: LazyQueryHookOptions<
        FinanceTransactionsData,
        FinanceTransactionsVariables
    >
) {
    return useLazyQuery(useQueryFinanceTransactions.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type FinanceTransactionsVariables = {
    filter?: Nullable<FinanceTransactionsVariablesFilter>;
};

type FinanceTransactionsVariablesFilter = CordFilter;

export type FinanceTransactionsData = {
    financeTransactions: FinanceTransactionsDataFinanceTransactions;
};

type FinanceTransactionsDataFinanceTransactions = {
    __typename?: 'FinanceTransactionResultMany';
    edges: Array<FinanceTransactionsDataFinanceTransactionsEdges>;
    pageInfo: FinanceTransactionsDataFinanceTransactionsPageInfo;
};

type FinanceTransactionsDataFinanceTransactionsEdges = FinanceTransactionPart & {
    __typename?: 'FinanceTransaction';
};

type FinanceTransactionsDataFinanceTransactionsPageInfo = {
    __typename?: 'CordPageInfo';
    totalCount: FinanceTransactionsDataFinanceTransactionsPageInfoTotalCount;
};

type FinanceTransactionsDataFinanceTransactionsPageInfoTotalCount = number;

useQueryFinanceTransactionById.Document = gql`
    query financeTransactionById($id: ID!) {
        financeTransactionById(id: $id) {
            ...FinanceTransactionPart
        }
    }
    ${_gql_FinanceTransactionPart}
` as DocumentNode;

export function useQueryFinanceTransactionById(
    options?: QueryHookOptions<
        FinanceTransactionByIdData,
        FinanceTransactionByIdVariables
    >
) {
    const result = useQuery<
        FinanceTransactionByIdData,
        FinanceTransactionByIdVariables
    >(useQueryFinanceTransactionById.Document, {
        ...queryDefaultOptions,
        ...options,
    });
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryFinanceTransactionById.lazy = function (
    options?: LazyQueryHookOptions<
        FinanceTransactionByIdData,
        FinanceTransactionByIdVariables
    >
) {
    return useLazyQuery(useQueryFinanceTransactionById.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type FinanceTransactionByIdVariables = {
    id: FinanceTransactionByIdVariablesId;
};

type FinanceTransactionByIdVariablesId = string;

export type FinanceTransactionByIdData = {
    financeTransactionById: FinanceTransactionByIdDataFinanceTransactionById;
};

type FinanceTransactionByIdDataFinanceTransactionById = FinanceTransactionPart & {
    __typename?: 'FinanceTransaction';
};

useMutationCreateFinanceTransaction.Document = gql`
    mutation CreateFinanceTransaction($data: FinanceTransactionCreateInput!) {
        financeTransactionCreate(data: $data) {
            ...FinanceTransactionPart
        }
    }
    ${_gql_FinanceTransactionPart}
` as DocumentNode;

export function useMutationCreateFinanceTransaction(
    options?: MutationHookOptions<
        CreateFinanceTransactionData,
        CreateFinanceTransactionVariables
    >
): MutationHookFn<
    CreateFinanceTransactionData,
    CreateFinanceTransactionVariables
> {
    return useMutation<
        CreateFinanceTransactionData,
        CreateFinanceTransactionVariables
    >(useMutationCreateFinanceTransaction.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type CreateFinanceTransactionVariables = {
    data: CreateFinanceTransactionVariablesData;
};

type CreateFinanceTransactionVariablesData = FinanceTransactionCreateInput;

export type CreateFinanceTransactionData = {
    financeTransactionCreate: CreateFinanceTransactionDataFinanceTransactionCreate;
};

type CreateFinanceTransactionDataFinanceTransactionCreate = FinanceTransactionPart & {
    __typename?: 'FinanceTransaction';
};

useQueryMyFinanceTransactions.Document = gql`
    query MyFinanceTransactions {
        user_me {
            id
            transactions {
                ...FinanceTransactionPart
                donationMessage
                isDonation
            }
            credits
        }
    }
    ${_gql_FinanceTransactionPart}
` as DocumentNode;

export function useQueryMyFinanceTransactions(
    options?: QueryHookOptions<
        MyFinanceTransactionsData,
        MyFinanceTransactionsVariables
    >
) {
    const result = useQuery<
        MyFinanceTransactionsData,
        MyFinanceTransactionsVariables
    >(useQueryMyFinanceTransactions.Document, {
        ...queryDefaultOptions,
        ...options,
    });
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryMyFinanceTransactions.lazy = function (
    options?: LazyQueryHookOptions<
        MyFinanceTransactionsData,
        MyFinanceTransactionsVariables
    >
) {
    return useLazyQuery(useQueryMyFinanceTransactions.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type MyFinanceTransactionsVariables = {};

export type MyFinanceTransactionsData = {
    user_me: MyFinanceTransactionsDataUserMe;
};

type MyFinanceTransactionsDataUserMe = {
    __typename?: 'User';
    id: MyFinanceTransactionsDataUserMeId;
    transactions: Array<MyFinanceTransactionsDataUserMeTransactions>;
    credits: MyFinanceTransactionsDataUserMeCredits;
};

type MyFinanceTransactionsDataUserMeId = string;
type MyFinanceTransactionsDataUserMeTransactions = FinanceTransactionPart & {
    __typename?: 'FinanceTransaction';
    donationMessage?: Nullable<MyFinanceTransactionsDataUserMeTransactionsDonationMessage>;
    isDonation: MyFinanceTransactionsDataUserMeTransactionsIsDonation;
};

type MyFinanceTransactionsDataUserMeTransactionsDonationMessage = string;
type MyFinanceTransactionsDataUserMeTransactionsIsDonation = boolean;
type MyFinanceTransactionsDataUserMeCredits = number;

/*,
 * Fragments from undefined,
 */
export type FinanceChargePart = {
    id: FinanceChargePartId;
    create: FinanceChargePartCreate;
    amount: FinanceChargePartAmount;
    method: FinanceChargePartMethod;
    receiver: FinanceChargePartReceiver;
    transaction?: Nullable<FinanceChargePartTransaction>;
    verified: FinanceChargePartVerified;
    meta: FinanceChargePartMeta;
};

type FinanceChargePartId = string;
type FinanceChargePartCreate = any;
type FinanceChargePartAmount = number;
type FinanceChargePartMethod = string;
type FinanceChargePartReceiver = {
    __typename?: 'User';
    email: FinanceChargePartReceiverEmail;
    id: FinanceChargePartReceiverId;
};

type FinanceChargePartReceiverEmail = string;
type FinanceChargePartReceiverId = string;
type FinanceChargePartTransaction = {
    __typename?: 'FinanceTransaction';
    id: FinanceChargePartTransactionId;
};

type FinanceChargePartTransactionId = string;
type FinanceChargePartVerified = boolean;
type FinanceChargePartMeta = any;
const _gql_FinanceChargePart = gql`
    fragment FinanceChargePart on FinanceCharge {
        id
        create
        amount
        method
        receiver {
            email
            id
        }
        transaction {
            id
        }
        verified
        meta
    }
`;

/*,
 * Operations from undefined,
 */

useQueryFinanceCharges.Document = gql`
    query financeCharges($filter: CordFilter) {
        financeCharges(filter: $filter) {
            edges {
                ...FinanceChargePart
                donation {
                    id
                }
            }
            pageInfo {
                totalCount
            }
        }
    }
    ${_gql_FinanceChargePart}
` as DocumentNode;

export function useQueryFinanceCharges(
    options?: QueryHookOptions<FinanceChargesData, FinanceChargesVariables>
) {
    const result = useQuery<FinanceChargesData, FinanceChargesVariables>(
        useQueryFinanceCharges.Document,
        { ...queryDefaultOptions, ...options }
    );
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryFinanceCharges.lazy = function (
    options?: LazyQueryHookOptions<FinanceChargesData, FinanceChargesVariables>
) {
    return useLazyQuery(useQueryFinanceCharges.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type FinanceChargesVariables = {
    filter?: Nullable<FinanceChargesVariablesFilter>;
};

type FinanceChargesVariablesFilter = CordFilter;

export type FinanceChargesData = {
    financeCharges: FinanceChargesDataFinanceCharges;
};

type FinanceChargesDataFinanceCharges = {
    __typename?: 'FinanceChargeResultMany';
    edges: Array<FinanceChargesDataFinanceChargesEdges>;
    pageInfo: FinanceChargesDataFinanceChargesPageInfo;
};

type FinanceChargesDataFinanceChargesEdges = FinanceChargePart & {
    __typename?: 'FinanceCharge';
    donation?: Nullable<FinanceChargesDataFinanceChargesEdgesDonation>;
};

type FinanceChargesDataFinanceChargesEdgesDonation = {
    __typename?: 'FinanceDonation';
    id: FinanceChargesDataFinanceChargesEdgesDonationId;
};

type FinanceChargesDataFinanceChargesEdgesDonationId = string;
type FinanceChargesDataFinanceChargesPageInfo = {
    __typename?: 'CordPageInfo';
    totalCount: FinanceChargesDataFinanceChargesPageInfoTotalCount;
};

type FinanceChargesDataFinanceChargesPageInfoTotalCount = number;

useQueryFinanceChargeById.Document = gql`
    query financeChargeById($id: ID!) {
        financeChargeById(id: $id) {
            ...FinanceChargePart
        }
    }
    ${_gql_FinanceChargePart}
` as DocumentNode;

export function useQueryFinanceChargeById(
    options?: QueryHookOptions<
        FinanceChargeByIdData,
        FinanceChargeByIdVariables
    >
) {
    const result = useQuery<FinanceChargeByIdData, FinanceChargeByIdVariables>(
        useQueryFinanceChargeById.Document,
        { ...queryDefaultOptions, ...options }
    );
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryFinanceChargeById.lazy = function (
    options?: LazyQueryHookOptions<
        FinanceChargeByIdData,
        FinanceChargeByIdVariables
    >
) {
    return useLazyQuery(useQueryFinanceChargeById.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type FinanceChargeByIdVariables = {
    id: FinanceChargeByIdVariablesId;
};

type FinanceChargeByIdVariablesId = string;

export type FinanceChargeByIdData = {
    financeChargeById: FinanceChargeByIdDataFinanceChargeById;
};

type FinanceChargeByIdDataFinanceChargeById = FinanceChargePart & {
    __typename?: 'FinanceCharge';
};

useMutationFinanceChargeVerify.Document = gql`
    mutation financeChargeVerify($id: ID!, $description: String) {
        financeChargeVerify(id: $id, description: $description) {
            ...FinanceChargePart
        }
    }
    ${_gql_FinanceChargePart}
` as DocumentNode;

export function useMutationFinanceChargeVerify(
    options?: MutationHookOptions<
        FinanceChargeVerifyData,
        FinanceChargeVerifyVariables
    >
): MutationHookFn<FinanceChargeVerifyData, FinanceChargeVerifyVariables> {
    return useMutation<FinanceChargeVerifyData, FinanceChargeVerifyVariables>(
        useMutationFinanceChargeVerify.Document,
        { ...mutationDefaultOptions, ...options }
    ) as any;
}

export type FinanceChargeVerifyVariables = {
    id: FinanceChargeVerifyVariablesId;
    description?: Nullable<FinanceChargeVerifyVariablesDescription>;
};

type FinanceChargeVerifyVariablesId = string;
type FinanceChargeVerifyVariablesDescription = string;

export type FinanceChargeVerifyData = {
    financeChargeVerify: FinanceChargeVerifyDataFinanceChargeVerify;
};

type FinanceChargeVerifyDataFinanceChargeVerify = FinanceChargePart & {
    __typename?: 'FinanceCharge';
};

useMutationFinanceChargeDelete.Document = gql`
    mutation financeChargeDelete($id: ID!) {
        financeChargeDelete(id: $id)
    }
` as DocumentNode;

export function useMutationFinanceChargeDelete(
    options?: MutationHookOptions<
        FinanceChargeDeleteData,
        FinanceChargeDeleteVariables
    >
): MutationHookFn<FinanceChargeDeleteData, FinanceChargeDeleteVariables> {
    return useMutation<FinanceChargeDeleteData, FinanceChargeDeleteVariables>(
        useMutationFinanceChargeDelete.Document,
        { ...mutationDefaultOptions, ...options }
    ) as any;
}

export type FinanceChargeDeleteVariables = {
    id: FinanceChargeDeleteVariablesId;
};

type FinanceChargeDeleteVariablesId = string;

export type FinanceChargeDeleteData = {
    financeChargeDelete: FinanceChargeDeleteDataFinanceChargeDelete;
};

type FinanceChargeDeleteDataFinanceChargeDelete = boolean;

/*,
 * Fragments from undefined,
 */

/*,
 * Operations from undefined,
 */

useQueryFinanceDonationLinksMy.Document = gql`
    query financeDonationLinksMy {
        financeDonationLinksMy {
            id
            create
            message
            url
            totalDonationSum
            label
        }
    }
` as DocumentNode;

export function useQueryFinanceDonationLinksMy(
    options?: QueryHookOptions<
        FinanceDonationLinksMyData,
        FinanceDonationLinksMyVariables
    >
) {
    const result = useQuery<
        FinanceDonationLinksMyData,
        FinanceDonationLinksMyVariables
    >(useQueryFinanceDonationLinksMy.Document, {
        ...queryDefaultOptions,
        ...options,
    });
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryFinanceDonationLinksMy.lazy = function (
    options?: LazyQueryHookOptions<
        FinanceDonationLinksMyData,
        FinanceDonationLinksMyVariables
    >
) {
    return useLazyQuery(useQueryFinanceDonationLinksMy.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type FinanceDonationLinksMyVariables = {};

export type FinanceDonationLinksMyData = {
    financeDonationLinksMy: Array<FinanceDonationLinksMyDataFinanceDonationLinksMy>;
};

type FinanceDonationLinksMyDataFinanceDonationLinksMy = {
    __typename?: 'FinanceDonationLink';
    id: FinanceDonationLinksMyDataFinanceDonationLinksMyId;
    create: FinanceDonationLinksMyDataFinanceDonationLinksMyCreate;
    message: FinanceDonationLinksMyDataFinanceDonationLinksMyMessage;
    url: FinanceDonationLinksMyDataFinanceDonationLinksMyUrl;
    totalDonationSum: FinanceDonationLinksMyDataFinanceDonationLinksMyTotalDonationSum;
    label?: Nullable<FinanceDonationLinksMyDataFinanceDonationLinksMyLabel>;
};

type FinanceDonationLinksMyDataFinanceDonationLinksMyId = string;
type FinanceDonationLinksMyDataFinanceDonationLinksMyCreate = any;
type FinanceDonationLinksMyDataFinanceDonationLinksMyMessage = string;
type FinanceDonationLinksMyDataFinanceDonationLinksMyUrl = string;
type FinanceDonationLinksMyDataFinanceDonationLinksMyTotalDonationSum = number;
type FinanceDonationLinksMyDataFinanceDonationLinksMyLabel = string;

useMutationFinanceDonationLinkCreate.Document = gql`
    mutation financeDonationLinkCreate($message: String!, $label: String) {
        financeDonationLinkCreate(message: $message, label: $label) {
            id
            create
            message
            url
            totalDonationSum
        }
    }
` as DocumentNode;

export function useMutationFinanceDonationLinkCreate(
    options?: MutationHookOptions<
        FinanceDonationLinkCreateData,
        FinanceDonationLinkCreateVariables
    >
): MutationHookFn<
    FinanceDonationLinkCreateData,
    FinanceDonationLinkCreateVariables
> {
    return useMutation<
        FinanceDonationLinkCreateData,
        FinanceDonationLinkCreateVariables
    >(useMutationFinanceDonationLinkCreate.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type FinanceDonationLinkCreateVariables = {
    message: FinanceDonationLinkCreateVariablesMessage;
    label?: Nullable<FinanceDonationLinkCreateVariablesLabel>;
};

type FinanceDonationLinkCreateVariablesMessage = string;
type FinanceDonationLinkCreateVariablesLabel = string;

export type FinanceDonationLinkCreateData = {
    financeDonationLinkCreate: FinanceDonationLinkCreateDataFinanceDonationLinkCreate;
};

type FinanceDonationLinkCreateDataFinanceDonationLinkCreate = {
    __typename?: 'FinanceDonationLink';
    id: FinanceDonationLinkCreateDataFinanceDonationLinkCreateId;
    create: FinanceDonationLinkCreateDataFinanceDonationLinkCreateCreate;
    message: FinanceDonationLinkCreateDataFinanceDonationLinkCreateMessage;
    url: FinanceDonationLinkCreateDataFinanceDonationLinkCreateUrl;
    totalDonationSum: FinanceDonationLinkCreateDataFinanceDonationLinkCreateTotalDonationSum;
};

type FinanceDonationLinkCreateDataFinanceDonationLinkCreateId = string;
type FinanceDonationLinkCreateDataFinanceDonationLinkCreateCreate = any;
type FinanceDonationLinkCreateDataFinanceDonationLinkCreateMessage = string;
type FinanceDonationLinkCreateDataFinanceDonationLinkCreateUrl = string;
type FinanceDonationLinkCreateDataFinanceDonationLinkCreateTotalDonationSum = number;

useMutationFinanceDonationLinkDelete.Document = gql`
    mutation financeDonationLinkDelete($id: ID!) {
        financeDonationLinkDelete(id: $id)
    }
` as DocumentNode;

export function useMutationFinanceDonationLinkDelete(
    options?: MutationHookOptions<
        FinanceDonationLinkDeleteData,
        FinanceDonationLinkDeleteVariables
    >
): MutationHookFn<
    FinanceDonationLinkDeleteData,
    FinanceDonationLinkDeleteVariables
> {
    return useMutation<
        FinanceDonationLinkDeleteData,
        FinanceDonationLinkDeleteVariables
    >(useMutationFinanceDonationLinkDelete.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type FinanceDonationLinkDeleteVariables = {
    id: FinanceDonationLinkDeleteVariablesId;
};

type FinanceDonationLinkDeleteVariablesId = string;

export type FinanceDonationLinkDeleteData = {
    financeDonationLinkDelete: FinanceDonationLinkDeleteDataFinanceDonationLinkDelete;
};

type FinanceDonationLinkDeleteDataFinanceDonationLinkDelete = boolean;

/*,
 * Fragments from undefined,
 */
export type ProductGameserverPart = {
    id: ProductGameserverPartId;
    attributes: ProductGameserverPartAttributes;
    name: ProductGameserverPartName;
    address?: Nullable<ProductGameserverPartAddress>;
    failureAutorestart: ProductGameserverPartFailureAutorestart;
    installed: ProductGameserverPartInstalled;
    slot?: Nullable<ProductGameserverPartSlot>;
    memory?: Nullable<ProductGameserverPartMemory>;
    platform: ProductGameserverPartPlatform;
    canEditMemory: ProductGameserverPartCanEditMemory;
    canEditSlot: ProductGameserverPartCanEditSlot;
    customAutoUpdateOnStartFlag: ProductGameserverPartCustomAutoUpdateOnStartFlag;
    customParameter: ProductGameserverPartCustomParameter;
    product?: Nullable<ProductGameserverPartProduct>;
    scripts: Array<ProductGameserverPartScripts>;
    template?: Nullable<ProductGameserverPartTemplate>;
    ports: Array<ProductGameserverPartPorts>;
    hostNode: ProductGameserverPartHostNode;
    hasRunningTask: ProductGameserverPartHasRunningTask;
    autorestarts: Array<ProductGameserverPartAutorestarts>;
};

type ProductGameserverPartId = string;
type ProductGameserverPartAttributes = any;
type ProductGameserverPartName = string;
type ProductGameserverPartAddress = string;
type ProductGameserverPartFailureAutorestart = boolean;
type ProductGameserverPartInstalled = boolean;
type ProductGameserverPartSlot = string;
type ProductGameserverPartMemory = string;
type ProductGameserverPartPlatform = string;
type ProductGameserverPartCanEditMemory = boolean;
type ProductGameserverPartCanEditSlot = boolean;
type ProductGameserverPartCustomAutoUpdateOnStartFlag = boolean;
type ProductGameserverPartCustomParameter = string;
type ProductGameserverPartProduct = {
    __typename?: 'Product';
    id: ProductGameserverPartProductId;
    expire?: Nullable<ProductGameserverPartProductExpire>;
    locked: ProductGameserverPartProductLocked;
};

type ProductGameserverPartProductId = string;
type ProductGameserverPartProductExpire = any;
type ProductGameserverPartProductLocked = boolean;
type ProductGameserverPartScripts = {
    __typename?: 'ProductGameserverScript';
    id: ProductGameserverPartScriptsId;
    title: ProductGameserverPartScriptsTitle;
    standaloneBtn: ProductGameserverPartScriptsStandaloneBtn;
    standaloneBtnColor?: Nullable<ProductGameserverPartScriptsStandaloneBtnColor>;
};

type ProductGameserverPartScriptsId = string;
type ProductGameserverPartScriptsTitle = string;
type ProductGameserverPartScriptsStandaloneBtn = boolean;
type ProductGameserverPartScriptsStandaloneBtnColor = string;
type ProductGameserverPartTemplate = {
    __typename?: 'ProductGameserverTemplate';
    id: ProductGameserverPartTemplateId;
    title: ProductGameserverPartTemplateTitle;
    defaultCustomParameter: ProductGameserverPartTemplateDefaultCustomParameter;
    canUpdateOnStart: ProductGameserverPartTemplateCanUpdateOnStart;
    logo?: Nullable<ProductGameserverPartTemplateLogo>;
};

type ProductGameserverPartTemplateId = string;
type ProductGameserverPartTemplateTitle = string;
type ProductGameserverPartTemplateDefaultCustomParameter = string;
type ProductGameserverPartTemplateCanUpdateOnStart = boolean;
type ProductGameserverPartTemplateLogo = {
    __typename?: 'File';
    id: ProductGameserverPartTemplateLogoId;
    url: ProductGameserverPartTemplateLogoUrl;
};

type ProductGameserverPartTemplateLogoId = string;
type ProductGameserverPartTemplateLogoUrl = string;
type ProductGameserverPartPorts = {
    __typename?: 'HostNodePort';
    id: ProductGameserverPartPortsId;
    port: ProductGameserverPartPortsPort;
};

type ProductGameserverPartPortsId = string;
type ProductGameserverPartPortsPort = number;
type ProductGameserverPartHostNode = {
    __typename?: 'HostNode';
    id: ProductGameserverPartHostNodeId;
    remoteAddress: ProductGameserverPartHostNodeRemoteAddress;
    name: ProductGameserverPartHostNodeName;
    cpuInfo: ProductGameserverPartHostNodeCpuInfo;
    cpuCores: ProductGameserverPartHostNodeCpuCores;
};

type ProductGameserverPartHostNodeId = string;
type ProductGameserverPartHostNodeRemoteAddress = string;
type ProductGameserverPartHostNodeName = string;
type ProductGameserverPartHostNodeCpuInfo = string;
type ProductGameserverPartHostNodeCpuCores = number;
type ProductGameserverPartHasRunningTask = boolean;
type ProductGameserverPartAutorestarts = number;
const _gql_ProductGameserverPart = gql`
    fragment ProductGameserverPart on ProductGameserver {
        id
        attributes
        name
        address
        failureAutorestart
        installed
        slot
        memory
        platform
        canEditMemory
        canEditSlot
        customAutoUpdateOnStartFlag
        customParameter
        product {
            id
            expire
            locked
        }
        scripts {
            id
            title
            standaloneBtn
            standaloneBtnColor
        }
        template {
            id
            title
            defaultCustomParameter
            canUpdateOnStart
            logo {
                id
                url
            }
        }
        ports {
            id
            port
        }
        hostNode {
            id
            remoteAddress
            name
            cpuInfo
            cpuCores
        }
        hasRunningTask
        autorestarts
    }
`;

/*,
 * Operations from undefined,
 */

useMutationProductGameserverStart.Document = gql`
    mutation productGameserverStart($gameserverId: ID!, $scriptId: ID) {
        product_gameserver_start(
            gameserverId: $gameserverId
            scriptId: $scriptId
        ) {
            ...ProductGameserverPart
        }
    }
    ${_gql_ProductGameserverPart}
` as DocumentNode;

export function useMutationProductGameserverStart(
    options?: MutationHookOptions<
        ProductGameserverStartData,
        ProductGameserverStartVariables
    >
): MutationHookFn<ProductGameserverStartData, ProductGameserverStartVariables> {
    return useMutation<
        ProductGameserverStartData,
        ProductGameserverStartVariables
    >(useMutationProductGameserverStart.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type ProductGameserverStartVariables = {
    gameserverId: ProductGameserverStartVariablesGameserverId;
    scriptId?: Nullable<ProductGameserverStartVariablesScriptId>;
};

type ProductGameserverStartVariablesGameserverId = string;
type ProductGameserverStartVariablesScriptId = string;

export type ProductGameserverStartData = {
    product_gameserver_start: ProductGameserverStartDataProductGameserverStart;
};

type ProductGameserverStartDataProductGameserverStart = ProductGameserverPart & {
    __typename?: 'ProductGameserver';
};

useMutationProductGameserverSetAutorestarts.Document = gql`
    mutation productGameserverSetAutorestarts($id: ID!, $restarts: [Int!]!) {
        productGameserverSetAutorestarts(id: $id, restarts: $restarts) {
            ...ProductGameserverPart
        }
    }
    ${_gql_ProductGameserverPart}
` as DocumentNode;

export function useMutationProductGameserverSetAutorestarts(
    options?: MutationHookOptions<
        ProductGameserverSetAutorestartsData,
        ProductGameserverSetAutorestartsVariables
    >
): MutationHookFn<
    ProductGameserverSetAutorestartsData,
    ProductGameserverSetAutorestartsVariables
> {
    return useMutation<
        ProductGameserverSetAutorestartsData,
        ProductGameserverSetAutorestartsVariables
    >(useMutationProductGameserverSetAutorestarts.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type ProductGameserverSetAutorestartsVariables = {
    id: ProductGameserverSetAutorestartsVariablesId;
    restarts: ReadonlyArray<ProductGameserverSetAutorestartsVariablesRestarts>;
};

type ProductGameserverSetAutorestartsVariablesId = string;
type ProductGameserverSetAutorestartsVariablesRestarts = number;

export type ProductGameserverSetAutorestartsData = {
    productGameserverSetAutorestarts: ProductGameserverSetAutorestartsDataProductGameserverSetAutorestarts;
};

type ProductGameserverSetAutorestartsDataProductGameserverSetAutorestarts = ProductGameserverPart & {
    __typename?: 'ProductGameserver';
};

useMutationProductGameserverFailureAutorestart.Document = gql`
    mutation productGameserverFailureAutorestart($id: ID!, $restart: Boolean!) {
        productGameserverFailureAutorestart(id: $id, restart: $restart) {
            ...ProductGameserverPart
        }
    }
    ${_gql_ProductGameserverPart}
` as DocumentNode;

export function useMutationProductGameserverFailureAutorestart(
    options?: MutationHookOptions<
        ProductGameserverFailureAutorestartData,
        ProductGameserverFailureAutorestartVariables
    >
): MutationHookFn<
    ProductGameserverFailureAutorestartData,
    ProductGameserverFailureAutorestartVariables
> {
    return useMutation<
        ProductGameserverFailureAutorestartData,
        ProductGameserverFailureAutorestartVariables
    >(useMutationProductGameserverFailureAutorestart.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type ProductGameserverFailureAutorestartVariables = {
    id: ProductGameserverFailureAutorestartVariablesId;
    restart: ProductGameserverFailureAutorestartVariablesRestart;
};

type ProductGameserverFailureAutorestartVariablesId = string;
type ProductGameserverFailureAutorestartVariablesRestart = boolean;

export type ProductGameserverFailureAutorestartData = {
    productGameserverFailureAutorestart: ProductGameserverFailureAutorestartDataProductGameserverFailureAutorestart;
};

type ProductGameserverFailureAutorestartDataProductGameserverFailureAutorestart = ProductGameserverPart & {
    __typename?: 'ProductGameserver';
};

useQueryProductGameserverRunning.Document = gql`
    query productGameserverRunning($gameserverId: ID!) {
        product_gameserver_running(gameserverId: $gameserverId)
    }
` as DocumentNode;

export function useQueryProductGameserverRunning(
    options?: QueryHookOptions<
        ProductGameserverRunningData,
        ProductGameserverRunningVariables
    >
) {
    const result = useQuery<
        ProductGameserverRunningData,
        ProductGameserverRunningVariables
    >(useQueryProductGameserverRunning.Document, {
        ...queryDefaultOptions,
        ...options,
    });
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryProductGameserverRunning.lazy = function (
    options?: LazyQueryHookOptions<
        ProductGameserverRunningData,
        ProductGameserverRunningVariables
    >
) {
    return useLazyQuery(useQueryProductGameserverRunning.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type ProductGameserverRunningVariables = {
    gameserverId: ProductGameserverRunningVariablesGameserverId;
};

type ProductGameserverRunningVariablesGameserverId = string;

export type ProductGameserverRunningData = {
    product_gameserver_running: ProductGameserverRunningDataProductGameserverRunning;
};

type ProductGameserverRunningDataProductGameserverRunning = boolean;

useQueryProductGameserverLog.Document = gql`
    query productGameserverLog($gameserverId: ID!) {
        product_gameserver_log(gameserverId: $gameserverId)
    }
` as DocumentNode;

export function useQueryProductGameserverLog(
    options?: QueryHookOptions<
        ProductGameserverLogData,
        ProductGameserverLogVariables
    >
) {
    const result = useQuery<
        ProductGameserverLogData,
        ProductGameserverLogVariables
    >(useQueryProductGameserverLog.Document, {
        ...queryDefaultOptions,
        ...options,
    });
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryProductGameserverLog.lazy = function (
    options?: LazyQueryHookOptions<
        ProductGameserverLogData,
        ProductGameserverLogVariables
    >
) {
    return useLazyQuery(useQueryProductGameserverLog.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type ProductGameserverLogVariables = {
    gameserverId: ProductGameserverLogVariablesGameserverId;
};

type ProductGameserverLogVariablesGameserverId = string;

export type ProductGameserverLogData = {
    product_gameserver_log: ProductGameserverLogDataProductGameserverLog;
};

type ProductGameserverLogDataProductGameserverLog = string;

useMutationProductGameserverStop.Document = gql`
    mutation productGameserverStop($gameserverId: ID!) {
        product_gameserver_stop(gameserverId: $gameserverId) {
            ...ProductGameserverPart
        }
    }
    ${_gql_ProductGameserverPart}
` as DocumentNode;

export function useMutationProductGameserverStop(
    options?: MutationHookOptions<
        ProductGameserverStopData,
        ProductGameserverStopVariables
    >
): MutationHookFn<ProductGameserverStopData, ProductGameserverStopVariables> {
    return useMutation<
        ProductGameserverStopData,
        ProductGameserverStopVariables
    >(useMutationProductGameserverStop.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type ProductGameserverStopVariables = {
    gameserverId: ProductGameserverStopVariablesGameserverId;
};

type ProductGameserverStopVariablesGameserverId = string;

export type ProductGameserverStopData = {
    product_gameserver_stop: ProductGameserverStopDataProductGameserverStop;
};

type ProductGameserverStopDataProductGameserverStop = ProductGameserverPart & {
    __typename?: 'ProductGameserver';
};

useMutationProductGameserverConsole.Document = gql`
    mutation productGameserverConsole($gameserverId: ID!, $command: String!) {
        product_gameserver_console(
            gameserverId: $gameserverId
            command: $command
        )
    }
` as DocumentNode;

export function useMutationProductGameserverConsole(
    options?: MutationHookOptions<
        ProductGameserverConsoleData,
        ProductGameserverConsoleVariables
    >
): MutationHookFn<
    ProductGameserverConsoleData,
    ProductGameserverConsoleVariables
> {
    return useMutation<
        ProductGameserverConsoleData,
        ProductGameserverConsoleVariables
    >(useMutationProductGameserverConsole.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type ProductGameserverConsoleVariables = {
    gameserverId: ProductGameserverConsoleVariablesGameserverId;
    command: ProductGameserverConsoleVariablesCommand;
};

type ProductGameserverConsoleVariablesGameserverId = string;
type ProductGameserverConsoleVariablesCommand = string;

export type ProductGameserverConsoleData = {
    product_gameserver_console: ProductGameserverConsoleDataProductGameserverConsole;
};

type ProductGameserverConsoleDataProductGameserverConsole = boolean;

useQueryProductGameserverExist.Document = gql`
    query productGameserverExist($gameserverId: ID!) {
        product_gameserver_exist(gameserverId: $gameserverId)
    }
` as DocumentNode;

export function useQueryProductGameserverExist(
    options?: QueryHookOptions<
        ProductGameserverExistData,
        ProductGameserverExistVariables
    >
) {
    const result = useQuery<
        ProductGameserverExistData,
        ProductGameserverExistVariables
    >(useQueryProductGameserverExist.Document, {
        ...queryDefaultOptions,
        ...options,
    });
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryProductGameserverExist.lazy = function (
    options?: LazyQueryHookOptions<
        ProductGameserverExistData,
        ProductGameserverExistVariables
    >
) {
    return useLazyQuery(useQueryProductGameserverExist.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type ProductGameserverExistVariables = {
    gameserverId: ProductGameserverExistVariablesGameserverId;
};

type ProductGameserverExistVariablesGameserverId = string;

export type ProductGameserverExistData = {
    product_gameserver_exist: ProductGameserverExistDataProductGameserverExist;
};

type ProductGameserverExistDataProductGameserverExist = boolean;

useMutationProductGameserverChangeFtpPassword.Document = gql`
    mutation productGameserverChangeFtpPassword(
        $gameserverId: ID!
        $password: String!
    ) {
        product_gameserver_change_password(
            gameserverId: $gameserverId
            password: $password
        ) {
            ...ProductGameserverPart
        }
    }
    ${_gql_ProductGameserverPart}
` as DocumentNode;

export function useMutationProductGameserverChangeFtpPassword(
    options?: MutationHookOptions<
        ProductGameserverChangeFtpPasswordData,
        ProductGameserverChangeFtpPasswordVariables
    >
): MutationHookFn<
    ProductGameserverChangeFtpPasswordData,
    ProductGameserverChangeFtpPasswordVariables
> {
    return useMutation<
        ProductGameserverChangeFtpPasswordData,
        ProductGameserverChangeFtpPasswordVariables
    >(useMutationProductGameserverChangeFtpPassword.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type ProductGameserverChangeFtpPasswordVariables = {
    gameserverId: ProductGameserverChangeFtpPasswordVariablesGameserverId;
    password: ProductGameserverChangeFtpPasswordVariablesPassword;
};

type ProductGameserverChangeFtpPasswordVariablesGameserverId = string;
type ProductGameserverChangeFtpPasswordVariablesPassword = string;

export type ProductGameserverChangeFtpPasswordData = {
    product_gameserver_change_password: ProductGameserverChangeFtpPasswordDataProductGameserverChangePassword;
};

type ProductGameserverChangeFtpPasswordDataProductGameserverChangePassword = ProductGameserverPart & {
    __typename?: 'ProductGameserver';
};

useQueryProductGameserver.Document = gql`
    query productGameserver($id: ID!) {
        productGameserverById(id: $id) {
            ...ProductGameserverPart
            availableGameserverTemplates {
                id
                title
                logo {
                    id
                    url
                }
            }
        }
    }
    ${_gql_ProductGameserverPart}
` as DocumentNode;

export function useQueryProductGameserver(
    options?: QueryHookOptions<
        ProductGameserverData,
        ProductGameserverVariables
    >
) {
    const result = useQuery<ProductGameserverData, ProductGameserverVariables>(
        useQueryProductGameserver.Document,
        { ...queryDefaultOptions, ...options }
    );
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryProductGameserver.lazy = function (
    options?: LazyQueryHookOptions<
        ProductGameserverData,
        ProductGameserverVariables
    >
) {
    return useLazyQuery(useQueryProductGameserver.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type ProductGameserverVariables = {
    id: ProductGameserverVariablesId;
};

type ProductGameserverVariablesId = string;

export type ProductGameserverData = {
    productGameserverById: ProductGameserverDataProductGameserverById;
};

type ProductGameserverDataProductGameserverById = ProductGameserverPart & {
    __typename?: 'ProductGameserver';
    availableGameserverTemplates: Array<ProductGameserverDataProductGameserverByIdAvailableGameserverTemplates>;
};

type ProductGameserverDataProductGameserverByIdAvailableGameserverTemplates = {
    __typename?: 'ProductGameserverTemplate';
    id: ProductGameserverDataProductGameserverByIdAvailableGameserverTemplatesId;
    title: ProductGameserverDataProductGameserverByIdAvailableGameserverTemplatesTitle;
    logo?: Nullable<ProductGameserverDataProductGameserverByIdAvailableGameserverTemplatesLogo>;
};

type ProductGameserverDataProductGameserverByIdAvailableGameserverTemplatesId = string;
type ProductGameserverDataProductGameserverByIdAvailableGameserverTemplatesTitle = string;
type ProductGameserverDataProductGameserverByIdAvailableGameserverTemplatesLogo = {
    __typename?: 'File';
    id: ProductGameserverDataProductGameserverByIdAvailableGameserverTemplatesLogoId;
    url: ProductGameserverDataProductGameserverByIdAvailableGameserverTemplatesLogoUrl;
};

type ProductGameserverDataProductGameserverByIdAvailableGameserverTemplatesLogoId = string;
type ProductGameserverDataProductGameserverByIdAvailableGameserverTemplatesLogoUrl = string;

useQueryProductGameserverUsage.Document = gql`
    query productGameserverUsage($gameserverId: ID!) {
        productGameserverUsage(gameserverId: $gameserverId) {
            usagePoints {
                globalUsage
                perCore
                date
                memoryUsageInMb
            }
            diskPoints {
                date
                usageInMb
            }
        }
    }
` as DocumentNode;

export function useQueryProductGameserverUsage(
    options?: QueryHookOptions<
        ProductGameserverUsageData,
        ProductGameserverUsageVariables
    >
) {
    const result = useQuery<
        ProductGameserverUsageData,
        ProductGameserverUsageVariables
    >(useQueryProductGameserverUsage.Document, {
        ...queryDefaultOptions,
        ...options,
    });
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryProductGameserverUsage.lazy = function (
    options?: LazyQueryHookOptions<
        ProductGameserverUsageData,
        ProductGameserverUsageVariables
    >
) {
    return useLazyQuery(useQueryProductGameserverUsage.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type ProductGameserverUsageVariables = {
    gameserverId: ProductGameserverUsageVariablesGameserverId;
};

type ProductGameserverUsageVariablesGameserverId = string;

export type ProductGameserverUsageData = {
    productGameserverUsage: ProductGameserverUsageDataProductGameserverUsage;
};

type ProductGameserverUsageDataProductGameserverUsage = {
    __typename?: 'ProductGameserverUsageDto';
    usagePoints: Array<ProductGameserverUsageDataProductGameserverUsageUsagePoints>;
    diskPoints: Array<ProductGameserverUsageDataProductGameserverUsageDiskPoints>;
};

type ProductGameserverUsageDataProductGameserverUsageUsagePoints = {
    __typename?: 'ProductGameserverUsageDtoEntry';
    globalUsage: ProductGameserverUsageDataProductGameserverUsageUsagePointsGlobalUsage;
    perCore: ProductGameserverUsageDataProductGameserverUsageUsagePointsPerCore;
    date: ProductGameserverUsageDataProductGameserverUsageUsagePointsDate;
    memoryUsageInMb: ProductGameserverUsageDataProductGameserverUsageUsagePointsMemoryUsageInMb;
};

type ProductGameserverUsageDataProductGameserverUsageUsagePointsGlobalUsage = number;
type ProductGameserverUsageDataProductGameserverUsageUsagePointsPerCore = number;
type ProductGameserverUsageDataProductGameserverUsageUsagePointsDate = any;
type ProductGameserverUsageDataProductGameserverUsageUsagePointsMemoryUsageInMb = number;
type ProductGameserverUsageDataProductGameserverUsageDiskPoints = {
    __typename?: 'ProductGameserverUsageDtoDiskEntry';
    date: ProductGameserverUsageDataProductGameserverUsageDiskPointsDate;
    usageInMb: ProductGameserverUsageDataProductGameserverUsageDiskPointsUsageInMb;
};

type ProductGameserverUsageDataProductGameserverUsageDiskPointsDate = any;
type ProductGameserverUsageDataProductGameserverUsageDiskPointsUsageInMb = number;

useQueryProductGameserverAddons.Document = gql`
    query productGameserverAddons($gameserverId: ID!) {
        product_gameservers_scripts(gameserverId: $gameserverId) {
            id
            title
            standaloneBtn
            isDefault
        }
    }
` as DocumentNode;

export function useQueryProductGameserverAddons(
    options?: QueryHookOptions<
        ProductGameserverAddonsData,
        ProductGameserverAddonsVariables
    >
) {
    const result = useQuery<
        ProductGameserverAddonsData,
        ProductGameserverAddonsVariables
    >(useQueryProductGameserverAddons.Document, {
        ...queryDefaultOptions,
        ...options,
    });
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryProductGameserverAddons.lazy = function (
    options?: LazyQueryHookOptions<
        ProductGameserverAddonsData,
        ProductGameserverAddonsVariables
    >
) {
    return useLazyQuery(useQueryProductGameserverAddons.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type ProductGameserverAddonsVariables = {
    gameserverId: ProductGameserverAddonsVariablesGameserverId;
};

type ProductGameserverAddonsVariablesGameserverId = string;

export type ProductGameserverAddonsData = {
    product_gameservers_scripts: Array<ProductGameserverAddonsDataProductGameserversScripts>;
};

type ProductGameserverAddonsDataProductGameserversScripts = {
    __typename?: 'ProductGameserverScript';
    id: ProductGameserverAddonsDataProductGameserversScriptsId;
    title: ProductGameserverAddonsDataProductGameserversScriptsTitle;
    standaloneBtn: ProductGameserverAddonsDataProductGameserversScriptsStandaloneBtn;
    isDefault: ProductGameserverAddonsDataProductGameserversScriptsIsDefault;
};

type ProductGameserverAddonsDataProductGameserversScriptsId = string;
type ProductGameserverAddonsDataProductGameserversScriptsTitle = string;
type ProductGameserverAddonsDataProductGameserversScriptsStandaloneBtn = boolean;
type ProductGameserverAddonsDataProductGameserversScriptsIsDefault = boolean;

useMutationProductGameserverSetCustomAttribute.Document = gql`
    mutation productGameserverSetCustomAttribute(
        $id: ID!
        $key: String!
        $value: String!
    ) {
        productGameserverSetCustomAttribute(id: $id, key: $key, value: $value) {
            ...ProductGameserverPart
        }
    }
    ${_gql_ProductGameserverPart}
` as DocumentNode;

export function useMutationProductGameserverSetCustomAttribute(
    options?: MutationHookOptions<
        ProductGameserverSetCustomAttributeData,
        ProductGameserverSetCustomAttributeVariables
    >
): MutationHookFn<
    ProductGameserverSetCustomAttributeData,
    ProductGameserverSetCustomAttributeVariables
> {
    return useMutation<
        ProductGameserverSetCustomAttributeData,
        ProductGameserverSetCustomAttributeVariables
    >(useMutationProductGameserverSetCustomAttribute.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type ProductGameserverSetCustomAttributeVariables = {
    id: ProductGameserverSetCustomAttributeVariablesId;
    key: ProductGameserverSetCustomAttributeVariablesKey;
    value: ProductGameserverSetCustomAttributeVariablesValue;
};

type ProductGameserverSetCustomAttributeVariablesId = string;
type ProductGameserverSetCustomAttributeVariablesKey = string;
type ProductGameserverSetCustomAttributeVariablesValue = string;

export type ProductGameserverSetCustomAttributeData = {
    productGameserverSetCustomAttribute: ProductGameserverSetCustomAttributeDataProductGameserverSetCustomAttribute;
};

type ProductGameserverSetCustomAttributeDataProductGameserverSetCustomAttribute = ProductGameserverPart & {
    __typename?: 'ProductGameserver';
};

useMutationProductGameserverChangeLabel.Document = gql`
    mutation productGameserverChangeLabel($id: ID!, $label: String!) {
        product_gameserver_change_label(id: $id, label: $label) {
            ...ProductGameserverPart
        }
    }
    ${_gql_ProductGameserverPart}
` as DocumentNode;

export function useMutationProductGameserverChangeLabel(
    options?: MutationHookOptions<
        ProductGameserverChangeLabelData,
        ProductGameserverChangeLabelVariables
    >
): MutationHookFn<
    ProductGameserverChangeLabelData,
    ProductGameserverChangeLabelVariables
> {
    return useMutation<
        ProductGameserverChangeLabelData,
        ProductGameserverChangeLabelVariables
    >(useMutationProductGameserverChangeLabel.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type ProductGameserverChangeLabelVariables = {
    id: ProductGameserverChangeLabelVariablesId;
    label: ProductGameserverChangeLabelVariablesLabel;
};

type ProductGameserverChangeLabelVariablesId = string;
type ProductGameserverChangeLabelVariablesLabel = string;

export type ProductGameserverChangeLabelData = {
    product_gameserver_change_label: ProductGameserverChangeLabelDataProductGameserverChangeLabel;
};

type ProductGameserverChangeLabelDataProductGameserverChangeLabel = ProductGameserverPart & {
    __typename?: 'ProductGameserver';
};

useMutationProductGameserverBackupCreate.Document = gql`
    mutation productGameserverBackupCreate($gameserverId: ID!) {
        productGameserverBackupCreate(gameserverId: $gameserverId) {
            id
        }
    }
` as DocumentNode;

export function useMutationProductGameserverBackupCreate(
    options?: MutationHookOptions<
        ProductGameserverBackupCreateData,
        ProductGameserverBackupCreateVariables
    >
): MutationHookFn<
    ProductGameserverBackupCreateData,
    ProductGameserverBackupCreateVariables
> {
    return useMutation<
        ProductGameserverBackupCreateData,
        ProductGameserverBackupCreateVariables
    >(useMutationProductGameserverBackupCreate.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type ProductGameserverBackupCreateVariables = {
    gameserverId: ProductGameserverBackupCreateVariablesGameserverId;
};

type ProductGameserverBackupCreateVariablesGameserverId = string;

export type ProductGameserverBackupCreateData = {
    productGameserverBackupCreate: ProductGameserverBackupCreateDataProductGameserverBackupCreate;
};

type ProductGameserverBackupCreateDataProductGameserverBackupCreate = {
    __typename?: 'ProductGameserverBackup';
    id: ProductGameserverBackupCreateDataProductGameserverBackupCreateId;
};

type ProductGameserverBackupCreateDataProductGameserverBackupCreateId = string;

useMutationProductGameserverBackupDelete.Document = gql`
    mutation productGameserverBackupDelete($backupId: ID!) {
        productGameserverBackupDelete(backupId: $backupId)
    }
` as DocumentNode;

export function useMutationProductGameserverBackupDelete(
    options?: MutationHookOptions<
        ProductGameserverBackupDeleteData,
        ProductGameserverBackupDeleteVariables
    >
): MutationHookFn<
    ProductGameserverBackupDeleteData,
    ProductGameserverBackupDeleteVariables
> {
    return useMutation<
        ProductGameserverBackupDeleteData,
        ProductGameserverBackupDeleteVariables
    >(useMutationProductGameserverBackupDelete.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type ProductGameserverBackupDeleteVariables = {
    backupId: ProductGameserverBackupDeleteVariablesBackupId;
};

type ProductGameserverBackupDeleteVariablesBackupId = string;

export type ProductGameserverBackupDeleteData = {
    productGameserverBackupDelete: ProductGameserverBackupDeleteDataProductGameserverBackupDelete;
};

type ProductGameserverBackupDeleteDataProductGameserverBackupDelete = boolean;

useMutationProductGameserverBackupRestore.Document = gql`
    mutation productGameserverBackupRestore($backupId: ID!) {
        productGameserverBackupRestore(backupId: $backupId)
    }
` as DocumentNode;

export function useMutationProductGameserverBackupRestore(
    options?: MutationHookOptions<
        ProductGameserverBackupRestoreData,
        ProductGameserverBackupRestoreVariables
    >
): MutationHookFn<
    ProductGameserverBackupRestoreData,
    ProductGameserverBackupRestoreVariables
> {
    return useMutation<
        ProductGameserverBackupRestoreData,
        ProductGameserverBackupRestoreVariables
    >(useMutationProductGameserverBackupRestore.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type ProductGameserverBackupRestoreVariables = {
    backupId: ProductGameserverBackupRestoreVariablesBackupId;
};

type ProductGameserverBackupRestoreVariablesBackupId = string;

export type ProductGameserverBackupRestoreData = {
    productGameserverBackupRestore: ProductGameserverBackupRestoreDataProductGameserverBackupRestore;
};

type ProductGameserverBackupRestoreDataProductGameserverBackupRestore = boolean;

useMutationProductGameserverDelete.Document = gql`
    mutation productGameserverDelete($id: ID!) {
        productGameserverDelete(id: $id)
    }
` as DocumentNode;

export function useMutationProductGameserverDelete(
    options?: MutationHookOptions<
        ProductGameserverDeleteData,
        ProductGameserverDeleteVariables
    >
): MutationHookFn<
    ProductGameserverDeleteData,
    ProductGameserverDeleteVariables
> {
    return useMutation<
        ProductGameserverDeleteData,
        ProductGameserverDeleteVariables
    >(useMutationProductGameserverDelete.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type ProductGameserverDeleteVariables = {
    id: ProductGameserverDeleteVariablesId;
};

type ProductGameserverDeleteVariablesId = string;

export type ProductGameserverDeleteData = {
    productGameserverDelete: ProductGameserverDeleteDataProductGameserverDelete;
};

type ProductGameserverDeleteDataProductGameserverDelete = boolean;

useMutationProductGameserverInstall.Document = gql`
    mutation productGameserverInstall($id: ID!, $gameserverTemplateId: ID!) {
        productGameserverInstall(
            gameserverId: $id
            gameserverTemplateId: $gameserverTemplateId
        ) {
            ...ProductGameserverPart
        }
    }
    ${_gql_ProductGameserverPart}
` as DocumentNode;

export function useMutationProductGameserverInstall(
    options?: MutationHookOptions<
        ProductGameserverInstallData,
        ProductGameserverInstallVariables
    >
): MutationHookFn<
    ProductGameserverInstallData,
    ProductGameserverInstallVariables
> {
    return useMutation<
        ProductGameserverInstallData,
        ProductGameserverInstallVariables
    >(useMutationProductGameserverInstall.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type ProductGameserverInstallVariables = {
    id: ProductGameserverInstallVariablesId;
    gameserverTemplateId: ProductGameserverInstallVariablesGameserverTemplateId;
};

type ProductGameserverInstallVariablesId = string;
type ProductGameserverInstallVariablesGameserverTemplateId = string;

export type ProductGameserverInstallData = {
    productGameserverInstall: ProductGameserverInstallDataProductGameserverInstall;
};

type ProductGameserverInstallDataProductGameserverInstall = ProductGameserverPart & {
    __typename?: 'ProductGameserver';
};

useQueryProductGameserverBackups.Document = gql`
    query productGameserverBackups($id: ID!) {
        productGameserverById(id: $id) {
            id
            backups {
                id
                create
                sizeInMb
                restorable
            }
        }
    }
` as DocumentNode;

export function useQueryProductGameserverBackups(
    options?: QueryHookOptions<
        ProductGameserverBackupsData,
        ProductGameserverBackupsVariables
    >
) {
    const result = useQuery<
        ProductGameserverBackupsData,
        ProductGameserverBackupsVariables
    >(useQueryProductGameserverBackups.Document, {
        ...queryDefaultOptions,
        ...options,
    });
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryProductGameserverBackups.lazy = function (
    options?: LazyQueryHookOptions<
        ProductGameserverBackupsData,
        ProductGameserverBackupsVariables
    >
) {
    return useLazyQuery(useQueryProductGameserverBackups.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type ProductGameserverBackupsVariables = {
    id: ProductGameserverBackupsVariablesId;
};

type ProductGameserverBackupsVariablesId = string;

export type ProductGameserverBackupsData = {
    productGameserverById: ProductGameserverBackupsDataProductGameserverById;
};

type ProductGameserverBackupsDataProductGameserverById = {
    __typename?: 'ProductGameserver';
    id: ProductGameserverBackupsDataProductGameserverByIdId;
    backups: Array<ProductGameserverBackupsDataProductGameserverByIdBackups>;
};

type ProductGameserverBackupsDataProductGameserverByIdId = string;
type ProductGameserverBackupsDataProductGameserverByIdBackups = {
    __typename?: 'ProductGameserverBackup';
    id: ProductGameserverBackupsDataProductGameserverByIdBackupsId;
    create: ProductGameserverBackupsDataProductGameserverByIdBackupsCreate;
    sizeInMb?: Nullable<ProductGameserverBackupsDataProductGameserverByIdBackupsSizeInMb>;
    restorable: ProductGameserverBackupsDataProductGameserverByIdBackupsRestorable;
};

type ProductGameserverBackupsDataProductGameserverByIdBackupsId = string;
type ProductGameserverBackupsDataProductGameserverByIdBackupsCreate = any;
type ProductGameserverBackupsDataProductGameserverByIdBackupsSizeInMb = number;
type ProductGameserverBackupsDataProductGameserverByIdBackupsRestorable = boolean;

useMutationProductGameserverBackupDownload.Document = gql`
    mutation productGameserverBackupDownload($id: ID!) {
        productGameserverBackupDownload(id: $id)
    }
` as DocumentNode;

export function useMutationProductGameserverBackupDownload(
    options?: MutationHookOptions<
        ProductGameserverBackupDownloadData,
        ProductGameserverBackupDownloadVariables
    >
): MutationHookFn<
    ProductGameserverBackupDownloadData,
    ProductGameserverBackupDownloadVariables
> {
    return useMutation<
        ProductGameserverBackupDownloadData,
        ProductGameserverBackupDownloadVariables
    >(useMutationProductGameserverBackupDownload.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type ProductGameserverBackupDownloadVariables = {
    id: ProductGameserverBackupDownloadVariablesId;
};

type ProductGameserverBackupDownloadVariablesId = string;

export type ProductGameserverBackupDownloadData = {
    productGameserverBackupDownload: ProductGameserverBackupDownloadDataProductGameserverBackupDownload;
};

type ProductGameserverBackupDownloadDataProductGameserverBackupDownload = string;

useQueryProductGameservers.Document = gql`
    query productGameservers($filter: CordFilter) {
        productGameservers(filter: $filter) {
            edges {
                id
                template {
                    id
                    title
                }
                product {
                    id
                    user {
                        id
                    }
                }
                hostNode {
                    id
                    remoteAddress
                    name
                }
                name
            }
            pageInfo {
                totalCount
            }
        }
    }
` as DocumentNode;

export function useQueryProductGameservers(
    options?: QueryHookOptions<
        ProductGameserversData,
        ProductGameserversVariables
    >
) {
    const result = useQuery<
        ProductGameserversData,
        ProductGameserversVariables
    >(useQueryProductGameservers.Document, {
        ...queryDefaultOptions,
        ...options,
    });
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryProductGameservers.lazy = function (
    options?: LazyQueryHookOptions<
        ProductGameserversData,
        ProductGameserversVariables
    >
) {
    return useLazyQuery(useQueryProductGameservers.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type ProductGameserversVariables = {
    filter?: Nullable<ProductGameserversVariablesFilter>;
};

type ProductGameserversVariablesFilter = CordFilter;

export type ProductGameserversData = {
    productGameservers: ProductGameserversDataProductGameservers;
};

type ProductGameserversDataProductGameservers = {
    __typename?: 'ProductGameserverResultMany';
    edges: Array<ProductGameserversDataProductGameserversEdges>;
    pageInfo: ProductGameserversDataProductGameserversPageInfo;
};

type ProductGameserversDataProductGameserversEdges = {
    __typename?: 'ProductGameserver';
    id: ProductGameserversDataProductGameserversEdgesId;
    template?: Nullable<ProductGameserversDataProductGameserversEdgesTemplate>;
    product?: Nullable<ProductGameserversDataProductGameserversEdgesProduct>;
    hostNode: ProductGameserversDataProductGameserversEdgesHostNode;
    name: ProductGameserversDataProductGameserversEdgesName;
};

type ProductGameserversDataProductGameserversEdgesId = string;
type ProductGameserversDataProductGameserversEdgesTemplate = {
    __typename?: 'ProductGameserverTemplate';
    id: ProductGameserversDataProductGameserversEdgesTemplateId;
    title: ProductGameserversDataProductGameserversEdgesTemplateTitle;
};

type ProductGameserversDataProductGameserversEdgesTemplateId = string;
type ProductGameserversDataProductGameserversEdgesTemplateTitle = string;
type ProductGameserversDataProductGameserversEdgesProduct = {
    __typename?: 'Product';
    id: ProductGameserversDataProductGameserversEdgesProductId;
    user: ProductGameserversDataProductGameserversEdgesProductUser;
};

type ProductGameserversDataProductGameserversEdgesProductId = string;
type ProductGameserversDataProductGameserversEdgesProductUser = {
    __typename?: 'User';
    id: ProductGameserversDataProductGameserversEdgesProductUserId;
};

type ProductGameserversDataProductGameserversEdgesProductUserId = string;
type ProductGameserversDataProductGameserversEdgesHostNode = {
    __typename?: 'HostNode';
    id: ProductGameserversDataProductGameserversEdgesHostNodeId;
    remoteAddress: ProductGameserversDataProductGameserversEdgesHostNodeRemoteAddress;
    name: ProductGameserversDataProductGameserversEdgesHostNodeName;
};

type ProductGameserversDataProductGameserversEdgesHostNodeId = string;
type ProductGameserversDataProductGameserversEdgesHostNodeRemoteAddress = string;
type ProductGameserversDataProductGameserversEdgesHostNodeName = string;
type ProductGameserversDataProductGameserversEdgesName = string;
type ProductGameserversDataProductGameserversPageInfo = {
    __typename?: 'CordPageInfo';
    totalCount: ProductGameserversDataProductGameserversPageInfoTotalCount;
};

type ProductGameserversDataProductGameserversPageInfoTotalCount = number;

useQueryMyProductGameservers.Document = gql`
    query myProductGameservers {
        productGameserversMy {
            id
            name
            amIOwner
            product {
                id
                expire
            }
            template {
                id
                logo {
                    id
                    url
                }
            }
        }
    }
` as DocumentNode;

export function useQueryMyProductGameservers(
    options?: QueryHookOptions<
        MyProductGameserversData,
        MyProductGameserversVariables
    >
) {
    const result = useQuery<
        MyProductGameserversData,
        MyProductGameserversVariables
    >(useQueryMyProductGameservers.Document, {
        ...queryDefaultOptions,
        ...options,
    });
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryMyProductGameservers.lazy = function (
    options?: LazyQueryHookOptions<
        MyProductGameserversData,
        MyProductGameserversVariables
    >
) {
    return useLazyQuery(useQueryMyProductGameservers.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type MyProductGameserversVariables = {};

export type MyProductGameserversData = {
    productGameserversMy: Array<MyProductGameserversDataProductGameserversMy>;
};

type MyProductGameserversDataProductGameserversMy = {
    __typename?: 'ProductGameserver';
    id: MyProductGameserversDataProductGameserversMyId;
    name: MyProductGameserversDataProductGameserversMyName;
    amIOwner: MyProductGameserversDataProductGameserversMyAmIOwner;
    product?: Nullable<MyProductGameserversDataProductGameserversMyProduct>;
    template?: Nullable<MyProductGameserversDataProductGameserversMyTemplate>;
};

type MyProductGameserversDataProductGameserversMyId = string;
type MyProductGameserversDataProductGameserversMyName = string;
type MyProductGameserversDataProductGameserversMyAmIOwner = boolean;
type MyProductGameserversDataProductGameserversMyProduct = {
    __typename?: 'Product';
    id: MyProductGameserversDataProductGameserversMyProductId;
    expire?: Nullable<MyProductGameserversDataProductGameserversMyProductExpire>;
};

type MyProductGameserversDataProductGameserversMyProductId = string;
type MyProductGameserversDataProductGameserversMyProductExpire = any;
type MyProductGameserversDataProductGameserversMyTemplate = {
    __typename?: 'ProductGameserverTemplate';
    id: MyProductGameserversDataProductGameserversMyTemplateId;
    logo?: Nullable<MyProductGameserversDataProductGameserversMyTemplateLogo>;
};

type MyProductGameserversDataProductGameserversMyTemplateId = string;
type MyProductGameserversDataProductGameserversMyTemplateLogo = {
    __typename?: 'File';
    id: MyProductGameserversDataProductGameserversMyTemplateLogoId;
    url: MyProductGameserversDataProductGameserversMyTemplateLogoUrl;
};

type MyProductGameserversDataProductGameserversMyTemplateLogoId = string;
type MyProductGameserversDataProductGameserversMyTemplateLogoUrl = string;

useQueryMyProductGameserverAccesses.Document = gql`
    query myProductGameserverAccesses {
        myProductGameserverAccesses {
            id
            gameserver {
                id
                name
                template {
                    id
                    logo {
                        id
                        url
                    }
                }
            }
        }
    }
` as DocumentNode;

export function useQueryMyProductGameserverAccesses(
    options?: QueryHookOptions<
        MyProductGameserverAccessesData,
        MyProductGameserverAccessesVariables
    >
) {
    const result = useQuery<
        MyProductGameserverAccessesData,
        MyProductGameserverAccessesVariables
    >(useQueryMyProductGameserverAccesses.Document, {
        ...queryDefaultOptions,
        ...options,
    });
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryMyProductGameserverAccesses.lazy = function (
    options?: LazyQueryHookOptions<
        MyProductGameserverAccessesData,
        MyProductGameserverAccessesVariables
    >
) {
    return useLazyQuery(useQueryMyProductGameserverAccesses.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type MyProductGameserverAccessesVariables = {};

export type MyProductGameserverAccessesData = {
    myProductGameserverAccesses: Array<MyProductGameserverAccessesDataMyProductGameserverAccesses>;
};

type MyProductGameserverAccessesDataMyProductGameserverAccesses = {
    __typename?: 'ProductGameserverAccess';
    id: MyProductGameserverAccessesDataMyProductGameserverAccessesId;
    gameserver: MyProductGameserverAccessesDataMyProductGameserverAccessesGameserver;
};

type MyProductGameserverAccessesDataMyProductGameserverAccessesId = string;
type MyProductGameserverAccessesDataMyProductGameserverAccessesGameserver = {
    __typename?: 'ProductGameserver';
    id: MyProductGameserverAccessesDataMyProductGameserverAccessesGameserverId;
    name: MyProductGameserverAccessesDataMyProductGameserverAccessesGameserverName;
    template?: Nullable<MyProductGameserverAccessesDataMyProductGameserverAccessesGameserverTemplate>;
};

type MyProductGameserverAccessesDataMyProductGameserverAccessesGameserverId = string;
type MyProductGameserverAccessesDataMyProductGameserverAccessesGameserverName = string;
type MyProductGameserverAccessesDataMyProductGameserverAccessesGameserverTemplate = {
    __typename?: 'ProductGameserverTemplate';
    id: MyProductGameserverAccessesDataMyProductGameserverAccessesGameserverTemplateId;
    logo?: Nullable<MyProductGameserverAccessesDataMyProductGameserverAccessesGameserverTemplateLogo>;
};

type MyProductGameserverAccessesDataMyProductGameserverAccessesGameserverTemplateId = string;
type MyProductGameserverAccessesDataMyProductGameserverAccessesGameserverTemplateLogo = {
    __typename?: 'File';
    id: MyProductGameserverAccessesDataMyProductGameserverAccessesGameserverTemplateLogoId;
    url: MyProductGameserverAccessesDataMyProductGameserverAccessesGameserverTemplateLogoUrl;
};

type MyProductGameserverAccessesDataMyProductGameserverAccessesGameserverTemplateLogoId = string;
type MyProductGameserverAccessesDataMyProductGameserverAccessesGameserverTemplateLogoUrl = string;

/*,
 * Fragments from undefined,
 */

/*,
 * Operations from undefined,
 */

useQueryProductGameserverAccessesByGameserverId.Document = gql`
    query productGameserverAccessesByGameserverId($gameserverId: ID!) {
        productGameserverAccessesByGameserverId(gameserverId: $gameserverId) {
            accept
            id
            userEmail
            gameserver {
                name
            }
        }
    }
` as DocumentNode;

export function useQueryProductGameserverAccessesByGameserverId(
    options?: QueryHookOptions<
        ProductGameserverAccessesByGameserverIdData,
        ProductGameserverAccessesByGameserverIdVariables
    >
) {
    const result = useQuery<
        ProductGameserverAccessesByGameserverIdData,
        ProductGameserverAccessesByGameserverIdVariables
    >(useQueryProductGameserverAccessesByGameserverId.Document, {
        ...queryDefaultOptions,
        ...options,
    });
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryProductGameserverAccessesByGameserverId.lazy = function (
    options?: LazyQueryHookOptions<
        ProductGameserverAccessesByGameserverIdData,
        ProductGameserverAccessesByGameserverIdVariables
    >
) {
    return useLazyQuery(
        useQueryProductGameserverAccessesByGameserverId.Document,
        { ...lazyQueryDefaultOptions, ...options }
    );
};

export type ProductGameserverAccessesByGameserverIdVariables = {
    gameserverId: ProductGameserverAccessesByGameserverIdVariablesGameserverId;
};

type ProductGameserverAccessesByGameserverIdVariablesGameserverId = string;

export type ProductGameserverAccessesByGameserverIdData = {
    productGameserverAccessesByGameserverId: Array<ProductGameserverAccessesByGameserverIdDataProductGameserverAccessesByGameserverId>;
};

type ProductGameserverAccessesByGameserverIdDataProductGameserverAccessesByGameserverId = {
    __typename?: 'ProductGameserverAccess';
    accept: ProductGameserverAccessesByGameserverIdDataProductGameserverAccessesByGameserverIdAccept;
    id: ProductGameserverAccessesByGameserverIdDataProductGameserverAccessesByGameserverIdId;
    userEmail: ProductGameserverAccessesByGameserverIdDataProductGameserverAccessesByGameserverIdUserEmail;
    gameserver: ProductGameserverAccessesByGameserverIdDataProductGameserverAccessesByGameserverIdGameserver;
};

type ProductGameserverAccessesByGameserverIdDataProductGameserverAccessesByGameserverIdAccept = boolean;
type ProductGameserverAccessesByGameserverIdDataProductGameserverAccessesByGameserverIdId = string;
type ProductGameserverAccessesByGameserverIdDataProductGameserverAccessesByGameserverIdUserEmail = string;
type ProductGameserverAccessesByGameserverIdDataProductGameserverAccessesByGameserverIdGameserver = {
    __typename?: 'ProductGameserver';
    name: ProductGameserverAccessesByGameserverIdDataProductGameserverAccessesByGameserverIdGameserverName;
};

type ProductGameserverAccessesByGameserverIdDataProductGameserverAccessesByGameserverIdGameserverName = string;

useMutationProductGameserverAccessInvite.Document = gql`
    mutation productGameserverAccessInvite(
        $gameserverId: ID!
        $emailOfInvitedUser: String!
        $captcha: String!
    ) {
        productGameserverAccessInvite(
            gameserverId: $gameserverId
            emailOfInvitedUser: $emailOfInvitedUser
            captcha: $captcha
        ) {
            accept
            id
            userEmail
            gameserver {
                name
            }
        }
    }
` as DocumentNode;

export function useMutationProductGameserverAccessInvite(
    options?: MutationHookOptions<
        ProductGameserverAccessInviteData,
        ProductGameserverAccessInviteVariables
    >
): MutationHookFn<
    ProductGameserverAccessInviteData,
    ProductGameserverAccessInviteVariables
> {
    return useMutation<
        ProductGameserverAccessInviteData,
        ProductGameserverAccessInviteVariables
    >(useMutationProductGameserverAccessInvite.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type ProductGameserverAccessInviteVariables = {
    gameserverId: ProductGameserverAccessInviteVariablesGameserverId;
    emailOfInvitedUser: ProductGameserverAccessInviteVariablesEmailOfInvitedUser;
    captcha: ProductGameserverAccessInviteVariablesCaptcha;
};

type ProductGameserverAccessInviteVariablesGameserverId = string;
type ProductGameserverAccessInviteVariablesEmailOfInvitedUser = string;
type ProductGameserverAccessInviteVariablesCaptcha = string;

export type ProductGameserverAccessInviteData = {
    productGameserverAccessInvite: ProductGameserverAccessInviteDataProductGameserverAccessInvite;
};

type ProductGameserverAccessInviteDataProductGameserverAccessInvite = {
    __typename?: 'ProductGameserverAccess';
    accept: ProductGameserverAccessInviteDataProductGameserverAccessInviteAccept;
    id: ProductGameserverAccessInviteDataProductGameserverAccessInviteId;
    userEmail: ProductGameserverAccessInviteDataProductGameserverAccessInviteUserEmail;
    gameserver: ProductGameserverAccessInviteDataProductGameserverAccessInviteGameserver;
};

type ProductGameserverAccessInviteDataProductGameserverAccessInviteAccept = boolean;
type ProductGameserverAccessInviteDataProductGameserverAccessInviteId = string;
type ProductGameserverAccessInviteDataProductGameserverAccessInviteUserEmail = string;
type ProductGameserverAccessInviteDataProductGameserverAccessInviteGameserver = {
    __typename?: 'ProductGameserver';
    name: ProductGameserverAccessInviteDataProductGameserverAccessInviteGameserverName;
};

type ProductGameserverAccessInviteDataProductGameserverAccessInviteGameserverName = string;

useMutationProductGameserverAccessRevoke.Document = gql`
    mutation productGameserverAccessRevoke($id: ID!) {
        productGameserverAccessRevoke(id: $id)
    }
` as DocumentNode;

export function useMutationProductGameserverAccessRevoke(
    options?: MutationHookOptions<
        ProductGameserverAccessRevokeData,
        ProductGameserverAccessRevokeVariables
    >
): MutationHookFn<
    ProductGameserverAccessRevokeData,
    ProductGameserverAccessRevokeVariables
> {
    return useMutation<
        ProductGameserverAccessRevokeData,
        ProductGameserverAccessRevokeVariables
    >(useMutationProductGameserverAccessRevoke.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type ProductGameserverAccessRevokeVariables = {
    id: ProductGameserverAccessRevokeVariablesId;
};

type ProductGameserverAccessRevokeVariablesId = string;

export type ProductGameserverAccessRevokeData = {
    productGameserverAccessRevoke: ProductGameserverAccessRevokeDataProductGameserverAccessRevoke;
};

type ProductGameserverAccessRevokeDataProductGameserverAccessRevoke = boolean;

/*,
 * Fragments from undefined,
 */

/*,
 * Operations from undefined,
 */

useQueryProductGameserverMysqlByGameserver.Document = gql`
    query productGameserverMysqlByGameserver($gameserverId: ID!) {
        productGameserverMysqlByGameserver(gameserverId: $gameserverId) {
            id
            label
            create
            host
        }
    }
` as DocumentNode;

export function useQueryProductGameserverMysqlByGameserver(
    options?: QueryHookOptions<
        ProductGameserverMysqlByGameserverData,
        ProductGameserverMysqlByGameserverVariables
    >
) {
    const result = useQuery<
        ProductGameserverMysqlByGameserverData,
        ProductGameserverMysqlByGameserverVariables
    >(useQueryProductGameserverMysqlByGameserver.Document, {
        ...queryDefaultOptions,
        ...options,
    });
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryProductGameserverMysqlByGameserver.lazy = function (
    options?: LazyQueryHookOptions<
        ProductGameserverMysqlByGameserverData,
        ProductGameserverMysqlByGameserverVariables
    >
) {
    return useLazyQuery(useQueryProductGameserverMysqlByGameserver.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type ProductGameserverMysqlByGameserverVariables = {
    gameserverId: ProductGameserverMysqlByGameserverVariablesGameserverId;
};

type ProductGameserverMysqlByGameserverVariablesGameserverId = string;

export type ProductGameserverMysqlByGameserverData = {
    productGameserverMysqlByGameserver: Array<ProductGameserverMysqlByGameserverDataProductGameserverMysqlByGameserver>;
};

type ProductGameserverMysqlByGameserverDataProductGameserverMysqlByGameserver = {
    __typename?: 'ProductGameserverMysql';
    id: ProductGameserverMysqlByGameserverDataProductGameserverMysqlByGameserverId;
    label?: Nullable<ProductGameserverMysqlByGameserverDataProductGameserverMysqlByGameserverLabel>;
    create: ProductGameserverMysqlByGameserverDataProductGameserverMysqlByGameserverCreate;
    host: ProductGameserverMysqlByGameserverDataProductGameserverMysqlByGameserverHost;
};

type ProductGameserverMysqlByGameserverDataProductGameserverMysqlByGameserverId = string;
type ProductGameserverMysqlByGameserverDataProductGameserverMysqlByGameserverLabel = string;
type ProductGameserverMysqlByGameserverDataProductGameserverMysqlByGameserverCreate = any;
type ProductGameserverMysqlByGameserverDataProductGameserverMysqlByGameserverHost = string;

useMutationProductGameserverMysqlCreate.Document = gql`
    mutation productGameserverMysqlCreate(
        $gameserverId: ID!
        $password: String!
    ) {
        productGameserverMysqlCreate(
            gameserverId: $gameserverId
            password: $password
        ) {
            id
            label
            host
            create
        }
    }
` as DocumentNode;

export function useMutationProductGameserverMysqlCreate(
    options?: MutationHookOptions<
        ProductGameserverMysqlCreateData,
        ProductGameserverMysqlCreateVariables
    >
): MutationHookFn<
    ProductGameserverMysqlCreateData,
    ProductGameserverMysqlCreateVariables
> {
    return useMutation<
        ProductGameserverMysqlCreateData,
        ProductGameserverMysqlCreateVariables
    >(useMutationProductGameserverMysqlCreate.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type ProductGameserverMysqlCreateVariables = {
    gameserverId: ProductGameserverMysqlCreateVariablesGameserverId;
    password: ProductGameserverMysqlCreateVariablesPassword;
};

type ProductGameserverMysqlCreateVariablesGameserverId = string;
type ProductGameserverMysqlCreateVariablesPassword = string;

export type ProductGameserverMysqlCreateData = {
    productGameserverMysqlCreate: ProductGameserverMysqlCreateDataProductGameserverMysqlCreate;
};

type ProductGameserverMysqlCreateDataProductGameserverMysqlCreate = {
    __typename?: 'ProductGameserverMysql';
    id: ProductGameserverMysqlCreateDataProductGameserverMysqlCreateId;
    label?: Nullable<ProductGameserverMysqlCreateDataProductGameserverMysqlCreateLabel>;
    host: ProductGameserverMysqlCreateDataProductGameserverMysqlCreateHost;
    create: ProductGameserverMysqlCreateDataProductGameserverMysqlCreateCreate;
};

type ProductGameserverMysqlCreateDataProductGameserverMysqlCreateId = string;
type ProductGameserverMysqlCreateDataProductGameserverMysqlCreateLabel = string;
type ProductGameserverMysqlCreateDataProductGameserverMysqlCreateHost = string;
type ProductGameserverMysqlCreateDataProductGameserverMysqlCreateCreate = any;

useMutationProductGameserverMysqlChangeLabel.Document = gql`
    mutation productGameserverMysqlChangeLabel($id: ID!, $label: String!) {
        productGameserverMysqlChangeLabel(id: $id, label: $label) {
            id
            label
            create
            host
        }
    }
` as DocumentNode;

export function useMutationProductGameserverMysqlChangeLabel(
    options?: MutationHookOptions<
        ProductGameserverMysqlChangeLabelData,
        ProductGameserverMysqlChangeLabelVariables
    >
): MutationHookFn<
    ProductGameserverMysqlChangeLabelData,
    ProductGameserverMysqlChangeLabelVariables
> {
    return useMutation<
        ProductGameserverMysqlChangeLabelData,
        ProductGameserverMysqlChangeLabelVariables
    >(useMutationProductGameserverMysqlChangeLabel.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type ProductGameserverMysqlChangeLabelVariables = {
    id: ProductGameserverMysqlChangeLabelVariablesId;
    label: ProductGameserverMysqlChangeLabelVariablesLabel;
};

type ProductGameserverMysqlChangeLabelVariablesId = string;
type ProductGameserverMysqlChangeLabelVariablesLabel = string;

export type ProductGameserverMysqlChangeLabelData = {
    productGameserverMysqlChangeLabel: ProductGameserverMysqlChangeLabelDataProductGameserverMysqlChangeLabel;
};

type ProductGameserverMysqlChangeLabelDataProductGameserverMysqlChangeLabel = {
    __typename?: 'ProductGameserverMysql';
    id: ProductGameserverMysqlChangeLabelDataProductGameserverMysqlChangeLabelId;
    label?: Nullable<ProductGameserverMysqlChangeLabelDataProductGameserverMysqlChangeLabelLabel>;
    create: ProductGameserverMysqlChangeLabelDataProductGameserverMysqlChangeLabelCreate;
    host: ProductGameserverMysqlChangeLabelDataProductGameserverMysqlChangeLabelHost;
};

type ProductGameserverMysqlChangeLabelDataProductGameserverMysqlChangeLabelId = string;
type ProductGameserverMysqlChangeLabelDataProductGameserverMysqlChangeLabelLabel = string;
type ProductGameserverMysqlChangeLabelDataProductGameserverMysqlChangeLabelCreate = any;
type ProductGameserverMysqlChangeLabelDataProductGameserverMysqlChangeLabelHost = string;

useMutationProductGameserverMysqlDelete.Document = gql`
    mutation productGameserverMysqlDelete($id: ID!) {
        productGameserverMysqlDelete(id: $id)
    }
` as DocumentNode;

export function useMutationProductGameserverMysqlDelete(
    options?: MutationHookOptions<
        ProductGameserverMysqlDeleteData,
        ProductGameserverMysqlDeleteVariables
    >
): MutationHookFn<
    ProductGameserverMysqlDeleteData,
    ProductGameserverMysqlDeleteVariables
> {
    return useMutation<
        ProductGameserverMysqlDeleteData,
        ProductGameserverMysqlDeleteVariables
    >(useMutationProductGameserverMysqlDelete.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type ProductGameserverMysqlDeleteVariables = {
    id: ProductGameserverMysqlDeleteVariablesId;
};

type ProductGameserverMysqlDeleteVariablesId = string;

export type ProductGameserverMysqlDeleteData = {
    productGameserverMysqlDelete: ProductGameserverMysqlDeleteDataProductGameserverMysqlDelete;
};

type ProductGameserverMysqlDeleteDataProductGameserverMysqlDelete = boolean;

/*,
 * Fragments from undefined,
 */

/*,
 * Operations from undefined,
 */

useQueryProductGameserverScripts.Document = gql`
    query productGameserverScripts(
        $search: String
        $orderBy: String
        $order: String
        $templateId: ID
    ) {
        product_gameserver_scripts(
            search: $search
            orderBy: $orderBy
            order: $order
            templateId: $templateId
        ) {
            id
            title
            script
            isDefault
            hidden
            executeHook
        }
    }
` as DocumentNode;

export function useQueryProductGameserverScripts(
    options?: QueryHookOptions<
        ProductGameserverScriptsData,
        ProductGameserverScriptsVariables
    >
) {
    const result = useQuery<
        ProductGameserverScriptsData,
        ProductGameserverScriptsVariables
    >(useQueryProductGameserverScripts.Document, {
        ...queryDefaultOptions,
        ...options,
    });
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryProductGameserverScripts.lazy = function (
    options?: LazyQueryHookOptions<
        ProductGameserverScriptsData,
        ProductGameserverScriptsVariables
    >
) {
    return useLazyQuery(useQueryProductGameserverScripts.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type ProductGameserverScriptsVariables = {
    search?: Nullable<ProductGameserverScriptsVariablesSearch>;
    orderBy?: Nullable<ProductGameserverScriptsVariablesOrderBy>;
    order?: Nullable<ProductGameserverScriptsVariablesOrder>;
    templateId?: Nullable<ProductGameserverScriptsVariablesTemplateId>;
};

type ProductGameserverScriptsVariablesSearch = string;
type ProductGameserverScriptsVariablesOrderBy = string;
type ProductGameserverScriptsVariablesOrder = string;
type ProductGameserverScriptsVariablesTemplateId = string;

export type ProductGameserverScriptsData = {
    product_gameserver_scripts: Array<ProductGameserverScriptsDataProductGameserverScripts>;
};

type ProductGameserverScriptsDataProductGameserverScripts = {
    __typename?: 'ProductGameserverScript';
    id: ProductGameserverScriptsDataProductGameserverScriptsId;
    title: ProductGameserverScriptsDataProductGameserverScriptsTitle;
    script: ProductGameserverScriptsDataProductGameserverScriptsScript;
    isDefault: ProductGameserverScriptsDataProductGameserverScriptsIsDefault;
    hidden: ProductGameserverScriptsDataProductGameserverScriptsHidden;
    executeHook?: Nullable<ProductGameserverScriptsDataProductGameserverScriptsExecuteHook>;
};

type ProductGameserverScriptsDataProductGameserverScriptsId = string;
type ProductGameserverScriptsDataProductGameserverScriptsTitle = string;
type ProductGameserverScriptsDataProductGameserverScriptsScript = string;
type ProductGameserverScriptsDataProductGameserverScriptsIsDefault = boolean;
type ProductGameserverScriptsDataProductGameserverScriptsHidden = boolean;
type ProductGameserverScriptsDataProductGameserverScriptsExecuteHook = string;

useMutationProductGameserverScriptEdit.Document = gql`
    mutation productGameserverScriptEdit(
        $title: String!
        $script: String!
        $standaloneBtn: Boolean!
        $standaloneBtnColor: String
        $templateId: ID!
        $runAsRoot: Boolean!
        $disableAutoRestart: Boolean!
        $hidden: Boolean
        $executeHook: String
        $id: ID!
    ) {
        product_gameserver_script_edit(
            data: {
                title: $title
                script: $script
                templateId: $templateId
                id: $id
                standaloneBtn: $standaloneBtn
                standaloneBtnColor: $standaloneBtnColor
                disableAutoRestart: $disableAutoRestart
                runAsRoot: $runAsRoot
                hidden: $hidden
                executeHook: $executeHook
            }
        ) {
            id
            title
            script
            hidden
            executeHook
        }
    }
` as DocumentNode;

export function useMutationProductGameserverScriptEdit(
    options?: MutationHookOptions<
        ProductGameserverScriptEditData,
        ProductGameserverScriptEditVariables
    >
): MutationHookFn<
    ProductGameserverScriptEditData,
    ProductGameserverScriptEditVariables
> {
    return useMutation<
        ProductGameserverScriptEditData,
        ProductGameserverScriptEditVariables
    >(useMutationProductGameserverScriptEdit.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type ProductGameserverScriptEditVariables = {
    title: ProductGameserverScriptEditVariablesTitle;
    script: ProductGameserverScriptEditVariablesScript;
    standaloneBtn: ProductGameserverScriptEditVariablesStandaloneBtn;
    standaloneBtnColor?: Nullable<ProductGameserverScriptEditVariablesStandaloneBtnColor>;
    templateId: ProductGameserverScriptEditVariablesTemplateId;
    runAsRoot: ProductGameserverScriptEditVariablesRunAsRoot;
    disableAutoRestart: ProductGameserverScriptEditVariablesDisableAutoRestart;
    hidden?: Nullable<ProductGameserverScriptEditVariablesHidden>;
    executeHook?: Nullable<ProductGameserverScriptEditVariablesExecuteHook>;
    id: ProductGameserverScriptEditVariablesId;
};

type ProductGameserverScriptEditVariablesTitle = string;
type ProductGameserverScriptEditVariablesScript = string;
type ProductGameserverScriptEditVariablesStandaloneBtn = boolean;
type ProductGameserverScriptEditVariablesStandaloneBtnColor = string;
type ProductGameserverScriptEditVariablesTemplateId = string;
type ProductGameserverScriptEditVariablesRunAsRoot = boolean;
type ProductGameserverScriptEditVariablesDisableAutoRestart = boolean;
type ProductGameserverScriptEditVariablesHidden = boolean;
type ProductGameserverScriptEditVariablesExecuteHook = string;
type ProductGameserverScriptEditVariablesId = string;

export type ProductGameserverScriptEditData = {
    product_gameserver_script_edit: ProductGameserverScriptEditDataProductGameserverScriptEdit;
};

type ProductGameserverScriptEditDataProductGameserverScriptEdit = {
    __typename?: 'ProductGameserverScript';
    id: ProductGameserverScriptEditDataProductGameserverScriptEditId;
    title: ProductGameserverScriptEditDataProductGameserverScriptEditTitle;
    script: ProductGameserverScriptEditDataProductGameserverScriptEditScript;
    hidden: ProductGameserverScriptEditDataProductGameserverScriptEditHidden;
    executeHook?: Nullable<ProductGameserverScriptEditDataProductGameserverScriptEditExecuteHook>;
};

type ProductGameserverScriptEditDataProductGameserverScriptEditId = string;
type ProductGameserverScriptEditDataProductGameserverScriptEditTitle = string;
type ProductGameserverScriptEditDataProductGameserverScriptEditScript = string;
type ProductGameserverScriptEditDataProductGameserverScriptEditHidden = boolean;
type ProductGameserverScriptEditDataProductGameserverScriptEditExecuteHook = string;

useMutationProductGameserverScriptDelete.Document = gql`
    mutation productGameserverScriptDelete($id: ID!) {
        product_gameserver_script_delete(id: $id)
    }
` as DocumentNode;

export function useMutationProductGameserverScriptDelete(
    options?: MutationHookOptions<
        ProductGameserverScriptDeleteData,
        ProductGameserverScriptDeleteVariables
    >
): MutationHookFn<
    ProductGameserverScriptDeleteData,
    ProductGameserverScriptDeleteVariables
> {
    return useMutation<
        ProductGameserverScriptDeleteData,
        ProductGameserverScriptDeleteVariables
    >(useMutationProductGameserverScriptDelete.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type ProductGameserverScriptDeleteVariables = {
    id: ProductGameserverScriptDeleteVariablesId;
};

type ProductGameserverScriptDeleteVariablesId = string;

export type ProductGameserverScriptDeleteData = {
    product_gameserver_script_delete: ProductGameserverScriptDeleteDataProductGameserverScriptDelete;
};

type ProductGameserverScriptDeleteDataProductGameserverScriptDelete = boolean;

useQueryProductGameserverScriptById.Document = gql`
    query productGameserverScriptById($id: ID!) {
        productGameserverScriptById(id: $id) {
            id
            title
            script
            standaloneBtn
            standaloneBtnColor
            runAsRoot
            disableAutoRestart
            hidden
            executeHook
        }
    }
` as DocumentNode;

export function useQueryProductGameserverScriptById(
    options?: QueryHookOptions<
        ProductGameserverScriptByIdData,
        ProductGameserverScriptByIdVariables
    >
) {
    const result = useQuery<
        ProductGameserverScriptByIdData,
        ProductGameserverScriptByIdVariables
    >(useQueryProductGameserverScriptById.Document, {
        ...queryDefaultOptions,
        ...options,
    });
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryProductGameserverScriptById.lazy = function (
    options?: LazyQueryHookOptions<
        ProductGameserverScriptByIdData,
        ProductGameserverScriptByIdVariables
    >
) {
    return useLazyQuery(useQueryProductGameserverScriptById.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type ProductGameserverScriptByIdVariables = {
    id: ProductGameserverScriptByIdVariablesId;
};

type ProductGameserverScriptByIdVariablesId = string;

export type ProductGameserverScriptByIdData = {
    productGameserverScriptById: ProductGameserverScriptByIdDataProductGameserverScriptById;
};

type ProductGameserverScriptByIdDataProductGameserverScriptById = {
    __typename?: 'ProductGameserverScript';
    id: ProductGameserverScriptByIdDataProductGameserverScriptByIdId;
    title: ProductGameserverScriptByIdDataProductGameserverScriptByIdTitle;
    script: ProductGameserverScriptByIdDataProductGameserverScriptByIdScript;
    standaloneBtn: ProductGameserverScriptByIdDataProductGameserverScriptByIdStandaloneBtn;
    standaloneBtnColor?: Nullable<ProductGameserverScriptByIdDataProductGameserverScriptByIdStandaloneBtnColor>;
    runAsRoot: ProductGameserverScriptByIdDataProductGameserverScriptByIdRunAsRoot;
    disableAutoRestart: ProductGameserverScriptByIdDataProductGameserverScriptByIdDisableAutoRestart;
    hidden: ProductGameserverScriptByIdDataProductGameserverScriptByIdHidden;
    executeHook?: Nullable<ProductGameserverScriptByIdDataProductGameserverScriptByIdExecuteHook>;
};

type ProductGameserverScriptByIdDataProductGameserverScriptByIdId = string;
type ProductGameserverScriptByIdDataProductGameserverScriptByIdTitle = string;
type ProductGameserverScriptByIdDataProductGameserverScriptByIdScript = string;
type ProductGameserverScriptByIdDataProductGameserverScriptByIdStandaloneBtn = boolean;
type ProductGameserverScriptByIdDataProductGameserverScriptByIdStandaloneBtnColor = string;
type ProductGameserverScriptByIdDataProductGameserverScriptByIdRunAsRoot = boolean;
type ProductGameserverScriptByIdDataProductGameserverScriptByIdDisableAutoRestart = boolean;
type ProductGameserverScriptByIdDataProductGameserverScriptByIdHidden = boolean;
type ProductGameserverScriptByIdDataProductGameserverScriptByIdExecuteHook = string;

/*,
 * Fragments from undefined,
 */
export type ProductGameserverTemplatePart = {
    id: ProductGameserverTemplatePartId;
    title: ProductGameserverTemplatePartTitle;
    canUpdateOnStart: ProductGameserverTemplatePartCanUpdateOnStart;
    platform: ProductGameserverTemplatePartPlatform;
    update: ProductGameserverTemplatePartUpdate;
    defaultCustomParameter: ProductGameserverTemplatePartDefaultCustomParameter;
    active: ProductGameserverTemplatePartActive;
    ports: ProductGameserverTemplatePartPorts;
    defaultScript?: Nullable<ProductGameserverTemplatePartDefaultScript>;
    resourceUrl: ProductGameserverTemplatePartResourceUrl;
    logo?: Nullable<ProductGameserverTemplatePartLogo>;
};

type ProductGameserverTemplatePartId = string;
type ProductGameserverTemplatePartTitle = string;
type ProductGameserverTemplatePartCanUpdateOnStart = boolean;
type ProductGameserverTemplatePartPlatform = string;
type ProductGameserverTemplatePartUpdate = any;
type ProductGameserverTemplatePartDefaultCustomParameter = string;
type ProductGameserverTemplatePartActive = boolean;
type ProductGameserverTemplatePartPorts = number;
type ProductGameserverTemplatePartDefaultScript = {
    __typename?: 'ProductGameserverScript';
    id: ProductGameserverTemplatePartDefaultScriptId;
};

type ProductGameserverTemplatePartDefaultScriptId = string;
type ProductGameserverTemplatePartResourceUrl = string;
type ProductGameserverTemplatePartLogo = {
    __typename?: 'File';
    id: ProductGameserverTemplatePartLogoId;
};

type ProductGameserverTemplatePartLogoId = string;
const _gql_ProductGameserverTemplatePart = gql`
    fragment ProductGameserverTemplatePart on ProductGameserverTemplate {
        id
        title
        canUpdateOnStart
        platform
        update
        defaultCustomParameter
        active
        ports
        defaultScript {
            id
        }
        resourceUrl
        logo {
            id
        }
    }
`;

/*,
 * Operations from undefined,
 */

useQueryProductGameserverTemplate.Document = gql`
    query productGameserverTemplate($id: ID!) {
        product_gameserver_template(id: $id) {
            ...ProductGameserverTemplatePart
        }
    }
    ${_gql_ProductGameserverTemplatePart}
` as DocumentNode;

export function useQueryProductGameserverTemplate(
    options?: QueryHookOptions<
        ProductGameserverTemplateData,
        ProductGameserverTemplateVariables
    >
) {
    const result = useQuery<
        ProductGameserverTemplateData,
        ProductGameserverTemplateVariables
    >(useQueryProductGameserverTemplate.Document, {
        ...queryDefaultOptions,
        ...options,
    });
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryProductGameserverTemplate.lazy = function (
    options?: LazyQueryHookOptions<
        ProductGameserverTemplateData,
        ProductGameserverTemplateVariables
    >
) {
    return useLazyQuery(useQueryProductGameserverTemplate.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type ProductGameserverTemplateVariables = {
    id: ProductGameserverTemplateVariablesId;
};

type ProductGameserverTemplateVariablesId = string;

export type ProductGameserverTemplateData = {
    product_gameserver_template: ProductGameserverTemplateDataProductGameserverTemplate;
};

type ProductGameserverTemplateDataProductGameserverTemplate = ProductGameserverTemplatePart & {
    __typename?: 'ProductGameserverTemplate';
};

useQueryProductGameserverTemplates.Document = gql`
    query productGameserverTemplates($filter: CordFilter!) {
        productGameserverTemplates(filter: $filter) {
            edges {
                id
                title
                platform
                logo {
                    url
                    id
                }
            }
            pageInfo {
                totalCount
            }
        }
    }
` as DocumentNode;

export function useQueryProductGameserverTemplates(
    options?: QueryHookOptions<
        ProductGameserverTemplatesData,
        ProductGameserverTemplatesVariables
    >
) {
    const result = useQuery<
        ProductGameserverTemplatesData,
        ProductGameserverTemplatesVariables
    >(useQueryProductGameserverTemplates.Document, {
        ...queryDefaultOptions,
        ...options,
    });
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryProductGameserverTemplates.lazy = function (
    options?: LazyQueryHookOptions<
        ProductGameserverTemplatesData,
        ProductGameserverTemplatesVariables
    >
) {
    return useLazyQuery(useQueryProductGameserverTemplates.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type ProductGameserverTemplatesVariables = {
    filter: ProductGameserverTemplatesVariablesFilter;
};

type ProductGameserverTemplatesVariablesFilter = CordFilter;

export type ProductGameserverTemplatesData = {
    productGameserverTemplates: ProductGameserverTemplatesDataProductGameserverTemplates;
};

type ProductGameserverTemplatesDataProductGameserverTemplates = {
    __typename?: 'ProductGameserverTemplateResultMany';
    edges: Array<ProductGameserverTemplatesDataProductGameserverTemplatesEdges>;
    pageInfo: ProductGameserverTemplatesDataProductGameserverTemplatesPageInfo;
};

type ProductGameserverTemplatesDataProductGameserverTemplatesEdges = {
    __typename?: 'ProductGameserverTemplate';
    id: ProductGameserverTemplatesDataProductGameserverTemplatesEdgesId;
    title: ProductGameserverTemplatesDataProductGameserverTemplatesEdgesTitle;
    platform: ProductGameserverTemplatesDataProductGameserverTemplatesEdgesPlatform;
    logo?: Nullable<ProductGameserverTemplatesDataProductGameserverTemplatesEdgesLogo>;
};

type ProductGameserverTemplatesDataProductGameserverTemplatesEdgesId = string;
type ProductGameserverTemplatesDataProductGameserverTemplatesEdgesTitle = string;
type ProductGameserverTemplatesDataProductGameserverTemplatesEdgesPlatform = string;
type ProductGameserverTemplatesDataProductGameserverTemplatesEdgesLogo = {
    __typename?: 'File';
    url: ProductGameserverTemplatesDataProductGameserverTemplatesEdgesLogoUrl;
    id: ProductGameserverTemplatesDataProductGameserverTemplatesEdgesLogoId;
};

type ProductGameserverTemplatesDataProductGameserverTemplatesEdgesLogoUrl = string;
type ProductGameserverTemplatesDataProductGameserverTemplatesEdgesLogoId = string;
type ProductGameserverTemplatesDataProductGameserverTemplatesPageInfo = {
    __typename?: 'CordPageInfo';
    totalCount: ProductGameserverTemplatesDataProductGameserverTemplatesPageInfoTotalCount;
};

type ProductGameserverTemplatesDataProductGameserverTemplatesPageInfoTotalCount = number;

useMutationProductGameserverTemplateEdit.Document = gql`
    mutation productGameserverTemplateEdit(
        $id: ID
        $title: String!
        $platform: String!
        $active: Boolean!
        $resourceUrl: String!
        $logoId: ID
        $ports: Int!
        $defaultCustomParameter: String!
        $canUpdateOnStart: Boolean!
    ) {
        product_gameserver_template_edit(
            data: {
                id: $id
                title: $title
                platform: $platform
                active: $active
                logoId: $logoId
                resourceUrl: $resourceUrl
                ports: $ports
                defaultCustomParameter: $defaultCustomParameter
                canUpdateOnStart: $canUpdateOnStart
            }
        ) {
            ...ProductGameserverTemplatePart
        }
    }
    ${_gql_ProductGameserverTemplatePart}
` as DocumentNode;

export function useMutationProductGameserverTemplateEdit(
    options?: MutationHookOptions<
        ProductGameserverTemplateEditData,
        ProductGameserverTemplateEditVariables
    >
): MutationHookFn<
    ProductGameserverTemplateEditData,
    ProductGameserverTemplateEditVariables
> {
    return useMutation<
        ProductGameserverTemplateEditData,
        ProductGameserverTemplateEditVariables
    >(useMutationProductGameserverTemplateEdit.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type ProductGameserverTemplateEditVariables = {
    id?: Nullable<ProductGameserverTemplateEditVariablesId>;
    title: ProductGameserverTemplateEditVariablesTitle;
    platform: ProductGameserverTemplateEditVariablesPlatform;
    active: ProductGameserverTemplateEditVariablesActive;
    resourceUrl: ProductGameserverTemplateEditVariablesResourceUrl;
    logoId?: Nullable<ProductGameserverTemplateEditVariablesLogoId>;
    ports: ProductGameserverTemplateEditVariablesPorts;
    defaultCustomParameter: ProductGameserverTemplateEditVariablesDefaultCustomParameter;
    canUpdateOnStart: ProductGameserverTemplateEditVariablesCanUpdateOnStart;
};

type ProductGameserverTemplateEditVariablesId = string;
type ProductGameserverTemplateEditVariablesTitle = string;
type ProductGameserverTemplateEditVariablesPlatform = string;
type ProductGameserverTemplateEditVariablesActive = boolean;
type ProductGameserverTemplateEditVariablesResourceUrl = string;
type ProductGameserverTemplateEditVariablesLogoId = string;
type ProductGameserverTemplateEditVariablesPorts = number;
type ProductGameserverTemplateEditVariablesDefaultCustomParameter = string;
type ProductGameserverTemplateEditVariablesCanUpdateOnStart = boolean;

export type ProductGameserverTemplateEditData = {
    product_gameserver_template_edit: ProductGameserverTemplateEditDataProductGameserverTemplateEdit;
};

type ProductGameserverTemplateEditDataProductGameserverTemplateEdit = ProductGameserverTemplatePart & {
    __typename?: 'ProductGameserverTemplate';
};

useMutationProductGameserverTemplateDelete.Document = gql`
    mutation productGameserverTemplateDelete($id: ID!) {
        product_gameserver_template_delete(id: $id)
    }
` as DocumentNode;

export function useMutationProductGameserverTemplateDelete(
    options?: MutationHookOptions<
        ProductGameserverTemplateDeleteData,
        ProductGameserverTemplateDeleteVariables
    >
): MutationHookFn<
    ProductGameserverTemplateDeleteData,
    ProductGameserverTemplateDeleteVariables
> {
    return useMutation<
        ProductGameserverTemplateDeleteData,
        ProductGameserverTemplateDeleteVariables
    >(useMutationProductGameserverTemplateDelete.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type ProductGameserverTemplateDeleteVariables = {
    id: ProductGameserverTemplateDeleteVariablesId;
};

type ProductGameserverTemplateDeleteVariablesId = string;

export type ProductGameserverTemplateDeleteData = {
    product_gameserver_template_delete: ProductGameserverTemplateDeleteDataProductGameserverTemplateDelete;
};

type ProductGameserverTemplateDeleteDataProductGameserverTemplateDelete = boolean;

useMutationProductGameserverTemplateSetDefaultScript.Document = gql`
    mutation productGameserverTemplateSetDefaultScript(
        $id: ID!
        $scriptId: ID!
    ) {
        product_gameserver_template_set_default_script(
            id: $id
            scriptId: $scriptId
        ) {
            id
        }
    }
` as DocumentNode;

export function useMutationProductGameserverTemplateSetDefaultScript(
    options?: MutationHookOptions<
        ProductGameserverTemplateSetDefaultScriptData,
        ProductGameserverTemplateSetDefaultScriptVariables
    >
): MutationHookFn<
    ProductGameserverTemplateSetDefaultScriptData,
    ProductGameserverTemplateSetDefaultScriptVariables
> {
    return useMutation<
        ProductGameserverTemplateSetDefaultScriptData,
        ProductGameserverTemplateSetDefaultScriptVariables
    >(useMutationProductGameserverTemplateSetDefaultScript.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type ProductGameserverTemplateSetDefaultScriptVariables = {
    id: ProductGameserverTemplateSetDefaultScriptVariablesId;
    scriptId: ProductGameserverTemplateSetDefaultScriptVariablesScriptId;
};

type ProductGameserverTemplateSetDefaultScriptVariablesId = string;
type ProductGameserverTemplateSetDefaultScriptVariablesScriptId = string;

export type ProductGameserverTemplateSetDefaultScriptData = {
    product_gameserver_template_set_default_script: ProductGameserverTemplateSetDefaultScriptDataProductGameserverTemplateSetDefaultScript;
};

type ProductGameserverTemplateSetDefaultScriptDataProductGameserverTemplateSetDefaultScript = {
    __typename?: 'ProductGameserverTemplate';
    id: ProductGameserverTemplateSetDefaultScriptDataProductGameserverTemplateSetDefaultScriptId;
};

type ProductGameserverTemplateSetDefaultScriptDataProductGameserverTemplateSetDefaultScriptId = string;

/*,
 * Fragments from undefined,
 */

/*,
 * Operations from undefined,
 */

useQueryHostNodeById.Document = gql`
    query hostNodeById($id: ID!) {
        host_node(id: $id) {
            id
            name
            section
            remoteAddress
            type
            deletable
            hostNodeFilterKey
            maxInstances
            freeInstances
            forcePublicBackupTranfer
            isAvailable
            meta
            daemonVersion
        }
    }
` as DocumentNode;

export function useQueryHostNodeById(
    options?: QueryHookOptions<HostNodeByIdData, HostNodeByIdVariables>
) {
    const result = useQuery<HostNodeByIdData, HostNodeByIdVariables>(
        useQueryHostNodeById.Document,
        { ...queryDefaultOptions, ...options }
    );
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryHostNodeById.lazy = function (
    options?: LazyQueryHookOptions<HostNodeByIdData, HostNodeByIdVariables>
) {
    return useLazyQuery(useQueryHostNodeById.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type HostNodeByIdVariables = {
    id: HostNodeByIdVariablesId;
};

type HostNodeByIdVariablesId = string;

export type HostNodeByIdData = {
    host_node: HostNodeByIdDataHostNode;
};

type HostNodeByIdDataHostNode = {
    __typename?: 'HostNode';
    id: HostNodeByIdDataHostNodeId;
    name: HostNodeByIdDataHostNodeName;
    section: HostNodeByIdDataHostNodeSection;
    remoteAddress: HostNodeByIdDataHostNodeRemoteAddress;
    type: HostNodeByIdDataHostNodeType;
    deletable: HostNodeByIdDataHostNodeDeletable;
    hostNodeFilterKey?: Nullable<HostNodeByIdDataHostNodeHostNodeFilterKey>;
    maxInstances: HostNodeByIdDataHostNodeMaxInstances;
    freeInstances: HostNodeByIdDataHostNodeFreeInstances;
    forcePublicBackupTranfer: HostNodeByIdDataHostNodeForcePublicBackupTranfer;
    isAvailable: HostNodeByIdDataHostNodeIsAvailable;
    meta: HostNodeByIdDataHostNodeMeta;
    daemonVersion?: Nullable<HostNodeByIdDataHostNodeDaemonVersion>;
};

type HostNodeByIdDataHostNodeId = string;
type HostNodeByIdDataHostNodeName = string;
type HostNodeByIdDataHostNodeSection = number;
type HostNodeByIdDataHostNodeRemoteAddress = string;
type HostNodeByIdDataHostNodeType = string;
type HostNodeByIdDataHostNodeDeletable = boolean;
type HostNodeByIdDataHostNodeHostNodeFilterKey = string;
type HostNodeByIdDataHostNodeMaxInstances = number;
type HostNodeByIdDataHostNodeFreeInstances = number;
type HostNodeByIdDataHostNodeForcePublicBackupTranfer = boolean;
type HostNodeByIdDataHostNodeIsAvailable = boolean;
type HostNodeByIdDataHostNodeMeta = any;
type HostNodeByIdDataHostNodeDaemonVersion = string;

useQueryHostNodes.Document = gql`
    query hostNodes($filter: CordFilter) {
        hostNodes(filter: $filter) {
            edges {
                id
                name
                remoteAddress
                type
                isAvailable
                daemonVersion
                isDaemonVersionBehind
                getDaemonVersionsBehind
                latestInfoUpdate
            }
            pageInfo {
                totalCount
            }
        }
    }
` as DocumentNode;

export function useQueryHostNodes(
    options?: QueryHookOptions<HostNodesData, HostNodesVariables>
) {
    const result = useQuery<HostNodesData, HostNodesVariables>(
        useQueryHostNodes.Document,
        { ...queryDefaultOptions, ...options }
    );
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryHostNodes.lazy = function (
    options?: LazyQueryHookOptions<HostNodesData, HostNodesVariables>
) {
    return useLazyQuery(useQueryHostNodes.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type HostNodesVariables = {
    filter?: Nullable<HostNodesVariablesFilter>;
};

type HostNodesVariablesFilter = CordFilter;

export type HostNodesData = {
    hostNodes: HostNodesDataHostNodes;
};

type HostNodesDataHostNodes = {
    __typename?: 'HostNodeResultMany';
    edges: Array<HostNodesDataHostNodesEdges>;
    pageInfo: HostNodesDataHostNodesPageInfo;
};

type HostNodesDataHostNodesEdges = {
    __typename?: 'HostNode';
    id: HostNodesDataHostNodesEdgesId;
    name: HostNodesDataHostNodesEdgesName;
    remoteAddress: HostNodesDataHostNodesEdgesRemoteAddress;
    type: HostNodesDataHostNodesEdgesType;
    isAvailable: HostNodesDataHostNodesEdgesIsAvailable;
    daemonVersion?: Nullable<HostNodesDataHostNodesEdgesDaemonVersion>;
    isDaemonVersionBehind: HostNodesDataHostNodesEdgesIsDaemonVersionBehind;
    getDaemonVersionsBehind?: Nullable<HostNodesDataHostNodesEdgesGetDaemonVersionsBehind>;
    latestInfoUpdate?: Nullable<HostNodesDataHostNodesEdgesLatestInfoUpdate>;
};

type HostNodesDataHostNodesEdgesId = string;
type HostNodesDataHostNodesEdgesName = string;
type HostNodesDataHostNodesEdgesRemoteAddress = string;
type HostNodesDataHostNodesEdgesType = string;
type HostNodesDataHostNodesEdgesIsAvailable = boolean;
type HostNodesDataHostNodesEdgesDaemonVersion = string;
type HostNodesDataHostNodesEdgesIsDaemonVersionBehind = boolean;
type HostNodesDataHostNodesEdgesGetDaemonVersionsBehind = number;
type HostNodesDataHostNodesEdgesLatestInfoUpdate = any;
type HostNodesDataHostNodesPageInfo = {
    __typename?: 'CordPageInfo';
    totalCount: HostNodesDataHostNodesPageInfoTotalCount;
};

type HostNodesDataHostNodesPageInfoTotalCount = number;

useQueryHostNodeTestFindNode.Document = gql`
    query hostNodeTestFindNode($type: String!, $filterKey: String) {
        hostNodeTestFindNode(type: $type, filterKey: $filterKey) {
            id
            name
            remoteAddress
            type
            isAvailable
            daemonVersion
        }
    }
` as DocumentNode;

export function useQueryHostNodeTestFindNode(
    options?: QueryHookOptions<
        HostNodeTestFindNodeData,
        HostNodeTestFindNodeVariables
    >
) {
    const result = useQuery<
        HostNodeTestFindNodeData,
        HostNodeTestFindNodeVariables
    >(useQueryHostNodeTestFindNode.Document, {
        ...queryDefaultOptions,
        ...options,
    });
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryHostNodeTestFindNode.lazy = function (
    options?: LazyQueryHookOptions<
        HostNodeTestFindNodeData,
        HostNodeTestFindNodeVariables
    >
) {
    return useLazyQuery(useQueryHostNodeTestFindNode.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type HostNodeTestFindNodeVariables = {
    type: HostNodeTestFindNodeVariablesType;
    filterKey?: Nullable<HostNodeTestFindNodeVariablesFilterKey>;
};

type HostNodeTestFindNodeVariablesType = string;
type HostNodeTestFindNodeVariablesFilterKey = string;

export type HostNodeTestFindNodeData = {
    hostNodeTestFindNode?: Nullable<HostNodeTestFindNodeDataHostNodeTestFindNode>;
};

type HostNodeTestFindNodeDataHostNodeTestFindNode = {
    __typename?: 'HostNode';
    id: HostNodeTestFindNodeDataHostNodeTestFindNodeId;
    name: HostNodeTestFindNodeDataHostNodeTestFindNodeName;
    remoteAddress: HostNodeTestFindNodeDataHostNodeTestFindNodeRemoteAddress;
    type: HostNodeTestFindNodeDataHostNodeTestFindNodeType;
    isAvailable: HostNodeTestFindNodeDataHostNodeTestFindNodeIsAvailable;
    daemonVersion?: Nullable<HostNodeTestFindNodeDataHostNodeTestFindNodeDaemonVersion>;
};

type HostNodeTestFindNodeDataHostNodeTestFindNodeId = string;
type HostNodeTestFindNodeDataHostNodeTestFindNodeName = string;
type HostNodeTestFindNodeDataHostNodeTestFindNodeRemoteAddress = string;
type HostNodeTestFindNodeDataHostNodeTestFindNodeType = string;
type HostNodeTestFindNodeDataHostNodeTestFindNodeIsAvailable = boolean;
type HostNodeTestFindNodeDataHostNodeTestFindNodeDaemonVersion = string;

useMutationEditCreateHostNode.Document = gql`
    mutation editCreateHostNode($data: HostNodeEditInput!) {
        host_node_edit(data: $data) {
            id
            name
            section
            remoteAddress
            type
            deletable
            hostNodeFilterKey
            maxInstances
            freeInstances
            isAvailable
            forcePublicBackupTranfer
            meta
            daemonVersion
        }
    }
` as DocumentNode;

export function useMutationEditCreateHostNode(
    options?: MutationHookOptions<
        EditCreateHostNodeData,
        EditCreateHostNodeVariables
    >
): MutationHookFn<EditCreateHostNodeData, EditCreateHostNodeVariables> {
    return useMutation<EditCreateHostNodeData, EditCreateHostNodeVariables>(
        useMutationEditCreateHostNode.Document,
        { ...mutationDefaultOptions, ...options }
    ) as any;
}

export type EditCreateHostNodeVariables = {
    data: EditCreateHostNodeVariablesData;
};

type EditCreateHostNodeVariablesData = HostNodeEditInput;

export type EditCreateHostNodeData = {
    host_node_edit: EditCreateHostNodeDataHostNodeEdit;
};

type EditCreateHostNodeDataHostNodeEdit = {
    __typename?: 'HostNode';
    id: EditCreateHostNodeDataHostNodeEditId;
    name: EditCreateHostNodeDataHostNodeEditName;
    section: EditCreateHostNodeDataHostNodeEditSection;
    remoteAddress: EditCreateHostNodeDataHostNodeEditRemoteAddress;
    type: EditCreateHostNodeDataHostNodeEditType;
    deletable: EditCreateHostNodeDataHostNodeEditDeletable;
    hostNodeFilterKey?: Nullable<EditCreateHostNodeDataHostNodeEditHostNodeFilterKey>;
    maxInstances: EditCreateHostNodeDataHostNodeEditMaxInstances;
    freeInstances: EditCreateHostNodeDataHostNodeEditFreeInstances;
    isAvailable: EditCreateHostNodeDataHostNodeEditIsAvailable;
    forcePublicBackupTranfer: EditCreateHostNodeDataHostNodeEditForcePublicBackupTranfer;
    meta: EditCreateHostNodeDataHostNodeEditMeta;
    daemonVersion?: Nullable<EditCreateHostNodeDataHostNodeEditDaemonVersion>;
};

type EditCreateHostNodeDataHostNodeEditId = string;
type EditCreateHostNodeDataHostNodeEditName = string;
type EditCreateHostNodeDataHostNodeEditSection = number;
type EditCreateHostNodeDataHostNodeEditRemoteAddress = string;
type EditCreateHostNodeDataHostNodeEditType = string;
type EditCreateHostNodeDataHostNodeEditDeletable = boolean;
type EditCreateHostNodeDataHostNodeEditHostNodeFilterKey = string;
type EditCreateHostNodeDataHostNodeEditMaxInstances = number;
type EditCreateHostNodeDataHostNodeEditFreeInstances = number;
type EditCreateHostNodeDataHostNodeEditIsAvailable = boolean;
type EditCreateHostNodeDataHostNodeEditForcePublicBackupTranfer = boolean;
type EditCreateHostNodeDataHostNodeEditMeta = any;
type EditCreateHostNodeDataHostNodeEditDaemonVersion = string;

useMutationDeleteHostNodeById.Document = gql`
    mutation deleteHostNodeById($id: ID!) {
        host_node_delete(id: $id)
    }
` as DocumentNode;

export function useMutationDeleteHostNodeById(
    options?: MutationHookOptions<
        DeleteHostNodeByIdData,
        DeleteHostNodeByIdVariables
    >
): MutationHookFn<DeleteHostNodeByIdData, DeleteHostNodeByIdVariables> {
    return useMutation<DeleteHostNodeByIdData, DeleteHostNodeByIdVariables>(
        useMutationDeleteHostNodeById.Document,
        { ...mutationDefaultOptions, ...options }
    ) as any;
}

export type DeleteHostNodeByIdVariables = {
    id: DeleteHostNodeByIdVariablesId;
};

type DeleteHostNodeByIdVariablesId = string;

export type DeleteHostNodeByIdData = {
    host_node_delete: DeleteHostNodeByIdDataHostNodeDelete;
};

type DeleteHostNodeByIdDataHostNodeDelete = boolean;

useMutationHostNodeUpdateDaemon.Document = gql`
    mutation hostNodeUpdateDaemon(
        $version: String
        $hostNodeId: ID!
        $sshUsername: String!
        $sshPassword: String
        $sshRsaKey: String
    ) {
        hostNodeUpdateDaemon(
            version: $version
            hostNodeId: $hostNodeId
            sshUsername: $sshUsername
            sshPassword: $sshPassword
            sshRsaKey: $sshRsaKey
        )
    }
` as DocumentNode;

export function useMutationHostNodeUpdateDaemon(
    options?: MutationHookOptions<
        HostNodeUpdateDaemonData,
        HostNodeUpdateDaemonVariables
    >
): MutationHookFn<HostNodeUpdateDaemonData, HostNodeUpdateDaemonVariables> {
    return useMutation<HostNodeUpdateDaemonData, HostNodeUpdateDaemonVariables>(
        useMutationHostNodeUpdateDaemon.Document,
        { ...mutationDefaultOptions, ...options }
    ) as any;
}

export type HostNodeUpdateDaemonVariables = {
    version?: Nullable<HostNodeUpdateDaemonVariablesVersion>;
    hostNodeId: HostNodeUpdateDaemonVariablesHostNodeId;
    sshUsername: HostNodeUpdateDaemonVariablesSshUsername;
    sshPassword?: Nullable<HostNodeUpdateDaemonVariablesSshPassword>;
    sshRsaKey?: Nullable<HostNodeUpdateDaemonVariablesSshRsaKey>;
};

type HostNodeUpdateDaemonVariablesVersion = string;
type HostNodeUpdateDaemonVariablesHostNodeId = string;
type HostNodeUpdateDaemonVariablesSshUsername = string;
type HostNodeUpdateDaemonVariablesSshPassword = string;
type HostNodeUpdateDaemonVariablesSshRsaKey = string;

export type HostNodeUpdateDaemonData = {
    hostNodeUpdateDaemon: HostNodeUpdateDaemonDataHostNodeUpdateDaemon;
};

type HostNodeUpdateDaemonDataHostNodeUpdateDaemon = string;

/*,
 * Fragments from undefined,
 */

/*,
 * Operations from undefined,
 */

useQueryHostNodeTasksMy.Document = gql`
    query hostNodeTasksMy($take: Int) {
        hostNodeTasksMy(take: $take) {
            id
            update
            running
            finish
            error
            label
            gameserver {
                id
                name
            }
        }
    }
` as DocumentNode;

export function useQueryHostNodeTasksMy(
    options?: QueryHookOptions<HostNodeTasksMyData, HostNodeTasksMyVariables>
) {
    const result = useQuery<HostNodeTasksMyData, HostNodeTasksMyVariables>(
        useQueryHostNodeTasksMy.Document,
        { ...queryDefaultOptions, ...options }
    );
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryHostNodeTasksMy.lazy = function (
    options?: LazyQueryHookOptions<
        HostNodeTasksMyData,
        HostNodeTasksMyVariables
    >
) {
    return useLazyQuery(useQueryHostNodeTasksMy.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type HostNodeTasksMyVariables = {
    take?: Nullable<HostNodeTasksMyVariablesTake>;
};

type HostNodeTasksMyVariablesTake = number;

export type HostNodeTasksMyData = {
    hostNodeTasksMy: Array<HostNodeTasksMyDataHostNodeTasksMy>;
};

type HostNodeTasksMyDataHostNodeTasksMy = {
    __typename?: 'HostNodeTask';
    id: HostNodeTasksMyDataHostNodeTasksMyId;
    update: HostNodeTasksMyDataHostNodeTasksMyUpdate;
    running: HostNodeTasksMyDataHostNodeTasksMyRunning;
    finish: HostNodeTasksMyDataHostNodeTasksMyFinish;
    error: HostNodeTasksMyDataHostNodeTasksMyError;
    label: HostNodeTasksMyDataHostNodeTasksMyLabel;
    gameserver?: Nullable<HostNodeTasksMyDataHostNodeTasksMyGameserver>;
};

type HostNodeTasksMyDataHostNodeTasksMyId = string;
type HostNodeTasksMyDataHostNodeTasksMyUpdate = any;
type HostNodeTasksMyDataHostNodeTasksMyRunning = boolean;
type HostNodeTasksMyDataHostNodeTasksMyFinish = boolean;
type HostNodeTasksMyDataHostNodeTasksMyError = boolean;
type HostNodeTasksMyDataHostNodeTasksMyLabel = string;
type HostNodeTasksMyDataHostNodeTasksMyGameserver = {
    __typename?: 'ProductGameserver';
    id: HostNodeTasksMyDataHostNodeTasksMyGameserverId;
    name: HostNodeTasksMyDataHostNodeTasksMyGameserverName;
};

type HostNodeTasksMyDataHostNodeTasksMyGameserverId = string;
type HostNodeTasksMyDataHostNodeTasksMyGameserverName = string;

useQueryHostNodeTaskById.Document = gql`
    query hostNodeTaskById($id: ID!) {
        hostNodeTaskById(id: $id) {
            id
            update
            running
            finish
            error
            label
            gameserver {
                id
                name
            }
        }
    }
` as DocumentNode;

export function useQueryHostNodeTaskById(
    options?: QueryHookOptions<HostNodeTaskByIdData, HostNodeTaskByIdVariables>
) {
    const result = useQuery<HostNodeTaskByIdData, HostNodeTaskByIdVariables>(
        useQueryHostNodeTaskById.Document,
        { ...queryDefaultOptions, ...options }
    );
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryHostNodeTaskById.lazy = function (
    options?: LazyQueryHookOptions<
        HostNodeTaskByIdData,
        HostNodeTaskByIdVariables
    >
) {
    return useLazyQuery(useQueryHostNodeTaskById.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type HostNodeTaskByIdVariables = {
    id: HostNodeTaskByIdVariablesId;
};

type HostNodeTaskByIdVariablesId = string;

export type HostNodeTaskByIdData = {
    hostNodeTaskById: HostNodeTaskByIdDataHostNodeTaskById;
};

type HostNodeTaskByIdDataHostNodeTaskById = {
    __typename?: 'HostNodeTask';
    id: HostNodeTaskByIdDataHostNodeTaskByIdId;
    update: HostNodeTaskByIdDataHostNodeTaskByIdUpdate;
    running: HostNodeTaskByIdDataHostNodeTaskByIdRunning;
    finish: HostNodeTaskByIdDataHostNodeTaskByIdFinish;
    error: HostNodeTaskByIdDataHostNodeTaskByIdError;
    label: HostNodeTaskByIdDataHostNodeTaskByIdLabel;
    gameserver?: Nullable<HostNodeTaskByIdDataHostNodeTaskByIdGameserver>;
};

type HostNodeTaskByIdDataHostNodeTaskByIdId = string;
type HostNodeTaskByIdDataHostNodeTaskByIdUpdate = any;
type HostNodeTaskByIdDataHostNodeTaskByIdRunning = boolean;
type HostNodeTaskByIdDataHostNodeTaskByIdFinish = boolean;
type HostNodeTaskByIdDataHostNodeTaskByIdError = boolean;
type HostNodeTaskByIdDataHostNodeTaskByIdLabel = string;
type HostNodeTaskByIdDataHostNodeTaskByIdGameserver = {
    __typename?: 'ProductGameserver';
    id: HostNodeTaskByIdDataHostNodeTaskByIdGameserverId;
    name: HostNodeTaskByIdDataHostNodeTaskByIdGameserverName;
};

type HostNodeTaskByIdDataHostNodeTaskByIdGameserverId = string;
type HostNodeTaskByIdDataHostNodeTaskByIdGameserverName = string;

useQueryHostNodeTaskIsRunning.Document = gql`
    query hostNodeTaskIsRunning($identifier: ID!) {
        host_node_task_running(identifier: $identifier)
    }
` as DocumentNode;

export function useQueryHostNodeTaskIsRunning(
    options?: QueryHookOptions<
        HostNodeTaskIsRunningData,
        HostNodeTaskIsRunningVariables
    >
) {
    const result = useQuery<
        HostNodeTaskIsRunningData,
        HostNodeTaskIsRunningVariables
    >(useQueryHostNodeTaskIsRunning.Document, {
        ...queryDefaultOptions,
        ...options,
    });
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryHostNodeTaskIsRunning.lazy = function (
    options?: LazyQueryHookOptions<
        HostNodeTaskIsRunningData,
        HostNodeTaskIsRunningVariables
    >
) {
    return useLazyQuery(useQueryHostNodeTaskIsRunning.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type HostNodeTaskIsRunningVariables = {
    identifier: HostNodeTaskIsRunningVariablesIdentifier;
};

type HostNodeTaskIsRunningVariablesIdentifier = string;

export type HostNodeTaskIsRunningData = {
    host_node_task_running: HostNodeTaskIsRunningDataHostNodeTaskRunning;
};

type HostNodeTaskIsRunningDataHostNodeTaskRunning = boolean;

/*,
 * Fragments from undefined,
 */
export type PdfTemplatePart = {
    id: PdfTemplatePartId;
    templateContent: PdfTemplatePartTemplateContent;
    template: PdfTemplatePartTemplate;
    create: PdfTemplatePartCreate;
    update: PdfTemplatePartUpdate;
    templateFile: PdfTemplatePartTemplateFile;
};

type PdfTemplatePartId = string;
type PdfTemplatePartTemplateContent = string;
type PdfTemplatePartTemplate = string;
type PdfTemplatePartCreate = any;
type PdfTemplatePartUpdate = any;
type PdfTemplatePartTemplateFile = string;
const _gql_PdfTemplatePart = gql`
    fragment PdfTemplatePart on PdfTemplate {
        id
        templateContent
        template
        create
        update
        templateFile
    }
`;

/*,
 * Operations from undefined,
 */

useQueryGetPdfTemplate.Document = gql`
    query getPdfTemplate($id: ID!) {
        pdf_template(id: $id) {
            ...PdfTemplatePart
        }
    }
    ${_gql_PdfTemplatePart}
` as DocumentNode;

export function useQueryGetPdfTemplate(
    options?: QueryHookOptions<GetPdfTemplateData, GetPdfTemplateVariables>
) {
    const result = useQuery<GetPdfTemplateData, GetPdfTemplateVariables>(
        useQueryGetPdfTemplate.Document,
        { ...queryDefaultOptions, ...options }
    );
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryGetPdfTemplate.lazy = function (
    options?: LazyQueryHookOptions<GetPdfTemplateData, GetPdfTemplateVariables>
) {
    return useLazyQuery(useQueryGetPdfTemplate.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type GetPdfTemplateVariables = {
    id: GetPdfTemplateVariablesId;
};

type GetPdfTemplateVariablesId = string;

export type GetPdfTemplateData = {
    pdf_template: GetPdfTemplateDataPdfTemplate;
};

type GetPdfTemplateDataPdfTemplate = PdfTemplatePart & {
    __typename?: 'PdfTemplate';
};

useQueryPdfTemplates.Document = gql`
    query pdfTemplates($filter: CordFilter) {
        pdfTemplates(filter: $filter) {
            edges {
                ...PdfTemplatePart
            }
            pageInfo {
                totalCount
            }
        }
    }
    ${_gql_PdfTemplatePart}
` as DocumentNode;

export function useQueryPdfTemplates(
    options?: QueryHookOptions<PdfTemplatesData, PdfTemplatesVariables>
) {
    const result = useQuery<PdfTemplatesData, PdfTemplatesVariables>(
        useQueryPdfTemplates.Document,
        { ...queryDefaultOptions, ...options }
    );
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryPdfTemplates.lazy = function (
    options?: LazyQueryHookOptions<PdfTemplatesData, PdfTemplatesVariables>
) {
    return useLazyQuery(useQueryPdfTemplates.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type PdfTemplatesVariables = {
    filter?: Nullable<PdfTemplatesVariablesFilter>;
};

type PdfTemplatesVariablesFilter = CordFilter;

export type PdfTemplatesData = {
    pdfTemplates: PdfTemplatesDataPdfTemplates;
};

type PdfTemplatesDataPdfTemplates = {
    __typename?: 'PdfTemplateResultMany';
    edges: Array<PdfTemplatesDataPdfTemplatesEdges>;
    pageInfo: PdfTemplatesDataPdfTemplatesPageInfo;
};

type PdfTemplatesDataPdfTemplatesEdges = PdfTemplatePart & {
    __typename?: 'PdfTemplate';
};

type PdfTemplatesDataPdfTemplatesPageInfo = {
    __typename?: 'CordPageInfo';
    totalCount: PdfTemplatesDataPdfTemplatesPageInfoTotalCount;
};

type PdfTemplatesDataPdfTemplatesPageInfoTotalCount = number;

useMutationDeletePdfTemplate.Document = gql`
    mutation deletePdfTemplate($id: ID!) {
        pdf_template_delete(id: $id)
    }
` as DocumentNode;

export function useMutationDeletePdfTemplate(
    options?: MutationHookOptions<
        DeletePdfTemplateData,
        DeletePdfTemplateVariables
    >
): MutationHookFn<DeletePdfTemplateData, DeletePdfTemplateVariables> {
    return useMutation<DeletePdfTemplateData, DeletePdfTemplateVariables>(
        useMutationDeletePdfTemplate.Document,
        { ...mutationDefaultOptions, ...options }
    ) as any;
}

export type DeletePdfTemplateVariables = {
    id: DeletePdfTemplateVariablesId;
};

type DeletePdfTemplateVariablesId = string;

export type DeletePdfTemplateData = {
    pdf_template_delete: DeletePdfTemplateDataPdfTemplateDelete;
};

type DeletePdfTemplateDataPdfTemplateDelete = boolean;

useMutationEditPdfTemplate.Document = gql`
    mutation editPdfTemplate(
        $id: ID
        $templateContent: String
        $template: String!
    ) {
        pdf_template_edit(
            data: {
                id: $id
                templateContent: $templateContent
                template: $template
            }
        ) {
            ...PdfTemplatePart
        }
    }
    ${_gql_PdfTemplatePart}
` as DocumentNode;

export function useMutationEditPdfTemplate(
    options?: MutationHookOptions<EditPdfTemplateData, EditPdfTemplateVariables>
): MutationHookFn<EditPdfTemplateData, EditPdfTemplateVariables> {
    return useMutation<EditPdfTemplateData, EditPdfTemplateVariables>(
        useMutationEditPdfTemplate.Document,
        { ...mutationDefaultOptions, ...options }
    ) as any;
}

export type EditPdfTemplateVariables = {
    id?: Nullable<EditPdfTemplateVariablesId>;
    templateContent?: Nullable<EditPdfTemplateVariablesTemplateContent>;
    template: EditPdfTemplateVariablesTemplate;
};

type EditPdfTemplateVariablesId = string;
type EditPdfTemplateVariablesTemplateContent = string;
type EditPdfTemplateVariablesTemplate = string;

export type EditPdfTemplateData = {
    pdf_template_edit: EditPdfTemplateDataPdfTemplateEdit;
};

type EditPdfTemplateDataPdfTemplateEdit = PdfTemplatePart & {
    __typename?: 'PdfTemplate';
};

/*,
 * Fragments from undefined,
 */
export type ProductPart = {
    id: ProductPartId;
    expire?: Nullable<ProductPartExpire>;
    autoRenewIntervalId?: Nullable<ProductPartAutoRenewIntervalId>;
    gameservers: Array<ProductPartGameservers>;
    vservers: Array<ProductPartVservers>;
    user: ProductPartUser;
    transactions: Array<ProductPartTransactions>;
};

type ProductPartId = string;
type ProductPartExpire = any;
type ProductPartAutoRenewIntervalId = string;
type ProductPartGameservers = {
    __typename?: 'ProductGameserver';
    id: ProductPartGameserversId;
};

type ProductPartGameserversId = string;
type ProductPartVservers = {
    __typename?: 'ProductVserver';
    id: ProductPartVserversId;
};

type ProductPartVserversId = string;
type ProductPartUser = {
    __typename?: 'User';
    id: ProductPartUserId;
    publicName: ProductPartUserPublicName;
};

type ProductPartUserId = string;
type ProductPartUserPublicName = string;
type ProductPartTransactions = {
    __typename?: 'FinanceTransaction';
    id: ProductPartTransactionsId;
};

type ProductPartTransactionsId = string;
const _gql_ProductPart = gql`
    fragment ProductPart on Product {
        id
        expire
        autoRenewIntervalId
        gameservers {
            id
        }
        vservers {
            id
        }
        user {
            id
            publicName
        }
        transactions {
            id
        }
    }
`;

/*,
 * Operations from undefined,
 */

useMutationProductSetAutorenewInterval.Document = gql`
    mutation productSetAutorenewInterval($id: ID!, $intervalId: ID) {
        productSetAutorenewInterval(id: $id, intervalId: $intervalId) {
            ...ProductPart
        }
    }
    ${_gql_ProductPart}
` as DocumentNode;

export function useMutationProductSetAutorenewInterval(
    options?: MutationHookOptions<
        ProductSetAutorenewIntervalData,
        ProductSetAutorenewIntervalVariables
    >
): MutationHookFn<
    ProductSetAutorenewIntervalData,
    ProductSetAutorenewIntervalVariables
> {
    return useMutation<
        ProductSetAutorenewIntervalData,
        ProductSetAutorenewIntervalVariables
    >(useMutationProductSetAutorenewInterval.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type ProductSetAutorenewIntervalVariables = {
    id: ProductSetAutorenewIntervalVariablesId;
    intervalId?: Nullable<ProductSetAutorenewIntervalVariablesIntervalId>;
};

type ProductSetAutorenewIntervalVariablesId = string;
type ProductSetAutorenewIntervalVariablesIntervalId = string;

export type ProductSetAutorenewIntervalData = {
    productSetAutorenewInterval: ProductSetAutorenewIntervalDataProductSetAutorenewInterval;
};

type ProductSetAutorenewIntervalDataProductSetAutorenewInterval = ProductPart & {
    __typename?: 'Product';
};

useQueryProducts.Document = gql`
    query Products($filter: CordFilter) {
        products(filter: $filter) {
            edges {
                ...ProductPart
            }
            pageInfo {
                totalCount
            }
        }
    }
    ${_gql_ProductPart}
` as DocumentNode;

export function useQueryProducts(
    options?: QueryHookOptions<ProductsData, ProductsVariables>
) {
    const result = useQuery<ProductsData, ProductsVariables>(
        useQueryProducts.Document,
        { ...queryDefaultOptions, ...options }
    );
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryProducts.lazy = function (
    options?: LazyQueryHookOptions<ProductsData, ProductsVariables>
) {
    return useLazyQuery(useQueryProducts.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type ProductsVariables = {
    filter?: Nullable<ProductsVariablesFilter>;
};

type ProductsVariablesFilter = CordFilter;

export type ProductsData = {
    products: ProductsDataProducts;
};

type ProductsDataProducts = {
    __typename?: 'ProductResultMany';
    edges: Array<ProductsDataProductsEdges>;
    pageInfo: ProductsDataProductsPageInfo;
};

type ProductsDataProductsEdges = ProductPart & {
    __typename?: 'Product';
};

type ProductsDataProductsPageInfo = {
    __typename?: 'CordPageInfo';
    totalCount: ProductsDataProductsPageInfoTotalCount;
};

type ProductsDataProductsPageInfoTotalCount = number;

useQueryProductById.Document = gql`
    query ProductById($id: ID!) {
        productById(id: $id) {
            ...ProductPart
        }
    }
    ${_gql_ProductPart}
` as DocumentNode;

export function useQueryProductById(
    options?: QueryHookOptions<ProductByIdData, ProductByIdVariables>
) {
    const result = useQuery<ProductByIdData, ProductByIdVariables>(
        useQueryProductById.Document,
        { ...queryDefaultOptions, ...options }
    );
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryProductById.lazy = function (
    options?: LazyQueryHookOptions<ProductByIdData, ProductByIdVariables>
) {
    return useLazyQuery(useQueryProductById.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type ProductByIdVariables = {
    id: ProductByIdVariablesId;
};

type ProductByIdVariablesId = string;

export type ProductByIdData = {
    productById: ProductByIdDataProductById;
};

type ProductByIdDataProductById = ProductPart & {
    __typename?: 'Product';
};

useQueryProductById2.Document = gql`
    query ProductById2($id: ID!) {
        productById(id: $id) {
            ...ProductPart
            availablePeriods {
                id
                days
            }
        }
    }
    ${_gql_ProductPart}
` as DocumentNode;

export function useQueryProductById2(
    options?: QueryHookOptions<ProductById2Data, ProductById2Variables>
) {
    const result = useQuery<ProductById2Data, ProductById2Variables>(
        useQueryProductById2.Document,
        { ...queryDefaultOptions, ...options }
    );
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryProductById2.lazy = function (
    options?: LazyQueryHookOptions<ProductById2Data, ProductById2Variables>
) {
    return useLazyQuery(useQueryProductById2.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type ProductById2Variables = {
    id: ProductById2VariablesId;
};

type ProductById2VariablesId = string;

export type ProductById2Data = {
    productById: ProductById2DataProductById;
};

type ProductById2DataProductById = ProductPart & {
    __typename?: 'Product';
    availablePeriods: Array<ProductById2DataProductByIdAvailablePeriods>;
};

type ProductById2DataProductByIdAvailablePeriods = {
    __typename?: 'ProductTemplateExtendPeriod';
    id: ProductById2DataProductByIdAvailablePeriodsId;
    days: ProductById2DataProductByIdAvailablePeriodsDays;
};

type ProductById2DataProductByIdAvailablePeriodsId = string;
type ProductById2DataProductByIdAvailablePeriodsDays = number;

useMutationProductEdit.Document = gql`
    mutation productEdit($data: ProductEditInput!) {
        productEdit(data: $data) {
            ...ProductPart
        }
    }
    ${_gql_ProductPart}
` as DocumentNode;

export function useMutationProductEdit(
    options?: MutationHookOptions<ProductEditData, ProductEditVariables>
): MutationHookFn<ProductEditData, ProductEditVariables> {
    return useMutation<ProductEditData, ProductEditVariables>(
        useMutationProductEdit.Document,
        { ...mutationDefaultOptions, ...options }
    ) as any;
}

export type ProductEditVariables = {
    data: ProductEditVariablesData;
};

type ProductEditVariablesData = ProductEditInput;

export type ProductEditData = {
    productEdit: ProductEditDataProductEdit;
};

type ProductEditDataProductEdit = ProductPart & {
    __typename?: 'Product';
};

/*,
 * Fragments from undefined,
 */

/*,
 * Operations from undefined,
 */

useQueryProductGameserverFsReadIndex.Document = gql`
    query productGameserverFsReadIndex(
        $gameserverId: ID!
        $reloadIndex: Boolean
    ) {
        productGameserverFsReadIndex(
            gameserverId: $gameserverId
            reloadIndex: $reloadIndex
        )
    }
` as DocumentNode;

export function useQueryProductGameserverFsReadIndex(
    options?: QueryHookOptions<
        ProductGameserverFsReadIndexData,
        ProductGameserverFsReadIndexVariables
    >
) {
    const result = useQuery<
        ProductGameserverFsReadIndexData,
        ProductGameserverFsReadIndexVariables
    >(useQueryProductGameserverFsReadIndex.Document, {
        ...queryDefaultOptions,
        ...options,
    });
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryProductGameserverFsReadIndex.lazy = function (
    options?: LazyQueryHookOptions<
        ProductGameserverFsReadIndexData,
        ProductGameserverFsReadIndexVariables
    >
) {
    return useLazyQuery(useQueryProductGameserverFsReadIndex.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type ProductGameserverFsReadIndexVariables = {
    gameserverId: ProductGameserverFsReadIndexVariablesGameserverId;
    reloadIndex?: Nullable<ProductGameserverFsReadIndexVariablesReloadIndex>;
};

type ProductGameserverFsReadIndexVariablesGameserverId = string;
type ProductGameserverFsReadIndexVariablesReloadIndex = boolean;

export type ProductGameserverFsReadIndexData = {
    productGameserverFsReadIndex: Array<ProductGameserverFsReadIndexDataProductGameserverFsReadIndex>;
};

type ProductGameserverFsReadIndexDataProductGameserverFsReadIndex = string;

useQueryProductGameserverFsRead.Document = gql`
    query productGameserverFsRead($gameserverId: ID!, $file: String!) {
        productGameserverFsRead(gameserverId: $gameserverId, file: $file)
    }
` as DocumentNode;

export function useQueryProductGameserverFsRead(
    options?: QueryHookOptions<
        ProductGameserverFsReadData,
        ProductGameserverFsReadVariables
    >
) {
    const result = useQuery<
        ProductGameserverFsReadData,
        ProductGameserverFsReadVariables
    >(useQueryProductGameserverFsRead.Document, {
        ...queryDefaultOptions,
        ...options,
    });
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryProductGameserverFsRead.lazy = function (
    options?: LazyQueryHookOptions<
        ProductGameserverFsReadData,
        ProductGameserverFsReadVariables
    >
) {
    return useLazyQuery(useQueryProductGameserverFsRead.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type ProductGameserverFsReadVariables = {
    gameserverId: ProductGameserverFsReadVariablesGameserverId;
    file: ProductGameserverFsReadVariablesFile;
};

type ProductGameserverFsReadVariablesGameserverId = string;
type ProductGameserverFsReadVariablesFile = string;

export type ProductGameserverFsReadData = {
    productGameserverFsRead: ProductGameserverFsReadDataProductGameserverFsRead;
};

type ProductGameserverFsReadDataProductGameserverFsRead = string;

useMutationProductGameserverFsWrite.Document = gql`
    mutation productGameserverFsWrite(
        $gameserverId: ID!
        $file: String!
        $base64Content: String!
    ) {
        productGameserverFsWrite(
            gameserverId: $gameserverId
            file: $file
            base64Content: $base64Content
        )
    }
` as DocumentNode;

export function useMutationProductGameserverFsWrite(
    options?: MutationHookOptions<
        ProductGameserverFsWriteData,
        ProductGameserverFsWriteVariables
    >
): MutationHookFn<
    ProductGameserverFsWriteData,
    ProductGameserverFsWriteVariables
> {
    return useMutation<
        ProductGameserverFsWriteData,
        ProductGameserverFsWriteVariables
    >(useMutationProductGameserverFsWrite.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type ProductGameserverFsWriteVariables = {
    gameserverId: ProductGameserverFsWriteVariablesGameserverId;
    file: ProductGameserverFsWriteVariablesFile;
    base64Content: ProductGameserverFsWriteVariablesBase64Content;
};

type ProductGameserverFsWriteVariablesGameserverId = string;
type ProductGameserverFsWriteVariablesFile = string;
type ProductGameserverFsWriteVariablesBase64Content = string;

export type ProductGameserverFsWriteData = {
    productGameserverFsWrite: ProductGameserverFsWriteDataProductGameserverFsWrite;
};

type ProductGameserverFsWriteDataProductGameserverFsWrite = boolean;

/*,
 * Fragments from undefined,
 */

/*,
 * Operations from undefined,
 */

useMutationCreateProductGameserverScript.Document = gql`
    mutation createProductGameserverScript(
        $title: String!
        $script: String!
        $templateId: ID!
    ) {
        product_gameserver_script_new(
            data: { title: $title, script: $script, templateId: $templateId }
        ) {
            id
            title
            script
        }
    }
` as DocumentNode;

export function useMutationCreateProductGameserverScript(
    options?: MutationHookOptions<
        CreateProductGameserverScriptData,
        CreateProductGameserverScriptVariables
    >
): MutationHookFn<
    CreateProductGameserverScriptData,
    CreateProductGameserverScriptVariables
> {
    return useMutation<
        CreateProductGameserverScriptData,
        CreateProductGameserverScriptVariables
    >(useMutationCreateProductGameserverScript.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type CreateProductGameserverScriptVariables = {
    title: CreateProductGameserverScriptVariablesTitle;
    script: CreateProductGameserverScriptVariablesScript;
    templateId: CreateProductGameserverScriptVariablesTemplateId;
};

type CreateProductGameserverScriptVariablesTitle = string;
type CreateProductGameserverScriptVariablesScript = string;
type CreateProductGameserverScriptVariablesTemplateId = string;

export type CreateProductGameserverScriptData = {
    product_gameserver_script_new: CreateProductGameserverScriptDataProductGameserverScriptNew;
};

type CreateProductGameserverScriptDataProductGameserverScriptNew = {
    __typename?: 'ProductGameserverScript';
    id: CreateProductGameserverScriptDataProductGameserverScriptNewId;
    title: CreateProductGameserverScriptDataProductGameserverScriptNewTitle;
    script: CreateProductGameserverScriptDataProductGameserverScriptNewScript;
};

type CreateProductGameserverScriptDataProductGameserverScriptNewId = string;
type CreateProductGameserverScriptDataProductGameserverScriptNewTitle = string;
type CreateProductGameserverScriptDataProductGameserverScriptNewScript = string;

/*,
 * Fragments from undefined,
 */
export type RolePart = { id: RolePartId; name: RolePartName };

type RolePartId = string;
type RolePartName = string;
const _gql_RolePart = gql`
    fragment RolePart on Role {
        id
        name
    }
`;

/*,
 * Operations from undefined,
 */

useQueryRoles.Document = gql`
    query roles($filter: CordFilter) {
        roles(filter: $filter) {
            edges {
                ...RolePart
            }
            pageInfo {
                totalCount
            }
        }
    }
    ${_gql_RolePart}
` as DocumentNode;

export function useQueryRoles(
    options?: QueryHookOptions<RolesData, RolesVariables>
) {
    const result = useQuery<RolesData, RolesVariables>(useQueryRoles.Document, {
        ...queryDefaultOptions,
        ...options,
    });
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryRoles.lazy = function (
    options?: LazyQueryHookOptions<RolesData, RolesVariables>
) {
    return useLazyQuery(useQueryRoles.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type RolesVariables = {
    filter?: Nullable<RolesVariablesFilter>;
};

type RolesVariablesFilter = CordFilter;

export type RolesData = {
    roles: RolesDataRoles;
};

type RolesDataRoles = {
    __typename?: 'RoleResultMany';
    edges: Array<RolesDataRolesEdges>;
    pageInfo: RolesDataRolesPageInfo;
};

type RolesDataRolesEdges = RolePart & {
    __typename?: 'Role';
};

type RolesDataRolesPageInfo = {
    __typename?: 'CordPageInfo';
    totalCount: RolesDataRolesPageInfoTotalCount;
};

type RolesDataRolesPageInfoTotalCount = number;

useQueryRoleById.Document = gql`
    query roleById($id: ID!) {
        roleById(id: $id) {
            ...RolePart
            acls {
                id
                acl
            }
            users {
                id
            }
        }
    }
    ${_gql_RolePart}
` as DocumentNode;

export function useQueryRoleById(
    options?: QueryHookOptions<RoleByIdData, RoleByIdVariables>
) {
    const result = useQuery<RoleByIdData, RoleByIdVariables>(
        useQueryRoleById.Document,
        { ...queryDefaultOptions, ...options }
    );
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryRoleById.lazy = function (
    options?: LazyQueryHookOptions<RoleByIdData, RoleByIdVariables>
) {
    return useLazyQuery(useQueryRoleById.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type RoleByIdVariables = {
    id: RoleByIdVariablesId;
};

type RoleByIdVariablesId = string;

export type RoleByIdData = {
    roleById: RoleByIdDataRoleById;
};

type RoleByIdDataRoleById = RolePart & {
    __typename?: 'Role';
    acls: Array<RoleByIdDataRoleByIdAcls>;
    users: Array<RoleByIdDataRoleByIdUsers>;
};

type RoleByIdDataRoleByIdAcls = {
    __typename?: 'Acl';
    id: RoleByIdDataRoleByIdAclsId;
    acl: RoleByIdDataRoleByIdAclsAcl;
};

type RoleByIdDataRoleByIdAclsId = string;
type RoleByIdDataRoleByIdAclsAcl = string;
type RoleByIdDataRoleByIdUsers = {
    __typename?: 'User';
    id: RoleByIdDataRoleByIdUsersId;
};

type RoleByIdDataRoleByIdUsersId = string;

useMutationEditRoleRole.Document = gql`
    mutation editRoleRole($id: ID, $name: String!) {
        role_role_edit(data: { id: $id, name: $name }) {
            ...RolePart
            acls {
                id
                acl
            }

            users {
                id
            }
        }
    }
    ${_gql_RolePart}
` as DocumentNode;

export function useMutationEditRoleRole(
    options?: MutationHookOptions<EditRoleRoleData, EditRoleRoleVariables>
): MutationHookFn<EditRoleRoleData, EditRoleRoleVariables> {
    return useMutation<EditRoleRoleData, EditRoleRoleVariables>(
        useMutationEditRoleRole.Document,
        { ...mutationDefaultOptions, ...options }
    ) as any;
}

export type EditRoleRoleVariables = {
    id?: Nullable<EditRoleRoleVariablesId>;
    name: EditRoleRoleVariablesName;
};

type EditRoleRoleVariablesId = string;
type EditRoleRoleVariablesName = string;

export type EditRoleRoleData = {
    role_role_edit: EditRoleRoleDataRoleRoleEdit;
};

type EditRoleRoleDataRoleRoleEdit = RolePart & {
    __typename?: 'Role';
    acls: Array<EditRoleRoleDataRoleRoleEditAcls>;
    users: Array<EditRoleRoleDataRoleRoleEditUsers>;
};

type EditRoleRoleDataRoleRoleEditAcls = {
    __typename?: 'Acl';
    id: EditRoleRoleDataRoleRoleEditAclsId;
    acl: EditRoleRoleDataRoleRoleEditAclsAcl;
};

type EditRoleRoleDataRoleRoleEditAclsId = string;
type EditRoleRoleDataRoleRoleEditAclsAcl = string;
type EditRoleRoleDataRoleRoleEditUsers = {
    __typename?: 'User';
    id: EditRoleRoleDataRoleRoleEditUsersId;
};

type EditRoleRoleDataRoleRoleEditUsersId = string;

useMutationRoleUnAssignAcl.Document = gql`
    mutation roleUnAssignAcl($id: ID!, $aclsId: [ID!]!) {
        roleUnAssignAcl(id: $id, aclsId: $aclsId) {
            ...RolePart
            acls {
                id
                acl
            }
        }
    }
    ${_gql_RolePart}
` as DocumentNode;

export function useMutationRoleUnAssignAcl(
    options?: MutationHookOptions<RoleUnAssignAclData, RoleUnAssignAclVariables>
): MutationHookFn<RoleUnAssignAclData, RoleUnAssignAclVariables> {
    return useMutation<RoleUnAssignAclData, RoleUnAssignAclVariables>(
        useMutationRoleUnAssignAcl.Document,
        { ...mutationDefaultOptions, ...options }
    ) as any;
}

export type RoleUnAssignAclVariables = {
    id: RoleUnAssignAclVariablesId;
    aclsId: ReadonlyArray<RoleUnAssignAclVariablesAclsId>;
};

type RoleUnAssignAclVariablesId = string;
type RoleUnAssignAclVariablesAclsId = string;

export type RoleUnAssignAclData = {
    roleUnAssignAcl: RoleUnAssignAclDataRoleUnAssignAcl;
};

type RoleUnAssignAclDataRoleUnAssignAcl = RolePart & {
    __typename?: 'Role';
    acls: Array<RoleUnAssignAclDataRoleUnAssignAclAcls>;
};

type RoleUnAssignAclDataRoleUnAssignAclAcls = {
    __typename?: 'Acl';
    id: RoleUnAssignAclDataRoleUnAssignAclAclsId;
    acl: RoleUnAssignAclDataRoleUnAssignAclAclsAcl;
};

type RoleUnAssignAclDataRoleUnAssignAclAclsId = string;
type RoleUnAssignAclDataRoleUnAssignAclAclsAcl = string;

useMutationRoleAssignAcl.Document = gql`
    mutation roleAssignAcl($id: ID!, $aclsId: [ID!]!) {
        roleAssignAcl(id: $id, aclsId: $aclsId) {
            ...RolePart
            acls {
                id
                acl
            }

            users {
                id
            }
        }
    }
    ${_gql_RolePart}
` as DocumentNode;

export function useMutationRoleAssignAcl(
    options?: MutationHookOptions<RoleAssignAclData, RoleAssignAclVariables>
): MutationHookFn<RoleAssignAclData, RoleAssignAclVariables> {
    return useMutation<RoleAssignAclData, RoleAssignAclVariables>(
        useMutationRoleAssignAcl.Document,
        { ...mutationDefaultOptions, ...options }
    ) as any;
}

export type RoleAssignAclVariables = {
    id: RoleAssignAclVariablesId;
    aclsId: ReadonlyArray<RoleAssignAclVariablesAclsId>;
};

type RoleAssignAclVariablesId = string;
type RoleAssignAclVariablesAclsId = string;

export type RoleAssignAclData = {
    roleAssignAcl: RoleAssignAclDataRoleAssignAcl;
};

type RoleAssignAclDataRoleAssignAcl = RolePart & {
    __typename?: 'Role';
    acls: Array<RoleAssignAclDataRoleAssignAclAcls>;
    users: Array<RoleAssignAclDataRoleAssignAclUsers>;
};

type RoleAssignAclDataRoleAssignAclAcls = {
    __typename?: 'Acl';
    id: RoleAssignAclDataRoleAssignAclAclsId;
    acl: RoleAssignAclDataRoleAssignAclAclsAcl;
};

type RoleAssignAclDataRoleAssignAclAclsId = string;
type RoleAssignAclDataRoleAssignAclAclsAcl = string;
type RoleAssignAclDataRoleAssignAclUsers = {
    __typename?: 'User';
    id: RoleAssignAclDataRoleAssignAclUsersId;
};

type RoleAssignAclDataRoleAssignAclUsersId = string;

useMutationRoleAddUser.Document = gql`
    mutation roleAddUser($id: ID!, $userId: ID!) {
        roleAddUser(id: $id, userId: $userId) {
            ...RolePart
            acls {
                id
                acl
            }

            users {
                id
            }
        }
    }
    ${_gql_RolePart}
` as DocumentNode;

export function useMutationRoleAddUser(
    options?: MutationHookOptions<RoleAddUserData, RoleAddUserVariables>
): MutationHookFn<RoleAddUserData, RoleAddUserVariables> {
    return useMutation<RoleAddUserData, RoleAddUserVariables>(
        useMutationRoleAddUser.Document,
        { ...mutationDefaultOptions, ...options }
    ) as any;
}

export type RoleAddUserVariables = {
    id: RoleAddUserVariablesId;
    userId: RoleAddUserVariablesUserId;
};

type RoleAddUserVariablesId = string;
type RoleAddUserVariablesUserId = string;

export type RoleAddUserData = {
    roleAddUser: RoleAddUserDataRoleAddUser;
};

type RoleAddUserDataRoleAddUser = RolePart & {
    __typename?: 'Role';
    acls: Array<RoleAddUserDataRoleAddUserAcls>;
    users: Array<RoleAddUserDataRoleAddUserUsers>;
};

type RoleAddUserDataRoleAddUserAcls = {
    __typename?: 'Acl';
    id: RoleAddUserDataRoleAddUserAclsId;
    acl: RoleAddUserDataRoleAddUserAclsAcl;
};

type RoleAddUserDataRoleAddUserAclsId = string;
type RoleAddUserDataRoleAddUserAclsAcl = string;
type RoleAddUserDataRoleAddUserUsers = {
    __typename?: 'User';
    id: RoleAddUserDataRoleAddUserUsersId;
};

type RoleAddUserDataRoleAddUserUsersId = string;

useMutationRoleRemoveUser.Document = gql`
    mutation roleRemoveUser($id: ID!, $userId: ID!) {
        roleRemoveUser(id: $id, userId: $userId) {
            ...RolePart
            acls {
                id
                acl
            }

            users {
                id
            }
        }
    }
    ${_gql_RolePart}
` as DocumentNode;

export function useMutationRoleRemoveUser(
    options?: MutationHookOptions<RoleRemoveUserData, RoleRemoveUserVariables>
): MutationHookFn<RoleRemoveUserData, RoleRemoveUserVariables> {
    return useMutation<RoleRemoveUserData, RoleRemoveUserVariables>(
        useMutationRoleRemoveUser.Document,
        { ...mutationDefaultOptions, ...options }
    ) as any;
}

export type RoleRemoveUserVariables = {
    id: RoleRemoveUserVariablesId;
    userId: RoleRemoveUserVariablesUserId;
};

type RoleRemoveUserVariablesId = string;
type RoleRemoveUserVariablesUserId = string;

export type RoleRemoveUserData = {
    roleRemoveUser: RoleRemoveUserDataRoleRemoveUser;
};

type RoleRemoveUserDataRoleRemoveUser = RolePart & {
    __typename?: 'Role';
    acls: Array<RoleRemoveUserDataRoleRemoveUserAcls>;
    users: Array<RoleRemoveUserDataRoleRemoveUserUsers>;
};

type RoleRemoveUserDataRoleRemoveUserAcls = {
    __typename?: 'Acl';
    id: RoleRemoveUserDataRoleRemoveUserAclsId;
    acl: RoleRemoveUserDataRoleRemoveUserAclsAcl;
};

type RoleRemoveUserDataRoleRemoveUserAclsId = string;
type RoleRemoveUserDataRoleRemoveUserAclsAcl = string;
type RoleRemoveUserDataRoleRemoveUserUsers = {
    __typename?: 'User';
    id: RoleRemoveUserDataRoleRemoveUserUsersId;
};

type RoleRemoveUserDataRoleRemoveUserUsersId = string;

useMutationDeleteRoleRole.Document = gql`
    mutation deleteRoleRole($id: ID!) {
        role_role_delete(id: $id)
    }
` as DocumentNode;

export function useMutationDeleteRoleRole(
    options?: MutationHookOptions<DeleteRoleRoleData, DeleteRoleRoleVariables>
): MutationHookFn<DeleteRoleRoleData, DeleteRoleRoleVariables> {
    return useMutation<DeleteRoleRoleData, DeleteRoleRoleVariables>(
        useMutationDeleteRoleRole.Document,
        { ...mutationDefaultOptions, ...options }
    ) as any;
}

export type DeleteRoleRoleVariables = {
    id: DeleteRoleRoleVariablesId;
};

type DeleteRoleRoleVariablesId = string;

export type DeleteRoleRoleData = {
    role_role_delete: DeleteRoleRoleDataRoleRoleDelete;
};

type DeleteRoleRoleDataRoleRoleDelete = boolean;

/*,
 * Fragments from undefined,
 */

/*,
 * Operations from undefined,
 */

useQueryProductSimples.Document = gql`
    query productSimples($filter: CordFilter) {
        productSimples(filter: $filter) {
            edges {
                id
                product {
                    id
                    user {
                        id
                    }
                    expire
                }
                create
                state
                name
            }
            pageInfo {
                totalCount
            }
        }
    }
` as DocumentNode;

export function useQueryProductSimples(
    options?: QueryHookOptions<ProductSimplesData, ProductSimplesVariables>
) {
    const result = useQuery<ProductSimplesData, ProductSimplesVariables>(
        useQueryProductSimples.Document,
        { ...queryDefaultOptions, ...options }
    );
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryProductSimples.lazy = function (
    options?: LazyQueryHookOptions<ProductSimplesData, ProductSimplesVariables>
) {
    return useLazyQuery(useQueryProductSimples.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type ProductSimplesVariables = {
    filter?: Nullable<ProductSimplesVariablesFilter>;
};

type ProductSimplesVariablesFilter = CordFilter;

export type ProductSimplesData = {
    productSimples: ProductSimplesDataProductSimples;
};

type ProductSimplesDataProductSimples = {
    __typename?: 'ProductSimpleResultMany';
    edges: Array<ProductSimplesDataProductSimplesEdges>;
    pageInfo: ProductSimplesDataProductSimplesPageInfo;
};

type ProductSimplesDataProductSimplesEdges = {
    __typename?: 'ProductSimple';
    id: ProductSimplesDataProductSimplesEdgesId;
    product: ProductSimplesDataProductSimplesEdgesProduct;
    create: ProductSimplesDataProductSimplesEdgesCreate;
    state: ProductSimplesDataProductSimplesEdgesState;
    name: ProductSimplesDataProductSimplesEdgesName;
};

type ProductSimplesDataProductSimplesEdgesId = string;
type ProductSimplesDataProductSimplesEdgesProduct = {
    __typename?: 'Product';
    id: ProductSimplesDataProductSimplesEdgesProductId;
    user: ProductSimplesDataProductSimplesEdgesProductUser;
    expire?: Nullable<ProductSimplesDataProductSimplesEdgesProductExpire>;
};

type ProductSimplesDataProductSimplesEdgesProductId = string;
type ProductSimplesDataProductSimplesEdgesProductUser = {
    __typename?: 'User';
    id: ProductSimplesDataProductSimplesEdgesProductUserId;
};

type ProductSimplesDataProductSimplesEdgesProductUserId = string;
type ProductSimplesDataProductSimplesEdgesProductExpire = any;
type ProductSimplesDataProductSimplesEdgesCreate = any;
type ProductSimplesDataProductSimplesEdgesState = string;
type ProductSimplesDataProductSimplesEdgesName = string;
type ProductSimplesDataProductSimplesPageInfo = {
    __typename?: 'CordPageInfo';
    totalCount: ProductSimplesDataProductSimplesPageInfoTotalCount;
};

type ProductSimplesDataProductSimplesPageInfoTotalCount = number;

useQueryProductSimpleById.Document = gql`
    query productSimpleById($id: ID!) {
        productSimpleById(id: $id) {
            id
            name
            description
            product {
                id
                expire
            }
            state
        }
    }
` as DocumentNode;

export function useQueryProductSimpleById(
    options?: QueryHookOptions<
        ProductSimpleByIdData,
        ProductSimpleByIdVariables
    >
) {
    const result = useQuery<ProductSimpleByIdData, ProductSimpleByIdVariables>(
        useQueryProductSimpleById.Document,
        { ...queryDefaultOptions, ...options }
    );
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryProductSimpleById.lazy = function (
    options?: LazyQueryHookOptions<
        ProductSimpleByIdData,
        ProductSimpleByIdVariables
    >
) {
    return useLazyQuery(useQueryProductSimpleById.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type ProductSimpleByIdVariables = {
    id: ProductSimpleByIdVariablesId;
};

type ProductSimpleByIdVariablesId = string;

export type ProductSimpleByIdData = {
    productSimpleById: ProductSimpleByIdDataProductSimpleById;
};

type ProductSimpleByIdDataProductSimpleById = {
    __typename?: 'ProductSimple';
    id: ProductSimpleByIdDataProductSimpleByIdId;
    name: ProductSimpleByIdDataProductSimpleByIdName;
    description?: Nullable<ProductSimpleByIdDataProductSimpleByIdDescription>;
    product: ProductSimpleByIdDataProductSimpleByIdProduct;
    state: ProductSimpleByIdDataProductSimpleByIdState;
};

type ProductSimpleByIdDataProductSimpleByIdId = string;
type ProductSimpleByIdDataProductSimpleByIdName = string;
type ProductSimpleByIdDataProductSimpleByIdDescription = string;
type ProductSimpleByIdDataProductSimpleByIdProduct = {
    __typename?: 'Product';
    id: ProductSimpleByIdDataProductSimpleByIdProductId;
    expire?: Nullable<ProductSimpleByIdDataProductSimpleByIdProductExpire>;
};

type ProductSimpleByIdDataProductSimpleByIdProductId = string;
type ProductSimpleByIdDataProductSimpleByIdProductExpire = any;
type ProductSimpleByIdDataProductSimpleByIdState = string;

useQueryMyProductSimples.Document = gql`
    query myProductSimples {
        productSimplesMy {
            id
            name
            product {
                id
                expire
            }
            state
        }
    }
` as DocumentNode;

export function useQueryMyProductSimples(
    options?: QueryHookOptions<MyProductSimplesData, MyProductSimplesVariables>
) {
    const result = useQuery<MyProductSimplesData, MyProductSimplesVariables>(
        useQueryMyProductSimples.Document,
        { ...queryDefaultOptions, ...options }
    );
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryMyProductSimples.lazy = function (
    options?: LazyQueryHookOptions<
        MyProductSimplesData,
        MyProductSimplesVariables
    >
) {
    return useLazyQuery(useQueryMyProductSimples.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type MyProductSimplesVariables = {};

export type MyProductSimplesData = {
    productSimplesMy: Array<MyProductSimplesDataProductSimplesMy>;
};

type MyProductSimplesDataProductSimplesMy = {
    __typename?: 'ProductSimple';
    id: MyProductSimplesDataProductSimplesMyId;
    name: MyProductSimplesDataProductSimplesMyName;
    product: MyProductSimplesDataProductSimplesMyProduct;
    state: MyProductSimplesDataProductSimplesMyState;
};

type MyProductSimplesDataProductSimplesMyId = string;
type MyProductSimplesDataProductSimplesMyName = string;
type MyProductSimplesDataProductSimplesMyProduct = {
    __typename?: 'Product';
    id: MyProductSimplesDataProductSimplesMyProductId;
    expire?: Nullable<MyProductSimplesDataProductSimplesMyProductExpire>;
};

type MyProductSimplesDataProductSimplesMyProductId = string;
type MyProductSimplesDataProductSimplesMyProductExpire = any;
type MyProductSimplesDataProductSimplesMyState = string;

useMutationProductSimpleEditLabel.Document = gql`
    mutation productSimpleEditLabel($id: ID!, $label: String!) {
        productSimpleEditLabel(id: $id, label: $label) {
            id
            name
            product {
                id
                expire
            }
            state
        }
    }
` as DocumentNode;

export function useMutationProductSimpleEditLabel(
    options?: MutationHookOptions<
        ProductSimpleEditLabelData,
        ProductSimpleEditLabelVariables
    >
): MutationHookFn<ProductSimpleEditLabelData, ProductSimpleEditLabelVariables> {
    return useMutation<
        ProductSimpleEditLabelData,
        ProductSimpleEditLabelVariables
    >(useMutationProductSimpleEditLabel.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type ProductSimpleEditLabelVariables = {
    id: ProductSimpleEditLabelVariablesId;
    label: ProductSimpleEditLabelVariablesLabel;
};

type ProductSimpleEditLabelVariablesId = string;
type ProductSimpleEditLabelVariablesLabel = string;

export type ProductSimpleEditLabelData = {
    productSimpleEditLabel: ProductSimpleEditLabelDataProductSimpleEditLabel;
};

type ProductSimpleEditLabelDataProductSimpleEditLabel = {
    __typename?: 'ProductSimple';
    id: ProductSimpleEditLabelDataProductSimpleEditLabelId;
    name: ProductSimpleEditLabelDataProductSimpleEditLabelName;
    product: ProductSimpleEditLabelDataProductSimpleEditLabelProduct;
    state: ProductSimpleEditLabelDataProductSimpleEditLabelState;
};

type ProductSimpleEditLabelDataProductSimpleEditLabelId = string;
type ProductSimpleEditLabelDataProductSimpleEditLabelName = string;
type ProductSimpleEditLabelDataProductSimpleEditLabelProduct = {
    __typename?: 'Product';
    id: ProductSimpleEditLabelDataProductSimpleEditLabelProductId;
    expire?: Nullable<ProductSimpleEditLabelDataProductSimpleEditLabelProductExpire>;
};

type ProductSimpleEditLabelDataProductSimpleEditLabelProductId = string;
type ProductSimpleEditLabelDataProductSimpleEditLabelProductExpire = any;
type ProductSimpleEditLabelDataProductSimpleEditLabelState = string;

useMutationProductSimpleDelete.Document = gql`
    mutation productSimpleDelete($id: ID!) {
        productSimpleDelete(id: $id)
    }
` as DocumentNode;

export function useMutationProductSimpleDelete(
    options?: MutationHookOptions<
        ProductSimpleDeleteData,
        ProductSimpleDeleteVariables
    >
): MutationHookFn<ProductSimpleDeleteData, ProductSimpleDeleteVariables> {
    return useMutation<ProductSimpleDeleteData, ProductSimpleDeleteVariables>(
        useMutationProductSimpleDelete.Document,
        { ...mutationDefaultOptions, ...options }
    ) as any;
}

export type ProductSimpleDeleteVariables = {
    id: ProductSimpleDeleteVariablesId;
};

type ProductSimpleDeleteVariablesId = string;

export type ProductSimpleDeleteData = {
    productSimpleDelete: ProductSimpleDeleteDataProductSimpleDelete;
};

type ProductSimpleDeleteDataProductSimpleDelete = boolean;

useMutationProductSimpleSetState.Document = gql`
    mutation productSimpleSetState($id: ID!, $state: String!) {
        productSimpleSetState(id: $id, state: $state) {
            id
            name
            product {
                id
                expire
            }
            state
        }
    }
` as DocumentNode;

export function useMutationProductSimpleSetState(
    options?: MutationHookOptions<
        ProductSimpleSetStateData,
        ProductSimpleSetStateVariables
    >
): MutationHookFn<ProductSimpleSetStateData, ProductSimpleSetStateVariables> {
    return useMutation<
        ProductSimpleSetStateData,
        ProductSimpleSetStateVariables
    >(useMutationProductSimpleSetState.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type ProductSimpleSetStateVariables = {
    id: ProductSimpleSetStateVariablesId;
    state: ProductSimpleSetStateVariablesState;
};

type ProductSimpleSetStateVariablesId = string;
type ProductSimpleSetStateVariablesState = string;

export type ProductSimpleSetStateData = {
    productSimpleSetState: ProductSimpleSetStateDataProductSimpleSetState;
};

type ProductSimpleSetStateDataProductSimpleSetState = {
    __typename?: 'ProductSimple';
    id: ProductSimpleSetStateDataProductSimpleSetStateId;
    name: ProductSimpleSetStateDataProductSimpleSetStateName;
    product: ProductSimpleSetStateDataProductSimpleSetStateProduct;
    state: ProductSimpleSetStateDataProductSimpleSetStateState;
};

type ProductSimpleSetStateDataProductSimpleSetStateId = string;
type ProductSimpleSetStateDataProductSimpleSetStateName = string;
type ProductSimpleSetStateDataProductSimpleSetStateProduct = {
    __typename?: 'Product';
    id: ProductSimpleSetStateDataProductSimpleSetStateProductId;
    expire?: Nullable<ProductSimpleSetStateDataProductSimpleSetStateProductExpire>;
};

type ProductSimpleSetStateDataProductSimpleSetStateProductId = string;
type ProductSimpleSetStateDataProductSimpleSetStateProductExpire = any;
type ProductSimpleSetStateDataProductSimpleSetStateState = string;

/*,
 * Fragments from undefined,
 */
export type supportQuickResponseFragment = {
    id: SupportQuickResponseFragmentId;
    title: SupportQuickResponseFragmentTitle;
    content: SupportQuickResponseFragmentContent;
    update: SupportQuickResponseFragmentUpdate;
    create: SupportQuickResponseFragmentCreate;
};

type SupportQuickResponseFragmentId = string;
type SupportQuickResponseFragmentTitle = string;
type SupportQuickResponseFragmentContent = string;
type SupportQuickResponseFragmentUpdate = any;
type SupportQuickResponseFragmentCreate = any;
const _gql_supportQuickResponseFragment = gql`
    fragment supportQuickResponseFragment on SupportQuickResponse {
        id
        title
        content
        update
        create
    }
`;

/*,
 * Operations from undefined,
 */

useMutationSupportQuickResponseDelete.Document = gql`
    mutation supportQuickResponseDelete($id: ID!) {
        supportQuickResponseDelete(id: $id)
    }
` as DocumentNode;

export function useMutationSupportQuickResponseDelete(
    options?: MutationHookOptions<
        SupportQuickResponseDeleteData,
        SupportQuickResponseDeleteVariables
    >
): MutationHookFn<
    SupportQuickResponseDeleteData,
    SupportQuickResponseDeleteVariables
> {
    return useMutation<
        SupportQuickResponseDeleteData,
        SupportQuickResponseDeleteVariables
    >(useMutationSupportQuickResponseDelete.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type SupportQuickResponseDeleteVariables = {
    id: SupportQuickResponseDeleteVariablesId;
};

type SupportQuickResponseDeleteVariablesId = string;

export type SupportQuickResponseDeleteData = {
    supportQuickResponseDelete: SupportQuickResponseDeleteDataSupportQuickResponseDelete;
};

type SupportQuickResponseDeleteDataSupportQuickResponseDelete = boolean;

useMutationSupportQuickResponseEdit.Document = gql`
    mutation supportQuickResponseEdit($dto: SupportQuickResponseEditDto!) {
        supportQuickResponseEdit(dto: $dto) {
            ...supportQuickResponseFragment
        }
    }
    ${_gql_supportQuickResponseFragment}
` as DocumentNode;

export function useMutationSupportQuickResponseEdit(
    options?: MutationHookOptions<
        SupportQuickResponseEditData,
        SupportQuickResponseEditVariables
    >
): MutationHookFn<
    SupportQuickResponseEditData,
    SupportQuickResponseEditVariables
> {
    return useMutation<
        SupportQuickResponseEditData,
        SupportQuickResponseEditVariables
    >(useMutationSupportQuickResponseEdit.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type SupportQuickResponseEditVariables = {
    dto: SupportQuickResponseEditVariablesDto;
};

type SupportQuickResponseEditVariablesDto = SupportQuickResponseEditDto;

export type SupportQuickResponseEditData = {
    supportQuickResponseEdit: SupportQuickResponseEditDataSupportQuickResponseEdit;
};

type SupportQuickResponseEditDataSupportQuickResponseEdit = supportQuickResponseFragment & {
    __typename?: 'SupportQuickResponse';
};

useMutationSupportQuickResponseCreate.Document = gql`
    mutation supportQuickResponseCreate($dto: SupportQuickResponseCreateDto!) {
        supportQuickResponseCreate(dto: $dto) {
            ...supportQuickResponseFragment
        }
    }
    ${_gql_supportQuickResponseFragment}
` as DocumentNode;

export function useMutationSupportQuickResponseCreate(
    options?: MutationHookOptions<
        SupportQuickResponseCreateData,
        SupportQuickResponseCreateVariables
    >
): MutationHookFn<
    SupportQuickResponseCreateData,
    SupportQuickResponseCreateVariables
> {
    return useMutation<
        SupportQuickResponseCreateData,
        SupportQuickResponseCreateVariables
    >(useMutationSupportQuickResponseCreate.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type SupportQuickResponseCreateVariables = {
    dto: SupportQuickResponseCreateVariablesDto;
};

type SupportQuickResponseCreateVariablesDto = SupportQuickResponseCreateDto;

export type SupportQuickResponseCreateData = {
    supportQuickResponseCreate: SupportQuickResponseCreateDataSupportQuickResponseCreate;
};

type SupportQuickResponseCreateDataSupportQuickResponseCreate = supportQuickResponseFragment & {
    __typename?: 'SupportQuickResponse';
};

useQuerySupportQuickResponses.Document = gql`
    query supportQuickResponses($filter: CordFilter) {
        supportQuickResponses(filter: $filter) {
            edges {
                ...supportQuickResponseFragment
            }
            pageInfo {
                totalCount
            }
        }
    }
    ${_gql_supportQuickResponseFragment}
` as DocumentNode;

export function useQuerySupportQuickResponses(
    options?: QueryHookOptions<
        SupportQuickResponsesData,
        SupportQuickResponsesVariables
    >
) {
    const result = useQuery<
        SupportQuickResponsesData,
        SupportQuickResponsesVariables
    >(useQuerySupportQuickResponses.Document, {
        ...queryDefaultOptions,
        ...options,
    });
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQuerySupportQuickResponses.lazy = function (
    options?: LazyQueryHookOptions<
        SupportQuickResponsesData,
        SupportQuickResponsesVariables
    >
) {
    return useLazyQuery(useQuerySupportQuickResponses.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type SupportQuickResponsesVariables = {
    filter?: Nullable<SupportQuickResponsesVariablesFilter>;
};

type SupportQuickResponsesVariablesFilter = CordFilter;

export type SupportQuickResponsesData = {
    supportQuickResponses: SupportQuickResponsesDataSupportQuickResponses;
};

type SupportQuickResponsesDataSupportQuickResponses = {
    __typename?: 'SupportQuickResponseResultMany';
    edges: Array<SupportQuickResponsesDataSupportQuickResponsesEdges>;
    pageInfo: SupportQuickResponsesDataSupportQuickResponsesPageInfo;
};

type SupportQuickResponsesDataSupportQuickResponsesEdges = supportQuickResponseFragment & {
    __typename?: 'SupportQuickResponse';
};

type SupportQuickResponsesDataSupportQuickResponsesPageInfo = {
    __typename?: 'CordPageInfo';
    totalCount: SupportQuickResponsesDataSupportQuickResponsesPageInfoTotalCount;
};

type SupportQuickResponsesDataSupportQuickResponsesPageInfoTotalCount = number;

useQuerySupportQuickResponseById.Document = gql`
    query supportQuickResponseById($id: ID!) {
        supportQuickResponseById(id: $id) {
            ...supportQuickResponseFragment
        }
    }
    ${_gql_supportQuickResponseFragment}
` as DocumentNode;

export function useQuerySupportQuickResponseById(
    options?: QueryHookOptions<
        SupportQuickResponseByIdData,
        SupportQuickResponseByIdVariables
    >
) {
    const result = useQuery<
        SupportQuickResponseByIdData,
        SupportQuickResponseByIdVariables
    >(useQuerySupportQuickResponseById.Document, {
        ...queryDefaultOptions,
        ...options,
    });
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQuerySupportQuickResponseById.lazy = function (
    options?: LazyQueryHookOptions<
        SupportQuickResponseByIdData,
        SupportQuickResponseByIdVariables
    >
) {
    return useLazyQuery(useQuerySupportQuickResponseById.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type SupportQuickResponseByIdVariables = {
    id: SupportQuickResponseByIdVariablesId;
};

type SupportQuickResponseByIdVariablesId = string;

export type SupportQuickResponseByIdData = {
    supportQuickResponseById: SupportQuickResponseByIdDataSupportQuickResponseById;
};

type SupportQuickResponseByIdDataSupportQuickResponseById = supportQuickResponseFragment & {
    __typename?: 'SupportQuickResponse';
};

/*,
 * Fragments from undefined,
 */
export type SupportTicketPart = {
    id: SupportTicketPartId;
    subject: SupportTicketPartSubject;
    create: SupportTicketPartCreate;
    update: SupportTicketPartUpdate;
    priority: SupportTicketPartPriority;
    author: SupportTicketPartAuthor;
    open: SupportTicketPartOpen;
    status: SupportTicketPartStatus;
    unreadReviserMessages: SupportTicketPartUnreadReviserMessages;
    unreadMessages: SupportTicketPartUnreadMessages;
    reviserName?: Nullable<SupportTicketPartReviserName>;
    lastOpened: SupportTicketPartLastOpened;
    messages: Array<SupportTicketPartMessages>;
    files: Array<SupportTicketPartFiles>;
};

type SupportTicketPartId = string;
type SupportTicketPartSubject = string;
type SupportTicketPartCreate = any;
type SupportTicketPartUpdate = any;
type SupportTicketPartPriority = number;
type SupportTicketPartAuthor = {
    __typename?: 'User';
    id: SupportTicketPartAuthorId;
    publicName: SupportTicketPartAuthorPublicName;
};

type SupportTicketPartAuthorId = string;
type SupportTicketPartAuthorPublicName = string;
type SupportTicketPartOpen = boolean;
type SupportTicketPartStatus = string;
type SupportTicketPartUnreadReviserMessages = number;
type SupportTicketPartUnreadMessages = number;
type SupportTicketPartReviserName = string;
type SupportTicketPartLastOpened = any;
type SupportTicketPartMessages = {
    __typename?: 'SupportTicketMessage';
    text?: Nullable<SupportTicketPartMessagesText>;
    id: SupportTicketPartMessagesId;
    userAvatar: SupportTicketPartMessagesUserAvatar;
    userPublicName: SupportTicketPartMessagesUserPublicName;
    create: SupportTicketPartMessagesCreate;
    userId?: Nullable<SupportTicketPartMessagesUserId>;
};

type SupportTicketPartMessagesText = string;
type SupportTicketPartMessagesId = string;
type SupportTicketPartMessagesUserAvatar = string;
type SupportTicketPartMessagesUserPublicName = string;
type SupportTicketPartMessagesCreate = any;
type SupportTicketPartMessagesUserId = string;
type SupportTicketPartFiles = {
    __typename?: 'File';
    id: SupportTicketPartFilesId;
    originalname: SupportTicketPartFilesOriginalname;
    file: SupportTicketPartFilesFile;
    mimetype: SupportTicketPartFilesMimetype;
    create: SupportTicketPartFilesCreate;
    url: SupportTicketPartFilesUrl;
    uploaderId?: Nullable<SupportTicketPartFilesUploaderId>;
};

type SupportTicketPartFilesId = string;
type SupportTicketPartFilesOriginalname = string;
type SupportTicketPartFilesFile = string;
type SupportTicketPartFilesMimetype = string;
type SupportTicketPartFilesCreate = any;
type SupportTicketPartFilesUrl = string;
type SupportTicketPartFilesUploaderId = string;
const _gql_SupportTicketPart = gql`
    fragment SupportTicketPart on SupportTicket {
        id
        subject
        create
        update
        priority
        author {
            id
            publicName
        }
        open
        status
        unreadReviserMessages
        unreadMessages
        reviserName
        lastOpened
        messages {
            text
            id
            userAvatar
            userPublicName
            create
            userId
        }
        files {
            id
            originalname
            file
            mimetype
            create
            url
            uploaderId
        }
    }
`;

/*,
 * Operations from undefined,
 */

useMutationSupportTicketDeleteMessage.Document = gql`
    mutation supportTicketDeleteMessage($id: ID!) {
        supportTicketDeleteMessage(id: $id) {
            ...SupportTicketPart
        }
    }
    ${_gql_SupportTicketPart}
` as DocumentNode;

export function useMutationSupportTicketDeleteMessage(
    options?: MutationHookOptions<
        SupportTicketDeleteMessageData,
        SupportTicketDeleteMessageVariables
    >
): MutationHookFn<
    SupportTicketDeleteMessageData,
    SupportTicketDeleteMessageVariables
> {
    return useMutation<
        SupportTicketDeleteMessageData,
        SupportTicketDeleteMessageVariables
    >(useMutationSupportTicketDeleteMessage.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type SupportTicketDeleteMessageVariables = {
    id: SupportTicketDeleteMessageVariablesId;
};

type SupportTicketDeleteMessageVariablesId = string;

export type SupportTicketDeleteMessageData = {
    supportTicketDeleteMessage: SupportTicketDeleteMessageDataSupportTicketDeleteMessage;
};

type SupportTicketDeleteMessageDataSupportTicketDeleteMessage = SupportTicketPart & {
    __typename?: 'SupportTicket';
};

useQueryUserMyTickets.Document = gql`
    query UserMyTickets {
        user_me {
            id
            tickets {
                ...SupportTicketPart
            }
        }
    }
    ${_gql_SupportTicketPart}
` as DocumentNode;

export function useQueryUserMyTickets(
    options?: QueryHookOptions<UserMyTicketsData, UserMyTicketsVariables>
) {
    const result = useQuery<UserMyTicketsData, UserMyTicketsVariables>(
        useQueryUserMyTickets.Document,
        { ...queryDefaultOptions, ...options }
    );
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryUserMyTickets.lazy = function (
    options?: LazyQueryHookOptions<UserMyTicketsData, UserMyTicketsVariables>
) {
    return useLazyQuery(useQueryUserMyTickets.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type UserMyTicketsVariables = {};

export type UserMyTicketsData = {
    user_me: UserMyTicketsDataUserMe;
};

type UserMyTicketsDataUserMe = {
    __typename?: 'User';
    id: UserMyTicketsDataUserMeId;
    tickets: Array<UserMyTicketsDataUserMeTickets>;
};

type UserMyTicketsDataUserMeId = string;
type UserMyTicketsDataUserMeTickets = SupportTicketPart & {
    __typename?: 'SupportTicket';
};

useQuerySupportTicketById.Document = gql`
    query supportTicketById($id: ID!) {
        supportTicketById(id: $id) {
            ...SupportTicketPart
        }
    }
    ${_gql_SupportTicketPart}
` as DocumentNode;

export function useQuerySupportTicketById(
    options?: QueryHookOptions<
        SupportTicketByIdData,
        SupportTicketByIdVariables
    >
) {
    const result = useQuery<SupportTicketByIdData, SupportTicketByIdVariables>(
        useQuerySupportTicketById.Document,
        { ...queryDefaultOptions, ...options }
    );
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQuerySupportTicketById.lazy = function (
    options?: LazyQueryHookOptions<
        SupportTicketByIdData,
        SupportTicketByIdVariables
    >
) {
    return useLazyQuery(useQuerySupportTicketById.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type SupportTicketByIdVariables = {
    id: SupportTicketByIdVariablesId;
};

type SupportTicketByIdVariablesId = string;

export type SupportTicketByIdData = {
    supportTicketById: SupportTicketByIdDataSupportTicketById;
};

type SupportTicketByIdDataSupportTicketById = SupportTicketPart & {
    __typename?: 'SupportTicket';
};

useMutationSupportTicketDelete.Document = gql`
    mutation supportTicketDelete($id: ID!) {
        supportTicketDelete(id: $id)
    }
` as DocumentNode;

export function useMutationSupportTicketDelete(
    options?: MutationHookOptions<
        SupportTicketDeleteData,
        SupportTicketDeleteVariables
    >
): MutationHookFn<SupportTicketDeleteData, SupportTicketDeleteVariables> {
    return useMutation<SupportTicketDeleteData, SupportTicketDeleteVariables>(
        useMutationSupportTicketDelete.Document,
        { ...mutationDefaultOptions, ...options }
    ) as any;
}

export type SupportTicketDeleteVariables = {
    id: SupportTicketDeleteVariablesId;
};

type SupportTicketDeleteVariablesId = string;

export type SupportTicketDeleteData = {
    supportTicketDelete: SupportTicketDeleteDataSupportTicketDelete;
};

type SupportTicketDeleteDataSupportTicketDelete = boolean;

useQuerySupportTickets.Document = gql`
    query supportTickets($filter: CordFilter) {
        supportTickets(filter: $filter) {
            edges {
                ...SupportTicketPart
            }
            pageInfo {
                totalCount
            }
        }
    }
    ${_gql_SupportTicketPart}
` as DocumentNode;

export function useQuerySupportTickets(
    options?: QueryHookOptions<SupportTicketsData, SupportTicketsVariables>
) {
    const result = useQuery<SupportTicketsData, SupportTicketsVariables>(
        useQuerySupportTickets.Document,
        { ...queryDefaultOptions, ...options }
    );
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQuerySupportTickets.lazy = function (
    options?: LazyQueryHookOptions<SupportTicketsData, SupportTicketsVariables>
) {
    return useLazyQuery(useQuerySupportTickets.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type SupportTicketsVariables = {
    filter?: Nullable<SupportTicketsVariablesFilter>;
};

type SupportTicketsVariablesFilter = CordFilter;

export type SupportTicketsData = {
    supportTickets: SupportTicketsDataSupportTickets;
};

type SupportTicketsDataSupportTickets = {
    __typename?: 'SupportTicketResultMany';
    edges: Array<SupportTicketsDataSupportTicketsEdges>;
    pageInfo: SupportTicketsDataSupportTicketsPageInfo;
};

type SupportTicketsDataSupportTicketsEdges = SupportTicketPart & {
    __typename?: 'SupportTicket';
};

type SupportTicketsDataSupportTicketsPageInfo = {
    __typename?: 'CordPageInfo';
    totalCount: SupportTicketsDataSupportTicketsPageInfoTotalCount;
};

type SupportTicketsDataSupportTicketsPageInfoTotalCount = number;

useMutationSupportTicketResetUnreadCounter.Document = gql`
    mutation supportTicketResetUnreadCounter($id: ID!) {
        supportTicketResetUnreadCounter(id: $id) {
            ...SupportTicketPart
        }
    }
    ${_gql_SupportTicketPart}
` as DocumentNode;

export function useMutationSupportTicketResetUnreadCounter(
    options?: MutationHookOptions<
        SupportTicketResetUnreadCounterData,
        SupportTicketResetUnreadCounterVariables
    >
): MutationHookFn<
    SupportTicketResetUnreadCounterData,
    SupportTicketResetUnreadCounterVariables
> {
    return useMutation<
        SupportTicketResetUnreadCounterData,
        SupportTicketResetUnreadCounterVariables
    >(useMutationSupportTicketResetUnreadCounter.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type SupportTicketResetUnreadCounterVariables = {
    id: SupportTicketResetUnreadCounterVariablesId;
};

type SupportTicketResetUnreadCounterVariablesId = string;

export type SupportTicketResetUnreadCounterData = {
    supportTicketResetUnreadCounter: SupportTicketResetUnreadCounterDataSupportTicketResetUnreadCounter;
};

type SupportTicketResetUnreadCounterDataSupportTicketResetUnreadCounter = SupportTicketPart & {
    __typename?: 'SupportTicket';
};

useMutationAddMessageToSupportTicket.Document = gql`
    mutation addMessageToSupportTicket($message: String!, $id: ID!) {
        support_ticket_add_message(data: { message: $message, id: $id }) {
            ...SupportTicketPart
        }
    }
    ${_gql_SupportTicketPart}
` as DocumentNode;

export function useMutationAddMessageToSupportTicket(
    options?: MutationHookOptions<
        AddMessageToSupportTicketData,
        AddMessageToSupportTicketVariables
    >
): MutationHookFn<
    AddMessageToSupportTicketData,
    AddMessageToSupportTicketVariables
> {
    return useMutation<
        AddMessageToSupportTicketData,
        AddMessageToSupportTicketVariables
    >(useMutationAddMessageToSupportTicket.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type AddMessageToSupportTicketVariables = {
    message: AddMessageToSupportTicketVariablesMessage;
    id: AddMessageToSupportTicketVariablesId;
};

type AddMessageToSupportTicketVariablesMessage = string;
type AddMessageToSupportTicketVariablesId = string;

export type AddMessageToSupportTicketData = {
    support_ticket_add_message: AddMessageToSupportTicketDataSupportTicketAddMessage;
};

type AddMessageToSupportTicketDataSupportTicketAddMessage = SupportTicketPart & {
    __typename?: 'SupportTicket';
};

useMutationSupportTicketSetStatus.Document = gql`
    mutation supportTicketSetStatus($id: ID!, $status: String!) {
        supportTicketSetStatus(id: $id, status: $status) {
            ...SupportTicketPart
        }
    }
    ${_gql_SupportTicketPart}
` as DocumentNode;

export function useMutationSupportTicketSetStatus(
    options?: MutationHookOptions<
        SupportTicketSetStatusData,
        SupportTicketSetStatusVariables
    >
): MutationHookFn<SupportTicketSetStatusData, SupportTicketSetStatusVariables> {
    return useMutation<
        SupportTicketSetStatusData,
        SupportTicketSetStatusVariables
    >(useMutationSupportTicketSetStatus.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type SupportTicketSetStatusVariables = {
    id: SupportTicketSetStatusVariablesId;
    status: SupportTicketSetStatusVariablesStatus;
};

type SupportTicketSetStatusVariablesId = string;
type SupportTicketSetStatusVariablesStatus = string;

export type SupportTicketSetStatusData = {
    supportTicketSetStatus: SupportTicketSetStatusDataSupportTicketSetStatus;
};

type SupportTicketSetStatusDataSupportTicketSetStatus = SupportTicketPart & {
    __typename?: 'SupportTicket';
};

useMutationSupportTicketClose.Document = gql`
    mutation supportTicketClose($id: ID!) {
        supportTicketClose(id: $id) {
            ...SupportTicketPart
        }
    }
    ${_gql_SupportTicketPart}
` as DocumentNode;

export function useMutationSupportTicketClose(
    options?: MutationHookOptions<
        SupportTicketCloseData,
        SupportTicketCloseVariables
    >
): MutationHookFn<SupportTicketCloseData, SupportTicketCloseVariables> {
    return useMutation<SupportTicketCloseData, SupportTicketCloseVariables>(
        useMutationSupportTicketClose.Document,
        { ...mutationDefaultOptions, ...options }
    ) as any;
}

export type SupportTicketCloseVariables = {
    id: SupportTicketCloseVariablesId;
};

type SupportTicketCloseVariablesId = string;

export type SupportTicketCloseData = {
    supportTicketClose: SupportTicketCloseDataSupportTicketClose;
};

type SupportTicketCloseDataSupportTicketClose = SupportTicketPart & {
    __typename?: 'SupportTicket';
};

useMutationSupportTicketReopen.Document = gql`
    mutation supportTicketReopen($id: ID!) {
        supportTicketReopen(id: $id) {
            ...SupportTicketPart
        }
    }
    ${_gql_SupportTicketPart}
` as DocumentNode;

export function useMutationSupportTicketReopen(
    options?: MutationHookOptions<
        SupportTicketReopenData,
        SupportTicketReopenVariables
    >
): MutationHookFn<SupportTicketReopenData, SupportTicketReopenVariables> {
    return useMutation<SupportTicketReopenData, SupportTicketReopenVariables>(
        useMutationSupportTicketReopen.Document,
        { ...mutationDefaultOptions, ...options }
    ) as any;
}

export type SupportTicketReopenVariables = {
    id: SupportTicketReopenVariablesId;
};

type SupportTicketReopenVariablesId = string;

export type SupportTicketReopenData = {
    supportTicketReopen: SupportTicketReopenDataSupportTicketReopen;
};

type SupportTicketReopenDataSupportTicketReopen = SupportTicketPart & {
    __typename?: 'SupportTicket';
};

useMutationSupportTicketAssignTo.Document = gql`
    mutation supportTicketAssignTo($id: ID!, $userId: ID!) {
        supportTicketAssignTo(id: $id, userId: $userId) {
            ...SupportTicketPart
        }
    }
    ${_gql_SupportTicketPart}
` as DocumentNode;

export function useMutationSupportTicketAssignTo(
    options?: MutationHookOptions<
        SupportTicketAssignToData,
        SupportTicketAssignToVariables
    >
): MutationHookFn<SupportTicketAssignToData, SupportTicketAssignToVariables> {
    return useMutation<
        SupportTicketAssignToData,
        SupportTicketAssignToVariables
    >(useMutationSupportTicketAssignTo.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type SupportTicketAssignToVariables = {
    id: SupportTicketAssignToVariablesId;
    userId: SupportTicketAssignToVariablesUserId;
};

type SupportTicketAssignToVariablesId = string;
type SupportTicketAssignToVariablesUserId = string;

export type SupportTicketAssignToData = {
    supportTicketAssignTo: SupportTicketAssignToDataSupportTicketAssignTo;
};

type SupportTicketAssignToDataSupportTicketAssignTo = SupportTicketPart & {
    __typename?: 'SupportTicket';
};

useMutationSupportTicketAddFile.Document = gql`
    mutation supportTicketAddFile($id: ID!, $fileId: ID!) {
        supportTicketAddFile(id: $id, fileId: $fileId) {
            ...SupportTicketPart
        }
    }
    ${_gql_SupportTicketPart}
` as DocumentNode;

export function useMutationSupportTicketAddFile(
    options?: MutationHookOptions<
        SupportTicketAddFileData,
        SupportTicketAddFileVariables
    >
): MutationHookFn<SupportTicketAddFileData, SupportTicketAddFileVariables> {
    return useMutation<SupportTicketAddFileData, SupportTicketAddFileVariables>(
        useMutationSupportTicketAddFile.Document,
        { ...mutationDefaultOptions, ...options }
    ) as any;
}

export type SupportTicketAddFileVariables = {
    id: SupportTicketAddFileVariablesId;
    fileId: SupportTicketAddFileVariablesFileId;
};

type SupportTicketAddFileVariablesId = string;
type SupportTicketAddFileVariablesFileId = string;

export type SupportTicketAddFileData = {
    supportTicketAddFile: SupportTicketAddFileDataSupportTicketAddFile;
};

type SupportTicketAddFileDataSupportTicketAddFile = SupportTicketPart & {
    __typename?: 'SupportTicket';
};

useMutationEditSupportTicket.Document = gql`
    mutation editSupportTicket($id: ID!, $status: String, $priority: Int) {
        support_ticket_edit(
            data: { priority: $priority, status: $status }
            id: $id
        ) {
            ...SupportTicketPart
        }
    }
    ${_gql_SupportTicketPart}
` as DocumentNode;

export function useMutationEditSupportTicket(
    options?: MutationHookOptions<
        EditSupportTicketData,
        EditSupportTicketVariables
    >
): MutationHookFn<EditSupportTicketData, EditSupportTicketVariables> {
    return useMutation<EditSupportTicketData, EditSupportTicketVariables>(
        useMutationEditSupportTicket.Document,
        { ...mutationDefaultOptions, ...options }
    ) as any;
}

export type EditSupportTicketVariables = {
    id: EditSupportTicketVariablesId;
    status?: Nullable<EditSupportTicketVariablesStatus>;
    priority?: Nullable<EditSupportTicketVariablesPriority>;
};

type EditSupportTicketVariablesId = string;
type EditSupportTicketVariablesStatus = string;
type EditSupportTicketVariablesPriority = number;

export type EditSupportTicketData = {
    support_ticket_edit: EditSupportTicketDataSupportTicketEdit;
};

type EditSupportTicketDataSupportTicketEdit = SupportTicketPart & {
    __typename?: 'SupportTicket';
};

useMutationSupportTicketNew.Document = gql`
    mutation support_ticket_new($data: SupportTicketNewInput!) {
        support_ticket_new(data: $data) {
            ...SupportTicketPart
        }
    }
    ${_gql_SupportTicketPart}
` as DocumentNode;

export function useMutationSupportTicketNew(
    options?: MutationHookOptions<
        SupportTicketNewData,
        SupportTicketNewVariables
    >
): MutationHookFn<SupportTicketNewData, SupportTicketNewVariables> {
    return useMutation<SupportTicketNewData, SupportTicketNewVariables>(
        useMutationSupportTicketNew.Document,
        { ...mutationDefaultOptions, ...options }
    ) as any;
}

export type SupportTicketNewVariables = {
    data: SupportTicketNewVariablesData;
};

type SupportTicketNewVariablesData = SupportTicketNewInput;

export type SupportTicketNewData = {
    support_ticket_new: SupportTicketNewDataSupportTicketNew;
};

type SupportTicketNewDataSupportTicketNew = SupportTicketPart & {
    __typename?: 'SupportTicket';
};

useQuerySupportTicketPriorities.Document = gql`
    query supportTicketPriorities {
        supportTicketPriorities {
            id
            label
            priority
        }
    }
` as DocumentNode;

export function useQuerySupportTicketPriorities(
    options?: QueryHookOptions<
        SupportTicketPrioritiesData,
        SupportTicketPrioritiesVariables
    >
) {
    const result = useQuery<
        SupportTicketPrioritiesData,
        SupportTicketPrioritiesVariables
    >(useQuerySupportTicketPriorities.Document, {
        ...queryDefaultOptions,
        ...options,
    });
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQuerySupportTicketPriorities.lazy = function (
    options?: LazyQueryHookOptions<
        SupportTicketPrioritiesData,
        SupportTicketPrioritiesVariables
    >
) {
    return useLazyQuery(useQuerySupportTicketPriorities.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type SupportTicketPrioritiesVariables = {};

export type SupportTicketPrioritiesData = {
    supportTicketPriorities: Array<SupportTicketPrioritiesDataSupportTicketPriorities>;
};

type SupportTicketPrioritiesDataSupportTicketPriorities = {
    __typename?: 'SupportTicketPriorityEnum';
    id: SupportTicketPrioritiesDataSupportTicketPrioritiesId;
    label: SupportTicketPrioritiesDataSupportTicketPrioritiesLabel;
    priority: SupportTicketPrioritiesDataSupportTicketPrioritiesPriority;
};

type SupportTicketPrioritiesDataSupportTicketPrioritiesId = string;
type SupportTicketPrioritiesDataSupportTicketPrioritiesLabel = string;
type SupportTicketPrioritiesDataSupportTicketPrioritiesPriority = number;

useQuerySupportTicketRevisers.Document = gql`
    query supportTicketRevisers {
        supportTicketRevisers {
            id
            name
        }
    }
` as DocumentNode;

export function useQuerySupportTicketRevisers(
    options?: QueryHookOptions<
        SupportTicketRevisersData,
        SupportTicketRevisersVariables
    >
) {
    const result = useQuery<
        SupportTicketRevisersData,
        SupportTicketRevisersVariables
    >(useQuerySupportTicketRevisers.Document, {
        ...queryDefaultOptions,
        ...options,
    });
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQuerySupportTicketRevisers.lazy = function (
    options?: LazyQueryHookOptions<
        SupportTicketRevisersData,
        SupportTicketRevisersVariables
    >
) {
    return useLazyQuery(useQuerySupportTicketRevisers.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type SupportTicketRevisersVariables = {};

export type SupportTicketRevisersData = {
    supportTicketRevisers: Array<SupportTicketRevisersDataSupportTicketRevisers>;
};

type SupportTicketRevisersDataSupportTicketRevisers = {
    __typename?: 'SupportTicketReviserEnum';
    id: SupportTicketRevisersDataSupportTicketRevisersId;
    name: SupportTicketRevisersDataSupportTicketRevisersName;
};

type SupportTicketRevisersDataSupportTicketRevisersId = string;
type SupportTicketRevisersDataSupportTicketRevisersName = string;

/*,
 * Fragments from undefined,
 */
export type ProductTeamspeakPart = {
    id: ProductTeamspeakPartId;
    name: ProductTeamspeakPartName;
    address?: Nullable<ProductTeamspeakPartAddress>;
    create: ProductTeamspeakPartCreate;
    slot: ProductTeamspeakPartSlot;
    ts3Link?: Nullable<ProductTeamspeakPartTs3Link>;
    ports: Array<ProductTeamspeakPartPorts>;
    hostNode: ProductTeamspeakPartHostNode;
    product: ProductTeamspeakPartProduct;
    productTemplate: ProductTeamspeakPartProductTemplate;
    hasRunningTask: ProductTeamspeakPartHasRunningTask;
};

type ProductTeamspeakPartId = string;
type ProductTeamspeakPartName = string;
type ProductTeamspeakPartAddress = string;
type ProductTeamspeakPartCreate = any;
type ProductTeamspeakPartSlot = number;
type ProductTeamspeakPartTs3Link = string;
type ProductTeamspeakPartPorts = {
    __typename?: 'HostNodePort';
    id: ProductTeamspeakPartPortsId;
    port: ProductTeamspeakPartPortsPort;
};

type ProductTeamspeakPartPortsId = string;
type ProductTeamspeakPartPortsPort = number;
type ProductTeamspeakPartHostNode = {
    __typename?: 'HostNode';
    id: ProductTeamspeakPartHostNodeId;
    cpuInfo: ProductTeamspeakPartHostNodeCpuInfo;
    name: ProductTeamspeakPartHostNodeName;
};

type ProductTeamspeakPartHostNodeId = string;
type ProductTeamspeakPartHostNodeCpuInfo = string;
type ProductTeamspeakPartHostNodeName = string;
type ProductTeamspeakPartProduct = {
    __typename?: 'Product';
    id: ProductTeamspeakPartProductId;
    title: ProductTeamspeakPartProductTitle;
    locked: ProductTeamspeakPartProductLocked;
    expire?: Nullable<ProductTeamspeakPartProductExpire>;
    user: ProductTeamspeakPartProductUser;
};

type ProductTeamspeakPartProductId = string;
type ProductTeamspeakPartProductTitle = string;
type ProductTeamspeakPartProductLocked = boolean;
type ProductTeamspeakPartProductExpire = any;
type ProductTeamspeakPartProductUser = {
    __typename?: 'User';
    id: ProductTeamspeakPartProductUserId;
    publicName: ProductTeamspeakPartProductUserPublicName;
};

type ProductTeamspeakPartProductUserId = string;
type ProductTeamspeakPartProductUserPublicName = string;
type ProductTeamspeakPartProductTemplate = {
    __typename?: 'ProductTemplateTeamspeak';
    id: ProductTeamspeakPartProductTemplateId;
    title: ProductTeamspeakPartProductTemplateTitle;
};

type ProductTeamspeakPartProductTemplateId = string;
type ProductTeamspeakPartProductTemplateTitle = string;
type ProductTeamspeakPartHasRunningTask = boolean;
const _gql_ProductTeamspeakPart = gql`
    fragment ProductTeamspeakPart on ProductTeamspeak {
        id
        name
        address
        create
        slot
        ts3Link
        ports {
            id
            port
        }
        hostNode {
            id
            cpuInfo
            name
        }
        product {
            id
            title
            locked
            expire
            user {
                id
                publicName
            }
        }
        productTemplate {
            id
            title
        }
        hasRunningTask
    }
`;

/*,
 * Operations from undefined,
 */

useMutationProductTeamspeakChangeLabel.Document = gql`
    mutation productTeamspeakChangeLabel($id: ID!, $label: String!) {
        productTeamspeakChangeLabel(id: $id, label: $label) {
            ...ProductTeamspeakPart
        }
    }
    ${_gql_ProductTeamspeakPart}
` as DocumentNode;

export function useMutationProductTeamspeakChangeLabel(
    options?: MutationHookOptions<
        ProductTeamspeakChangeLabelData,
        ProductTeamspeakChangeLabelVariables
    >
): MutationHookFn<
    ProductTeamspeakChangeLabelData,
    ProductTeamspeakChangeLabelVariables
> {
    return useMutation<
        ProductTeamspeakChangeLabelData,
        ProductTeamspeakChangeLabelVariables
    >(useMutationProductTeamspeakChangeLabel.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type ProductTeamspeakChangeLabelVariables = {
    id: ProductTeamspeakChangeLabelVariablesId;
    label: ProductTeamspeakChangeLabelVariablesLabel;
};

type ProductTeamspeakChangeLabelVariablesId = string;
type ProductTeamspeakChangeLabelVariablesLabel = string;

export type ProductTeamspeakChangeLabelData = {
    productTeamspeakChangeLabel: ProductTeamspeakChangeLabelDataProductTeamspeakChangeLabel;
};

type ProductTeamspeakChangeLabelDataProductTeamspeakChangeLabel = ProductTeamspeakPart & {
    __typename?: 'ProductTeamspeak';
};

useQueryProductTeamspeaks.Document = gql`
    query productTeamspeaks($filter: CordFilter) {
        productTeamspeaks(filter: $filter) {
            edges {
                id
                name
                address
                create
                ports {
                    id
                }
                product {
                    id
                    expire
                    title
                    user {
                        id
                        publicName
                    }
                }
                productTemplate {
                    id
                    title
                }
            }
            pageInfo {
                totalCount
            }
        }
    }
` as DocumentNode;

export function useQueryProductTeamspeaks(
    options?: QueryHookOptions<
        ProductTeamspeaksData,
        ProductTeamspeaksVariables
    >
) {
    const result = useQuery<ProductTeamspeaksData, ProductTeamspeaksVariables>(
        useQueryProductTeamspeaks.Document,
        { ...queryDefaultOptions, ...options }
    );
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryProductTeamspeaks.lazy = function (
    options?: LazyQueryHookOptions<
        ProductTeamspeaksData,
        ProductTeamspeaksVariables
    >
) {
    return useLazyQuery(useQueryProductTeamspeaks.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type ProductTeamspeaksVariables = {
    filter?: Nullable<ProductTeamspeaksVariablesFilter>;
};

type ProductTeamspeaksVariablesFilter = CordFilter;

export type ProductTeamspeaksData = {
    productTeamspeaks: ProductTeamspeaksDataProductTeamspeaks;
};

type ProductTeamspeaksDataProductTeamspeaks = {
    __typename?: 'ProductTeamspeakResultMany';
    edges: Array<ProductTeamspeaksDataProductTeamspeaksEdges>;
    pageInfo: ProductTeamspeaksDataProductTeamspeaksPageInfo;
};

type ProductTeamspeaksDataProductTeamspeaksEdges = {
    __typename?: 'ProductTeamspeak';
    id: ProductTeamspeaksDataProductTeamspeaksEdgesId;
    name: ProductTeamspeaksDataProductTeamspeaksEdgesName;
    address?: Nullable<ProductTeamspeaksDataProductTeamspeaksEdgesAddress>;
    create: ProductTeamspeaksDataProductTeamspeaksEdgesCreate;
    ports: Array<ProductTeamspeaksDataProductTeamspeaksEdgesPorts>;
    product: ProductTeamspeaksDataProductTeamspeaksEdgesProduct;
    productTemplate: ProductTeamspeaksDataProductTeamspeaksEdgesProductTemplate;
};

type ProductTeamspeaksDataProductTeamspeaksEdgesId = string;
type ProductTeamspeaksDataProductTeamspeaksEdgesName = string;
type ProductTeamspeaksDataProductTeamspeaksEdgesAddress = string;
type ProductTeamspeaksDataProductTeamspeaksEdgesCreate = any;
type ProductTeamspeaksDataProductTeamspeaksEdgesPorts = {
    __typename?: 'HostNodePort';
    id: ProductTeamspeaksDataProductTeamspeaksEdgesPortsId;
};

type ProductTeamspeaksDataProductTeamspeaksEdgesPortsId = string;
type ProductTeamspeaksDataProductTeamspeaksEdgesProduct = {
    __typename?: 'Product';
    id: ProductTeamspeaksDataProductTeamspeaksEdgesProductId;
    expire?: Nullable<ProductTeamspeaksDataProductTeamspeaksEdgesProductExpire>;
    title: ProductTeamspeaksDataProductTeamspeaksEdgesProductTitle;
    user: ProductTeamspeaksDataProductTeamspeaksEdgesProductUser;
};

type ProductTeamspeaksDataProductTeamspeaksEdgesProductId = string;
type ProductTeamspeaksDataProductTeamspeaksEdgesProductExpire = any;
type ProductTeamspeaksDataProductTeamspeaksEdgesProductTitle = string;
type ProductTeamspeaksDataProductTeamspeaksEdgesProductUser = {
    __typename?: 'User';
    id: ProductTeamspeaksDataProductTeamspeaksEdgesProductUserId;
    publicName: ProductTeamspeaksDataProductTeamspeaksEdgesProductUserPublicName;
};

type ProductTeamspeaksDataProductTeamspeaksEdgesProductUserId = string;
type ProductTeamspeaksDataProductTeamspeaksEdgesProductUserPublicName = string;
type ProductTeamspeaksDataProductTeamspeaksEdgesProductTemplate = {
    __typename?: 'ProductTemplateTeamspeak';
    id: ProductTeamspeaksDataProductTeamspeaksEdgesProductTemplateId;
    title: ProductTeamspeaksDataProductTeamspeaksEdgesProductTemplateTitle;
};

type ProductTeamspeaksDataProductTeamspeaksEdgesProductTemplateId = string;
type ProductTeamspeaksDataProductTeamspeaksEdgesProductTemplateTitle = string;
type ProductTeamspeaksDataProductTeamspeaksPageInfo = {
    __typename?: 'CordPageInfo';
    totalCount: ProductTeamspeaksDataProductTeamspeaksPageInfoTotalCount;
};

type ProductTeamspeaksDataProductTeamspeaksPageInfoTotalCount = number;

useQueryMyProductTeamspeaks.Document = gql`
    query MyProductTeamspeaks {
        productTeamspeaksMy {
            id
            name
            address
            create
            ports {
                id
            }
            product {
                id
                title
                expire
                user {
                    id
                    publicName
                }
            }
            productTemplate {
                id
                title
            }
        }
    }
` as DocumentNode;

export function useQueryMyProductTeamspeaks(
    options?: QueryHookOptions<
        MyProductTeamspeaksData,
        MyProductTeamspeaksVariables
    >
) {
    const result = useQuery<
        MyProductTeamspeaksData,
        MyProductTeamspeaksVariables
    >(useQueryMyProductTeamspeaks.Document, {
        ...queryDefaultOptions,
        ...options,
    });
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryMyProductTeamspeaks.lazy = function (
    options?: LazyQueryHookOptions<
        MyProductTeamspeaksData,
        MyProductTeamspeaksVariables
    >
) {
    return useLazyQuery(useQueryMyProductTeamspeaks.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type MyProductTeamspeaksVariables = {};

export type MyProductTeamspeaksData = {
    productTeamspeaksMy: Array<MyProductTeamspeaksDataProductTeamspeaksMy>;
};

type MyProductTeamspeaksDataProductTeamspeaksMy = {
    __typename?: 'ProductTeamspeak';
    id: MyProductTeamspeaksDataProductTeamspeaksMyId;
    name: MyProductTeamspeaksDataProductTeamspeaksMyName;
    address?: Nullable<MyProductTeamspeaksDataProductTeamspeaksMyAddress>;
    create: MyProductTeamspeaksDataProductTeamspeaksMyCreate;
    ports: Array<MyProductTeamspeaksDataProductTeamspeaksMyPorts>;
    product: MyProductTeamspeaksDataProductTeamspeaksMyProduct;
    productTemplate: MyProductTeamspeaksDataProductTeamspeaksMyProductTemplate;
};

type MyProductTeamspeaksDataProductTeamspeaksMyId = string;
type MyProductTeamspeaksDataProductTeamspeaksMyName = string;
type MyProductTeamspeaksDataProductTeamspeaksMyAddress = string;
type MyProductTeamspeaksDataProductTeamspeaksMyCreate = any;
type MyProductTeamspeaksDataProductTeamspeaksMyPorts = {
    __typename?: 'HostNodePort';
    id: MyProductTeamspeaksDataProductTeamspeaksMyPortsId;
};

type MyProductTeamspeaksDataProductTeamspeaksMyPortsId = string;
type MyProductTeamspeaksDataProductTeamspeaksMyProduct = {
    __typename?: 'Product';
    id: MyProductTeamspeaksDataProductTeamspeaksMyProductId;
    title: MyProductTeamspeaksDataProductTeamspeaksMyProductTitle;
    expire?: Nullable<MyProductTeamspeaksDataProductTeamspeaksMyProductExpire>;
    user: MyProductTeamspeaksDataProductTeamspeaksMyProductUser;
};

type MyProductTeamspeaksDataProductTeamspeaksMyProductId = string;
type MyProductTeamspeaksDataProductTeamspeaksMyProductTitle = string;
type MyProductTeamspeaksDataProductTeamspeaksMyProductExpire = any;
type MyProductTeamspeaksDataProductTeamspeaksMyProductUser = {
    __typename?: 'User';
    id: MyProductTeamspeaksDataProductTeamspeaksMyProductUserId;
    publicName: MyProductTeamspeaksDataProductTeamspeaksMyProductUserPublicName;
};

type MyProductTeamspeaksDataProductTeamspeaksMyProductUserId = string;
type MyProductTeamspeaksDataProductTeamspeaksMyProductUserPublicName = string;
type MyProductTeamspeaksDataProductTeamspeaksMyProductTemplate = {
    __typename?: 'ProductTemplateTeamspeak';
    id: MyProductTeamspeaksDataProductTeamspeaksMyProductTemplateId;
    title: MyProductTeamspeaksDataProductTeamspeaksMyProductTemplateTitle;
};

type MyProductTeamspeaksDataProductTeamspeaksMyProductTemplateId = string;
type MyProductTeamspeaksDataProductTeamspeaksMyProductTemplateTitle = string;

useQueryProductTeamspeakById.Document = gql`
    query productTeamspeakById($id: ID!) {
        productTeamspeakById(id: $id) {
            ...ProductTeamspeakPart
        }
    }
    ${_gql_ProductTeamspeakPart}
` as DocumentNode;

export function useQueryProductTeamspeakById(
    options?: QueryHookOptions<
        ProductTeamspeakByIdData,
        ProductTeamspeakByIdVariables
    >
) {
    const result = useQuery<
        ProductTeamspeakByIdData,
        ProductTeamspeakByIdVariables
    >(useQueryProductTeamspeakById.Document, {
        ...queryDefaultOptions,
        ...options,
    });
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryProductTeamspeakById.lazy = function (
    options?: LazyQueryHookOptions<
        ProductTeamspeakByIdData,
        ProductTeamspeakByIdVariables
    >
) {
    return useLazyQuery(useQueryProductTeamspeakById.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type ProductTeamspeakByIdVariables = {
    id: ProductTeamspeakByIdVariablesId;
};

type ProductTeamspeakByIdVariablesId = string;

export type ProductTeamspeakByIdData = {
    productTeamspeakById: ProductTeamspeakByIdDataProductTeamspeakById;
};

type ProductTeamspeakByIdDataProductTeamspeakById = ProductTeamspeakPart & {
    __typename?: 'ProductTeamspeak';
};

useQueryProductTeamspeakTokens.Document = gql`
    query productTeamspeakTokens($teamspeakId: ID!) {
        productTeamspeakTokens(teamspeakId: $teamspeakId) {
            group
            token
        }
    }
` as DocumentNode;

export function useQueryProductTeamspeakTokens(
    options?: QueryHookOptions<
        ProductTeamspeakTokensData,
        ProductTeamspeakTokensVariables
    >
) {
    const result = useQuery<
        ProductTeamspeakTokensData,
        ProductTeamspeakTokensVariables
    >(useQueryProductTeamspeakTokens.Document, {
        ...queryDefaultOptions,
        ...options,
    });
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryProductTeamspeakTokens.lazy = function (
    options?: LazyQueryHookOptions<
        ProductTeamspeakTokensData,
        ProductTeamspeakTokensVariables
    >
) {
    return useLazyQuery(useQueryProductTeamspeakTokens.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type ProductTeamspeakTokensVariables = {
    teamspeakId: ProductTeamspeakTokensVariablesTeamspeakId;
};

type ProductTeamspeakTokensVariablesTeamspeakId = string;

export type ProductTeamspeakTokensData = {
    productTeamspeakTokens: Array<ProductTeamspeakTokensDataProductTeamspeakTokens>;
};

type ProductTeamspeakTokensDataProductTeamspeakTokens = {
    __typename?: 'ProductTeamspeakOutputToken';
    group: ProductTeamspeakTokensDataProductTeamspeakTokensGroup;
    token: ProductTeamspeakTokensDataProductTeamspeakTokensToken;
};

type ProductTeamspeakTokensDataProductTeamspeakTokensGroup = string;
type ProductTeamspeakTokensDataProductTeamspeakTokensToken = string;

useQueryProductTeamspeakRunning.Document = gql`
    query productTeamspeakRunning($teamspeakId: ID!) {
        productTeamspeakRunning(teamspeakId: $teamspeakId)
    }
` as DocumentNode;

export function useQueryProductTeamspeakRunning(
    options?: QueryHookOptions<
        ProductTeamspeakRunningData,
        ProductTeamspeakRunningVariables
    >
) {
    const result = useQuery<
        ProductTeamspeakRunningData,
        ProductTeamspeakRunningVariables
    >(useQueryProductTeamspeakRunning.Document, {
        ...queryDefaultOptions,
        ...options,
    });
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryProductTeamspeakRunning.lazy = function (
    options?: LazyQueryHookOptions<
        ProductTeamspeakRunningData,
        ProductTeamspeakRunningVariables
    >
) {
    return useLazyQuery(useQueryProductTeamspeakRunning.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type ProductTeamspeakRunningVariables = {
    teamspeakId: ProductTeamspeakRunningVariablesTeamspeakId;
};

type ProductTeamspeakRunningVariablesTeamspeakId = string;

export type ProductTeamspeakRunningData = {
    productTeamspeakRunning: ProductTeamspeakRunningDataProductTeamspeakRunning;
};

type ProductTeamspeakRunningDataProductTeamspeakRunning = boolean;

useMutationProductTeamspeakTokenCreate.Document = gql`
    mutation productTeamspeakTokenCreate($teamspeakId: ID!, $group: String!) {
        productTeamspeakTokenCreate(teamspeakId: $teamspeakId, group: $group)
    }
` as DocumentNode;

export function useMutationProductTeamspeakTokenCreate(
    options?: MutationHookOptions<
        ProductTeamspeakTokenCreateData,
        ProductTeamspeakTokenCreateVariables
    >
): MutationHookFn<
    ProductTeamspeakTokenCreateData,
    ProductTeamspeakTokenCreateVariables
> {
    return useMutation<
        ProductTeamspeakTokenCreateData,
        ProductTeamspeakTokenCreateVariables
    >(useMutationProductTeamspeakTokenCreate.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type ProductTeamspeakTokenCreateVariables = {
    teamspeakId: ProductTeamspeakTokenCreateVariablesTeamspeakId;
    group: ProductTeamspeakTokenCreateVariablesGroup;
};

type ProductTeamspeakTokenCreateVariablesTeamspeakId = string;
type ProductTeamspeakTokenCreateVariablesGroup = string;

export type ProductTeamspeakTokenCreateData = {
    productTeamspeakTokenCreate: ProductTeamspeakTokenCreateDataProductTeamspeakTokenCreate;
};

type ProductTeamspeakTokenCreateDataProductTeamspeakTokenCreate = boolean;

useMutationProductTeamspeakTokenDelete.Document = gql`
    mutation productTeamspeakTokenDelete($teamspeakId: ID!, $token: String!) {
        productTeamspeakTokenDelete(teamspeakId: $teamspeakId, token: $token)
    }
` as DocumentNode;

export function useMutationProductTeamspeakTokenDelete(
    options?: MutationHookOptions<
        ProductTeamspeakTokenDeleteData,
        ProductTeamspeakTokenDeleteVariables
    >
): MutationHookFn<
    ProductTeamspeakTokenDeleteData,
    ProductTeamspeakTokenDeleteVariables
> {
    return useMutation<
        ProductTeamspeakTokenDeleteData,
        ProductTeamspeakTokenDeleteVariables
    >(useMutationProductTeamspeakTokenDelete.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type ProductTeamspeakTokenDeleteVariables = {
    teamspeakId: ProductTeamspeakTokenDeleteVariablesTeamspeakId;
    token: ProductTeamspeakTokenDeleteVariablesToken;
};

type ProductTeamspeakTokenDeleteVariablesTeamspeakId = string;
type ProductTeamspeakTokenDeleteVariablesToken = string;

export type ProductTeamspeakTokenDeleteData = {
    productTeamspeakTokenDelete: ProductTeamspeakTokenDeleteDataProductTeamspeakTokenDelete;
};

type ProductTeamspeakTokenDeleteDataProductTeamspeakTokenDelete = boolean;

useQueryProductTeamspeakExist.Document = gql`
    query productTeamspeakExist($teamspeakId: ID!) {
        productTeamspeakExist(teamspeakId: $teamspeakId)
    }
` as DocumentNode;

export function useQueryProductTeamspeakExist(
    options?: QueryHookOptions<
        ProductTeamspeakExistData,
        ProductTeamspeakExistVariables
    >
) {
    const result = useQuery<
        ProductTeamspeakExistData,
        ProductTeamspeakExistVariables
    >(useQueryProductTeamspeakExist.Document, {
        ...queryDefaultOptions,
        ...options,
    });
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryProductTeamspeakExist.lazy = function (
    options?: LazyQueryHookOptions<
        ProductTeamspeakExistData,
        ProductTeamspeakExistVariables
    >
) {
    return useLazyQuery(useQueryProductTeamspeakExist.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type ProductTeamspeakExistVariables = {
    teamspeakId: ProductTeamspeakExistVariablesTeamspeakId;
};

type ProductTeamspeakExistVariablesTeamspeakId = string;

export type ProductTeamspeakExistData = {
    productTeamspeakExist: ProductTeamspeakExistDataProductTeamspeakExist;
};

type ProductTeamspeakExistDataProductTeamspeakExist = boolean;

useMutationProductTeamspeakStart.Document = gql`
    mutation productTeamspeakStart($teamspeakId: ID!) {
        productTeamspeakStart(teamspeakId: $teamspeakId) {
            ...ProductTeamspeakPart
        }
    }
    ${_gql_ProductTeamspeakPart}
` as DocumentNode;

export function useMutationProductTeamspeakStart(
    options?: MutationHookOptions<
        ProductTeamspeakStartData,
        ProductTeamspeakStartVariables
    >
): MutationHookFn<ProductTeamspeakStartData, ProductTeamspeakStartVariables> {
    return useMutation<
        ProductTeamspeakStartData,
        ProductTeamspeakStartVariables
    >(useMutationProductTeamspeakStart.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type ProductTeamspeakStartVariables = {
    teamspeakId: ProductTeamspeakStartVariablesTeamspeakId;
};

type ProductTeamspeakStartVariablesTeamspeakId = string;

export type ProductTeamspeakStartData = {
    productTeamspeakStart: ProductTeamspeakStartDataProductTeamspeakStart;
};

type ProductTeamspeakStartDataProductTeamspeakStart = ProductTeamspeakPart & {
    __typename?: 'ProductTeamspeak';
};

useMutationProductTeamspeakRemove.Document = gql`
    mutation productTeamspeakRemove($id: ID!) {
        productTeamspeakRemove(id: $id)
    }
` as DocumentNode;

export function useMutationProductTeamspeakRemove(
    options?: MutationHookOptions<
        ProductTeamspeakRemoveData,
        ProductTeamspeakRemoveVariables
    >
): MutationHookFn<ProductTeamspeakRemoveData, ProductTeamspeakRemoveVariables> {
    return useMutation<
        ProductTeamspeakRemoveData,
        ProductTeamspeakRemoveVariables
    >(useMutationProductTeamspeakRemove.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type ProductTeamspeakRemoveVariables = {
    id: ProductTeamspeakRemoveVariablesId;
};

type ProductTeamspeakRemoveVariablesId = string;

export type ProductTeamspeakRemoveData = {
    productTeamspeakRemove: ProductTeamspeakRemoveDataProductTeamspeakRemove;
};

type ProductTeamspeakRemoveDataProductTeamspeakRemove = boolean;

useMutationProductTeamspeakStop.Document = gql`
    mutation productTeamspeakStop($teamspeakId: ID!) {
        productTeamspeakStop(teamspeakId: $teamspeakId) {
            ...ProductTeamspeakPart
        }
    }
    ${_gql_ProductTeamspeakPart}
` as DocumentNode;

export function useMutationProductTeamspeakStop(
    options?: MutationHookOptions<
        ProductTeamspeakStopData,
        ProductTeamspeakStopVariables
    >
): MutationHookFn<ProductTeamspeakStopData, ProductTeamspeakStopVariables> {
    return useMutation<ProductTeamspeakStopData, ProductTeamspeakStopVariables>(
        useMutationProductTeamspeakStop.Document,
        { ...mutationDefaultOptions, ...options }
    ) as any;
}

export type ProductTeamspeakStopVariables = {
    teamspeakId: ProductTeamspeakStopVariablesTeamspeakId;
};

type ProductTeamspeakStopVariablesTeamspeakId = string;

export type ProductTeamspeakStopData = {
    productTeamspeakStop: ProductTeamspeakStopDataProductTeamspeakStop;
};

type ProductTeamspeakStopDataProductTeamspeakStop = ProductTeamspeakPart & {
    __typename?: 'ProductTeamspeak';
};

useMutationProductTeamspeakInstall.Document = gql`
    mutation productTeamspeakInstall($teamspeakId: ID!) {
        productTeamspeakInstall(teamspeakId: $teamspeakId) {
            ...ProductTeamspeakPart
        }
    }
    ${_gql_ProductTeamspeakPart}
` as DocumentNode;

export function useMutationProductTeamspeakInstall(
    options?: MutationHookOptions<
        ProductTeamspeakInstallData,
        ProductTeamspeakInstallVariables
    >
): MutationHookFn<
    ProductTeamspeakInstallData,
    ProductTeamspeakInstallVariables
> {
    return useMutation<
        ProductTeamspeakInstallData,
        ProductTeamspeakInstallVariables
    >(useMutationProductTeamspeakInstall.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type ProductTeamspeakInstallVariables = {
    teamspeakId: ProductTeamspeakInstallVariablesTeamspeakId;
};

type ProductTeamspeakInstallVariablesTeamspeakId = string;

export type ProductTeamspeakInstallData = {
    productTeamspeakInstall: ProductTeamspeakInstallDataProductTeamspeakInstall;
};

type ProductTeamspeakInstallDataProductTeamspeakInstall = ProductTeamspeakPart & {
    __typename?: 'ProductTeamspeak';
};

/*,
 * Fragments from undefined,
 */
export type ProductTemplateDomainPart = {
    id: ProductTemplateDomainPartId;
    options: Array<ProductTemplateDomainPartOptions>;
    title: ProductTemplateDomainPartTitle;
    setup: ProductTemplateDomainPartSetup;
    basePrice: ProductTemplateDomainPartBasePrice;
    active: ProductTemplateDomainPartActive;
    gTld: ProductTemplateDomainPartGTld;
    update: ProductTemplateDomainPartUpdate;
    attributes: ProductTemplateDomainPartAttributes;
    urlKey?: Nullable<ProductTemplateDomainPartUrlKey>;
};

type ProductTemplateDomainPartId = string;
type ProductTemplateDomainPartOptions = {
    __typename?: 'ProductTemplateOption';
    id: ProductTemplateDomainPartOptionsId;
};

type ProductTemplateDomainPartOptionsId = string;
type ProductTemplateDomainPartTitle = string;
type ProductTemplateDomainPartSetup = number;
type ProductTemplateDomainPartBasePrice = number;
type ProductTemplateDomainPartActive = boolean;
type ProductTemplateDomainPartGTld = string;
type ProductTemplateDomainPartUpdate = any;
type ProductTemplateDomainPartAttributes = any;
type ProductTemplateDomainPartUrlKey = string;
const _gql_ProductTemplateDomainPart = gql`
    fragment ProductTemplateDomainPart on ProductTemplateDomain {
        id
        options {
            id
        }
        title
        setup
        basePrice
        active
        gTld
        update
        attributes
        urlKey
    }
`;

/*,
 * Operations from undefined,
 */

useQueryProductTemplateDomainById.Document = gql`
    query ProductTemplateDomainById($id: ID!) {
        productTemplateDomainById(id: $id) {
            ...ProductTemplateDomainPart
        }
    }
    ${_gql_ProductTemplateDomainPart}
` as DocumentNode;

export function useQueryProductTemplateDomainById(
    options?: QueryHookOptions<
        ProductTemplateDomainByIdData,
        ProductTemplateDomainByIdVariables
    >
) {
    const result = useQuery<
        ProductTemplateDomainByIdData,
        ProductTemplateDomainByIdVariables
    >(useQueryProductTemplateDomainById.Document, {
        ...queryDefaultOptions,
        ...options,
    });
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryProductTemplateDomainById.lazy = function (
    options?: LazyQueryHookOptions<
        ProductTemplateDomainByIdData,
        ProductTemplateDomainByIdVariables
    >
) {
    return useLazyQuery(useQueryProductTemplateDomainById.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type ProductTemplateDomainByIdVariables = {
    id: ProductTemplateDomainByIdVariablesId;
};

type ProductTemplateDomainByIdVariablesId = string;

export type ProductTemplateDomainByIdData = {
    productTemplateDomainById: ProductTemplateDomainByIdDataProductTemplateDomainById;
};

type ProductTemplateDomainByIdDataProductTemplateDomainById = ProductTemplateDomainPart & {
    __typename?: 'ProductTemplateDomain';
};

useQueryProductTemplateDomains.Document = gql`
    query ProductTemplateDomains($filter: CordFilter) {
        productTemplateDomains(filter: $filter) {
            edges {
                id
                options {
                    id
                }
                urlKey
                title
                setup
                basePrice
                gTld
                active
                update
            }
            pageInfo {
                totalCount
            }
        }
    }
` as DocumentNode;

export function useQueryProductTemplateDomains(
    options?: QueryHookOptions<
        ProductTemplateDomainsData,
        ProductTemplateDomainsVariables
    >
) {
    const result = useQuery<
        ProductTemplateDomainsData,
        ProductTemplateDomainsVariables
    >(useQueryProductTemplateDomains.Document, {
        ...queryDefaultOptions,
        ...options,
    });
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryProductTemplateDomains.lazy = function (
    options?: LazyQueryHookOptions<
        ProductTemplateDomainsData,
        ProductTemplateDomainsVariables
    >
) {
    return useLazyQuery(useQueryProductTemplateDomains.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type ProductTemplateDomainsVariables = {
    filter?: Nullable<ProductTemplateDomainsVariablesFilter>;
};

type ProductTemplateDomainsVariablesFilter = CordFilter;

export type ProductTemplateDomainsData = {
    productTemplateDomains: ProductTemplateDomainsDataProductTemplateDomains;
};

type ProductTemplateDomainsDataProductTemplateDomains = {
    __typename?: 'ProductTemplateDomainResultMany';
    edges: Array<ProductTemplateDomainsDataProductTemplateDomainsEdges>;
    pageInfo: ProductTemplateDomainsDataProductTemplateDomainsPageInfo;
};

type ProductTemplateDomainsDataProductTemplateDomainsEdges = {
    __typename?: 'ProductTemplateDomain';
    id: ProductTemplateDomainsDataProductTemplateDomainsEdgesId;
    options: Array<ProductTemplateDomainsDataProductTemplateDomainsEdgesOptions>;
    urlKey?: Nullable<ProductTemplateDomainsDataProductTemplateDomainsEdgesUrlKey>;
    title: ProductTemplateDomainsDataProductTemplateDomainsEdgesTitle;
    setup: ProductTemplateDomainsDataProductTemplateDomainsEdgesSetup;
    basePrice: ProductTemplateDomainsDataProductTemplateDomainsEdgesBasePrice;
    gTld: ProductTemplateDomainsDataProductTemplateDomainsEdgesGTld;
    active: ProductTemplateDomainsDataProductTemplateDomainsEdgesActive;
    update: ProductTemplateDomainsDataProductTemplateDomainsEdgesUpdate;
};

type ProductTemplateDomainsDataProductTemplateDomainsEdgesId = string;
type ProductTemplateDomainsDataProductTemplateDomainsEdgesOptions = {
    __typename?: 'ProductTemplateOption';
    id: ProductTemplateDomainsDataProductTemplateDomainsEdgesOptionsId;
};

type ProductTemplateDomainsDataProductTemplateDomainsEdgesOptionsId = string;
type ProductTemplateDomainsDataProductTemplateDomainsEdgesUrlKey = string;
type ProductTemplateDomainsDataProductTemplateDomainsEdgesTitle = string;
type ProductTemplateDomainsDataProductTemplateDomainsEdgesSetup = number;
type ProductTemplateDomainsDataProductTemplateDomainsEdgesBasePrice = number;
type ProductTemplateDomainsDataProductTemplateDomainsEdgesGTld = string;
type ProductTemplateDomainsDataProductTemplateDomainsEdgesActive = boolean;
type ProductTemplateDomainsDataProductTemplateDomainsEdgesUpdate = any;
type ProductTemplateDomainsDataProductTemplateDomainsPageInfo = {
    __typename?: 'CordPageInfo';
    totalCount: ProductTemplateDomainsDataProductTemplateDomainsPageInfoTotalCount;
};

type ProductTemplateDomainsDataProductTemplateDomainsPageInfoTotalCount = number;

useMutationCreateProductTemplateDomain.Document = gql`
    mutation createProductTemplateDomain(
        $title: String!
        $setup: Float!
        $basePrice: Float!
        $urlKey: String!
        $gTld: String!
        $active: Boolean!
    ) {
        productTemplateDomainCreate(
            title: $title
            gTld: $gTld
            setup: $setup
            basePrice: $basePrice
            urlKey: $urlKey
            active: $active
        ) {
            id
        }
    }
` as DocumentNode;

export function useMutationCreateProductTemplateDomain(
    options?: MutationHookOptions<
        CreateProductTemplateDomainData,
        CreateProductTemplateDomainVariables
    >
): MutationHookFn<
    CreateProductTemplateDomainData,
    CreateProductTemplateDomainVariables
> {
    return useMutation<
        CreateProductTemplateDomainData,
        CreateProductTemplateDomainVariables
    >(useMutationCreateProductTemplateDomain.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type CreateProductTemplateDomainVariables = {
    title: CreateProductTemplateDomainVariablesTitle;
    setup: CreateProductTemplateDomainVariablesSetup;
    basePrice: CreateProductTemplateDomainVariablesBasePrice;
    urlKey: CreateProductTemplateDomainVariablesUrlKey;
    gTld: CreateProductTemplateDomainVariablesGTld;
    active: CreateProductTemplateDomainVariablesActive;
};

type CreateProductTemplateDomainVariablesTitle = string;
type CreateProductTemplateDomainVariablesSetup = number;
type CreateProductTemplateDomainVariablesBasePrice = number;
type CreateProductTemplateDomainVariablesUrlKey = string;
type CreateProductTemplateDomainVariablesGTld = string;
type CreateProductTemplateDomainVariablesActive = boolean;

export type CreateProductTemplateDomainData = {
    productTemplateDomainCreate: CreateProductTemplateDomainDataProductTemplateDomainCreate;
};

type CreateProductTemplateDomainDataProductTemplateDomainCreate = {
    __typename?: 'ProductTemplateDomain';
    id: CreateProductTemplateDomainDataProductTemplateDomainCreateId;
};

type CreateProductTemplateDomainDataProductTemplateDomainCreateId = string;

useMutationEditProductTemplateDomain.Document = gql`
    mutation editProductTemplateDomain(
        $id: ID!
        $title: String!
        $setup: Float!
        $basePrice: Float!
        $urlKey: String!
        $gTld: String!
        $active: Boolean!
    ) {
        productTemplateDomainEdit(
            id: $id
            title: $title
            setup: $setup
            gTld: $gTld
            urlKey: $urlKey
            basePrice: $basePrice
            active: $active
        ) {
            ...ProductTemplateDomainPart
        }
    }
    ${_gql_ProductTemplateDomainPart}
` as DocumentNode;

export function useMutationEditProductTemplateDomain(
    options?: MutationHookOptions<
        EditProductTemplateDomainData,
        EditProductTemplateDomainVariables
    >
): MutationHookFn<
    EditProductTemplateDomainData,
    EditProductTemplateDomainVariables
> {
    return useMutation<
        EditProductTemplateDomainData,
        EditProductTemplateDomainVariables
    >(useMutationEditProductTemplateDomain.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type EditProductTemplateDomainVariables = {
    id: EditProductTemplateDomainVariablesId;
    title: EditProductTemplateDomainVariablesTitle;
    setup: EditProductTemplateDomainVariablesSetup;
    basePrice: EditProductTemplateDomainVariablesBasePrice;
    urlKey: EditProductTemplateDomainVariablesUrlKey;
    gTld: EditProductTemplateDomainVariablesGTld;
    active: EditProductTemplateDomainVariablesActive;
};

type EditProductTemplateDomainVariablesId = string;
type EditProductTemplateDomainVariablesTitle = string;
type EditProductTemplateDomainVariablesSetup = number;
type EditProductTemplateDomainVariablesBasePrice = number;
type EditProductTemplateDomainVariablesUrlKey = string;
type EditProductTemplateDomainVariablesGTld = string;
type EditProductTemplateDomainVariablesActive = boolean;

export type EditProductTemplateDomainData = {
    productTemplateDomainEdit: EditProductTemplateDomainDataProductTemplateDomainEdit;
};

type EditProductTemplateDomainDataProductTemplateDomainEdit = ProductTemplateDomainPart & {
    __typename?: 'ProductTemplateDomain';
};

useMutationDeleteProductTemplateDomain.Document = gql`
    mutation deleteProductTemplateDomain($id: ID!) {
        productTemplateDomainDelete(id: $id)
    }
` as DocumentNode;

export function useMutationDeleteProductTemplateDomain(
    options?: MutationHookOptions<
        DeleteProductTemplateDomainData,
        DeleteProductTemplateDomainVariables
    >
): MutationHookFn<
    DeleteProductTemplateDomainData,
    DeleteProductTemplateDomainVariables
> {
    return useMutation<
        DeleteProductTemplateDomainData,
        DeleteProductTemplateDomainVariables
    >(useMutationDeleteProductTemplateDomain.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type DeleteProductTemplateDomainVariables = {
    id: DeleteProductTemplateDomainVariablesId;
};

type DeleteProductTemplateDomainVariablesId = string;

export type DeleteProductTemplateDomainData = {
    productTemplateDomainDelete: DeleteProductTemplateDomainDataProductTemplateDomainDelete;
};

type DeleteProductTemplateDomainDataProductTemplateDomainDelete = boolean;

/*,
 * Fragments from undefined,
 */

/*,
 * Operations from undefined,
 */

useQueryProductTemplateExtendPeriods.Document = gql`
    query productTemplateExtendPeriods($filter: CordFilter) {
        productTemplateExtendPeriods(filter: $filter) {
            edges {
                id
                expression
                discount
                discountFactor
                globalGroup
            }
            pageInfo {
                totalCount
            }
        }
    }
` as DocumentNode;

export function useQueryProductTemplateExtendPeriods(
    options?: QueryHookOptions<
        ProductTemplateExtendPeriodsData,
        ProductTemplateExtendPeriodsVariables
    >
) {
    const result = useQuery<
        ProductTemplateExtendPeriodsData,
        ProductTemplateExtendPeriodsVariables
    >(useQueryProductTemplateExtendPeriods.Document, {
        ...queryDefaultOptions,
        ...options,
    });
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryProductTemplateExtendPeriods.lazy = function (
    options?: LazyQueryHookOptions<
        ProductTemplateExtendPeriodsData,
        ProductTemplateExtendPeriodsVariables
    >
) {
    return useLazyQuery(useQueryProductTemplateExtendPeriods.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type ProductTemplateExtendPeriodsVariables = {
    filter?: Nullable<ProductTemplateExtendPeriodsVariablesFilter>;
};

type ProductTemplateExtendPeriodsVariablesFilter = CordFilter;

export type ProductTemplateExtendPeriodsData = {
    productTemplateExtendPeriods: ProductTemplateExtendPeriodsDataProductTemplateExtendPeriods;
};

type ProductTemplateExtendPeriodsDataProductTemplateExtendPeriods = {
    __typename?: 'ProductTemplateExtendPeriodResultMany';
    edges: Array<ProductTemplateExtendPeriodsDataProductTemplateExtendPeriodsEdges>;
    pageInfo: ProductTemplateExtendPeriodsDataProductTemplateExtendPeriodsPageInfo;
};

type ProductTemplateExtendPeriodsDataProductTemplateExtendPeriodsEdges = {
    __typename?: 'ProductTemplateExtendPeriod';
    id: ProductTemplateExtendPeriodsDataProductTemplateExtendPeriodsEdgesId;
    expression: ProductTemplateExtendPeriodsDataProductTemplateExtendPeriodsEdgesExpression;
    discount: ProductTemplateExtendPeriodsDataProductTemplateExtendPeriodsEdgesDiscount;
    discountFactor: ProductTemplateExtendPeriodsDataProductTemplateExtendPeriodsEdgesDiscountFactor;
    globalGroup?: Nullable<ProductTemplateExtendPeriodsDataProductTemplateExtendPeriodsEdgesGlobalGroup>;
};

type ProductTemplateExtendPeriodsDataProductTemplateExtendPeriodsEdgesId = string;
type ProductTemplateExtendPeriodsDataProductTemplateExtendPeriodsEdgesExpression = string;
type ProductTemplateExtendPeriodsDataProductTemplateExtendPeriodsEdgesDiscount = number;
type ProductTemplateExtendPeriodsDataProductTemplateExtendPeriodsEdgesDiscountFactor = number;
type ProductTemplateExtendPeriodsDataProductTemplateExtendPeriodsEdgesGlobalGroup = string;
type ProductTemplateExtendPeriodsDataProductTemplateExtendPeriodsPageInfo = {
    __typename?: 'CordPageInfo';
    totalCount: ProductTemplateExtendPeriodsDataProductTemplateExtendPeriodsPageInfoTotalCount;
};

type ProductTemplateExtendPeriodsDataProductTemplateExtendPeriodsPageInfoTotalCount = number;

useQueryProductTemplateExtendPeriodById.Document = gql`
    query productTemplateExtendPeriodById($id: ID!) {
        productTemplateExtendPeriodById(id: $id) {
            id
            expression
            discount
            discountFactor
            globalGroup
        }
    }
` as DocumentNode;

export function useQueryProductTemplateExtendPeriodById(
    options?: QueryHookOptions<
        ProductTemplateExtendPeriodByIdData,
        ProductTemplateExtendPeriodByIdVariables
    >
) {
    const result = useQuery<
        ProductTemplateExtendPeriodByIdData,
        ProductTemplateExtendPeriodByIdVariables
    >(useQueryProductTemplateExtendPeriodById.Document, {
        ...queryDefaultOptions,
        ...options,
    });
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryProductTemplateExtendPeriodById.lazy = function (
    options?: LazyQueryHookOptions<
        ProductTemplateExtendPeriodByIdData,
        ProductTemplateExtendPeriodByIdVariables
    >
) {
    return useLazyQuery(useQueryProductTemplateExtendPeriodById.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type ProductTemplateExtendPeriodByIdVariables = {
    id: ProductTemplateExtendPeriodByIdVariablesId;
};

type ProductTemplateExtendPeriodByIdVariablesId = string;

export type ProductTemplateExtendPeriodByIdData = {
    productTemplateExtendPeriodById: ProductTemplateExtendPeriodByIdDataProductTemplateExtendPeriodById;
};

type ProductTemplateExtendPeriodByIdDataProductTemplateExtendPeriodById = {
    __typename?: 'ProductTemplateExtendPeriod';
    id: ProductTemplateExtendPeriodByIdDataProductTemplateExtendPeriodByIdId;
    expression: ProductTemplateExtendPeriodByIdDataProductTemplateExtendPeriodByIdExpression;
    discount: ProductTemplateExtendPeriodByIdDataProductTemplateExtendPeriodByIdDiscount;
    discountFactor: ProductTemplateExtendPeriodByIdDataProductTemplateExtendPeriodByIdDiscountFactor;
    globalGroup?: Nullable<ProductTemplateExtendPeriodByIdDataProductTemplateExtendPeriodByIdGlobalGroup>;
};

type ProductTemplateExtendPeriodByIdDataProductTemplateExtendPeriodByIdId = string;
type ProductTemplateExtendPeriodByIdDataProductTemplateExtendPeriodByIdExpression = string;
type ProductTemplateExtendPeriodByIdDataProductTemplateExtendPeriodByIdDiscount = number;
type ProductTemplateExtendPeriodByIdDataProductTemplateExtendPeriodByIdDiscountFactor = number;
type ProductTemplateExtendPeriodByIdDataProductTemplateExtendPeriodByIdGlobalGroup = string;

useMutationCreateProductTemplateExtendPeriod.Document = gql`
    mutation createProductTemplateExtendPeriod(
        $expression: String!
        $globalGroup: String!
        $discountFactor: Float!
        $discount: Float!
    ) {
        productTemplateExtendPeriodCreate(
            expression: $expression
            globalGroup: $globalGroup
            discountFactor: $discountFactor
            discount: $discount
        ) {
            id
        }
    }
` as DocumentNode;

export function useMutationCreateProductTemplateExtendPeriod(
    options?: MutationHookOptions<
        CreateProductTemplateExtendPeriodData,
        CreateProductTemplateExtendPeriodVariables
    >
): MutationHookFn<
    CreateProductTemplateExtendPeriodData,
    CreateProductTemplateExtendPeriodVariables
> {
    return useMutation<
        CreateProductTemplateExtendPeriodData,
        CreateProductTemplateExtendPeriodVariables
    >(useMutationCreateProductTemplateExtendPeriod.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type CreateProductTemplateExtendPeriodVariables = {
    expression: CreateProductTemplateExtendPeriodVariablesExpression;
    globalGroup: CreateProductTemplateExtendPeriodVariablesGlobalGroup;
    discountFactor: CreateProductTemplateExtendPeriodVariablesDiscountFactor;
    discount: CreateProductTemplateExtendPeriodVariablesDiscount;
};

type CreateProductTemplateExtendPeriodVariablesExpression = string;
type CreateProductTemplateExtendPeriodVariablesGlobalGroup = string;
type CreateProductTemplateExtendPeriodVariablesDiscountFactor = number;
type CreateProductTemplateExtendPeriodVariablesDiscount = number;

export type CreateProductTemplateExtendPeriodData = {
    productTemplateExtendPeriodCreate: CreateProductTemplateExtendPeriodDataProductTemplateExtendPeriodCreate;
};

type CreateProductTemplateExtendPeriodDataProductTemplateExtendPeriodCreate = {
    __typename?: 'ProductTemplateExtendPeriod';
    id: CreateProductTemplateExtendPeriodDataProductTemplateExtendPeriodCreateId;
};

type CreateProductTemplateExtendPeriodDataProductTemplateExtendPeriodCreateId = string;

useMutationEditProductTemplateExtendPeriod.Document = gql`
    mutation editProductTemplateExtendPeriod(
        $id: ID!
        $expression: String!
        $globalGroup: String!
        $discountFactor: Float!
        $discount: Float!
    ) {
        productTemplateExtendPeriodEdit(
            id: $id
            expression: $expression
            globalGroup: $globalGroup
            discountFactor: $discountFactor
            discount: $discount
        ) {
            id
            expression
            discount
            discountFactor
            globalGroup
        }
    }
` as DocumentNode;

export function useMutationEditProductTemplateExtendPeriod(
    options?: MutationHookOptions<
        EditProductTemplateExtendPeriodData,
        EditProductTemplateExtendPeriodVariables
    >
): MutationHookFn<
    EditProductTemplateExtendPeriodData,
    EditProductTemplateExtendPeriodVariables
> {
    return useMutation<
        EditProductTemplateExtendPeriodData,
        EditProductTemplateExtendPeriodVariables
    >(useMutationEditProductTemplateExtendPeriod.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type EditProductTemplateExtendPeriodVariables = {
    id: EditProductTemplateExtendPeriodVariablesId;
    expression: EditProductTemplateExtendPeriodVariablesExpression;
    globalGroup: EditProductTemplateExtendPeriodVariablesGlobalGroup;
    discountFactor: EditProductTemplateExtendPeriodVariablesDiscountFactor;
    discount: EditProductTemplateExtendPeriodVariablesDiscount;
};

type EditProductTemplateExtendPeriodVariablesId = string;
type EditProductTemplateExtendPeriodVariablesExpression = string;
type EditProductTemplateExtendPeriodVariablesGlobalGroup = string;
type EditProductTemplateExtendPeriodVariablesDiscountFactor = number;
type EditProductTemplateExtendPeriodVariablesDiscount = number;

export type EditProductTemplateExtendPeriodData = {
    productTemplateExtendPeriodEdit: EditProductTemplateExtendPeriodDataProductTemplateExtendPeriodEdit;
};

type EditProductTemplateExtendPeriodDataProductTemplateExtendPeriodEdit = {
    __typename?: 'ProductTemplateExtendPeriod';
    id: EditProductTemplateExtendPeriodDataProductTemplateExtendPeriodEditId;
    expression: EditProductTemplateExtendPeriodDataProductTemplateExtendPeriodEditExpression;
    discount: EditProductTemplateExtendPeriodDataProductTemplateExtendPeriodEditDiscount;
    discountFactor: EditProductTemplateExtendPeriodDataProductTemplateExtendPeriodEditDiscountFactor;
    globalGroup?: Nullable<EditProductTemplateExtendPeriodDataProductTemplateExtendPeriodEditGlobalGroup>;
};

type EditProductTemplateExtendPeriodDataProductTemplateExtendPeriodEditId = string;
type EditProductTemplateExtendPeriodDataProductTemplateExtendPeriodEditExpression = string;
type EditProductTemplateExtendPeriodDataProductTemplateExtendPeriodEditDiscount = number;
type EditProductTemplateExtendPeriodDataProductTemplateExtendPeriodEditDiscountFactor = number;
type EditProductTemplateExtendPeriodDataProductTemplateExtendPeriodEditGlobalGroup = string;

useMutationDeleteProductTemplateExtendPeriod.Document = gql`
    mutation deleteProductTemplateExtendPeriod($id: ID!) {
        productTemplateExtendPeriodDelete(id: $id)
    }
` as DocumentNode;

export function useMutationDeleteProductTemplateExtendPeriod(
    options?: MutationHookOptions<
        DeleteProductTemplateExtendPeriodData,
        DeleteProductTemplateExtendPeriodVariables
    >
): MutationHookFn<
    DeleteProductTemplateExtendPeriodData,
    DeleteProductTemplateExtendPeriodVariables
> {
    return useMutation<
        DeleteProductTemplateExtendPeriodData,
        DeleteProductTemplateExtendPeriodVariables
    >(useMutationDeleteProductTemplateExtendPeriod.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type DeleteProductTemplateExtendPeriodVariables = {
    id: DeleteProductTemplateExtendPeriodVariablesId;
};

type DeleteProductTemplateExtendPeriodVariablesId = string;

export type DeleteProductTemplateExtendPeriodData = {
    productTemplateExtendPeriodDelete: DeleteProductTemplateExtendPeriodDataProductTemplateExtendPeriodDelete;
};

type DeleteProductTemplateExtendPeriodDataProductTemplateExtendPeriodDelete = boolean;

/*,
 * Fragments from undefined,
 */
export type ProductTemplateGameserverPart = {
    id: ProductTemplateGameserverPartId;
    memory?: Nullable<ProductTemplateGameserverPartMemory>;
    slot?: Nullable<ProductTemplateGameserverPartSlot>;
    options: Array<ProductTemplateGameserverPartOptions>;
    templateOptions: Array<ProductTemplateGameserverPartTemplateOptions>;
    title: ProductTemplateGameserverPartTitle;
    setup: ProductTemplateGameserverPartSetup;
    basePrice: ProductTemplateGameserverPartBasePrice;
    active: ProductTemplateGameserverPartActive;
    update: ProductTemplateGameserverPartUpdate;
    hostNodeFilterKey?: Nullable<ProductTemplateGameserverPartHostNodeFilterKey>;
    attributes: ProductTemplateGameserverPartAttributes;
    urlKey?: Nullable<ProductTemplateGameserverPartUrlKey>;
};

type ProductTemplateGameserverPartId = string;
type ProductTemplateGameserverPartMemory = {
    __typename?: 'ProductTemplateOption';
    id: ProductTemplateGameserverPartMemoryId;
};

type ProductTemplateGameserverPartMemoryId = string;
type ProductTemplateGameserverPartSlot = {
    __typename?: 'ProductTemplateOption';
    id: ProductTemplateGameserverPartSlotId;
};

type ProductTemplateGameserverPartSlotId = string;
type ProductTemplateGameserverPartOptions = {
    __typename?: 'ProductTemplateOption';
    id: ProductTemplateGameserverPartOptionsId;
};

type ProductTemplateGameserverPartOptionsId = string;
type ProductTemplateGameserverPartTemplateOptions = {
    __typename?: 'ProductTemplateOption';
    id: ProductTemplateGameserverPartTemplateOptionsId;
};

type ProductTemplateGameserverPartTemplateOptionsId = string;
type ProductTemplateGameserverPartTitle = string;
type ProductTemplateGameserverPartSetup = number;
type ProductTemplateGameserverPartBasePrice = number;
type ProductTemplateGameserverPartActive = boolean;
type ProductTemplateGameserverPartUpdate = any;
type ProductTemplateGameserverPartHostNodeFilterKey = string;
type ProductTemplateGameserverPartAttributes = any;
type ProductTemplateGameserverPartUrlKey = string;
const _gql_ProductTemplateGameserverPart = gql`
    fragment ProductTemplateGameserverPart on ProductTemplateGameserver {
        id
        memory {
            id
        }
        slot {
            id
        }
        options {
            id
        }
        templateOptions {
            id
        }
        title
        setup
        basePrice
        active
        update
        hostNodeFilterKey
        attributes
        urlKey
    }
`;

/*,
 * Operations from undefined,
 */

useQueryProductTemplateGameserverById.Document = gql`
    query productTemplateGameserverById($id: ID!) {
        productTemplateGameserverById(id: $id) {
            ...ProductTemplateGameserverPart
        }
    }
    ${_gql_ProductTemplateGameserverPart}
` as DocumentNode;

export function useQueryProductTemplateGameserverById(
    options?: QueryHookOptions<
        ProductTemplateGameserverByIdData,
        ProductTemplateGameserverByIdVariables
    >
) {
    const result = useQuery<
        ProductTemplateGameserverByIdData,
        ProductTemplateGameserverByIdVariables
    >(useQueryProductTemplateGameserverById.Document, {
        ...queryDefaultOptions,
        ...options,
    });
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryProductTemplateGameserverById.lazy = function (
    options?: LazyQueryHookOptions<
        ProductTemplateGameserverByIdData,
        ProductTemplateGameserverByIdVariables
    >
) {
    return useLazyQuery(useQueryProductTemplateGameserverById.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type ProductTemplateGameserverByIdVariables = {
    id: ProductTemplateGameserverByIdVariablesId;
};

type ProductTemplateGameserverByIdVariablesId = string;

export type ProductTemplateGameserverByIdData = {
    productTemplateGameserverById: ProductTemplateGameserverByIdDataProductTemplateGameserverById;
};

type ProductTemplateGameserverByIdDataProductTemplateGameserverById = ProductTemplateGameserverPart & {
    __typename?: 'ProductTemplateGameserver';
};

useQueryProductTemplateGameservers.Document = gql`
    query productTemplateGameservers($filter: CordFilter) {
        productTemplateGameservers(filter: $filter) {
            edges {
                id
                memory {
                    id
                }
                slot {
                    id
                }
                options {
                    id
                }
                urlKey
                title
                setup
                basePrice
                active
                update
            }
            pageInfo {
                totalCount
            }
        }
    }
` as DocumentNode;

export function useQueryProductTemplateGameservers(
    options?: QueryHookOptions<
        ProductTemplateGameserversData,
        ProductTemplateGameserversVariables
    >
) {
    const result = useQuery<
        ProductTemplateGameserversData,
        ProductTemplateGameserversVariables
    >(useQueryProductTemplateGameservers.Document, {
        ...queryDefaultOptions,
        ...options,
    });
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryProductTemplateGameservers.lazy = function (
    options?: LazyQueryHookOptions<
        ProductTemplateGameserversData,
        ProductTemplateGameserversVariables
    >
) {
    return useLazyQuery(useQueryProductTemplateGameservers.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type ProductTemplateGameserversVariables = {
    filter?: Nullable<ProductTemplateGameserversVariablesFilter>;
};

type ProductTemplateGameserversVariablesFilter = CordFilter;

export type ProductTemplateGameserversData = {
    productTemplateGameservers: ProductTemplateGameserversDataProductTemplateGameservers;
};

type ProductTemplateGameserversDataProductTemplateGameservers = {
    __typename?: 'ProductTemplateGameserverResultMany';
    edges: Array<ProductTemplateGameserversDataProductTemplateGameserversEdges>;
    pageInfo: ProductTemplateGameserversDataProductTemplateGameserversPageInfo;
};

type ProductTemplateGameserversDataProductTemplateGameserversEdges = {
    __typename?: 'ProductTemplateGameserver';
    id: ProductTemplateGameserversDataProductTemplateGameserversEdgesId;
    memory?: Nullable<ProductTemplateGameserversDataProductTemplateGameserversEdgesMemory>;
    slot?: Nullable<ProductTemplateGameserversDataProductTemplateGameserversEdgesSlot>;
    options: Array<ProductTemplateGameserversDataProductTemplateGameserversEdgesOptions>;
    urlKey?: Nullable<ProductTemplateGameserversDataProductTemplateGameserversEdgesUrlKey>;
    title: ProductTemplateGameserversDataProductTemplateGameserversEdgesTitle;
    setup: ProductTemplateGameserversDataProductTemplateGameserversEdgesSetup;
    basePrice: ProductTemplateGameserversDataProductTemplateGameserversEdgesBasePrice;
    active: ProductTemplateGameserversDataProductTemplateGameserversEdgesActive;
    update: ProductTemplateGameserversDataProductTemplateGameserversEdgesUpdate;
};

type ProductTemplateGameserversDataProductTemplateGameserversEdgesId = string;
type ProductTemplateGameserversDataProductTemplateGameserversEdgesMemory = {
    __typename?: 'ProductTemplateOption';
    id: ProductTemplateGameserversDataProductTemplateGameserversEdgesMemoryId;
};

type ProductTemplateGameserversDataProductTemplateGameserversEdgesMemoryId = string;
type ProductTemplateGameserversDataProductTemplateGameserversEdgesSlot = {
    __typename?: 'ProductTemplateOption';
    id: ProductTemplateGameserversDataProductTemplateGameserversEdgesSlotId;
};

type ProductTemplateGameserversDataProductTemplateGameserversEdgesSlotId = string;
type ProductTemplateGameserversDataProductTemplateGameserversEdgesOptions = {
    __typename?: 'ProductTemplateOption';
    id: ProductTemplateGameserversDataProductTemplateGameserversEdgesOptionsId;
};

type ProductTemplateGameserversDataProductTemplateGameserversEdgesOptionsId = string;
type ProductTemplateGameserversDataProductTemplateGameserversEdgesUrlKey = string;
type ProductTemplateGameserversDataProductTemplateGameserversEdgesTitle = string;
type ProductTemplateGameserversDataProductTemplateGameserversEdgesSetup = number;
type ProductTemplateGameserversDataProductTemplateGameserversEdgesBasePrice = number;
type ProductTemplateGameserversDataProductTemplateGameserversEdgesActive = boolean;
type ProductTemplateGameserversDataProductTemplateGameserversEdgesUpdate = any;
type ProductTemplateGameserversDataProductTemplateGameserversPageInfo = {
    __typename?: 'CordPageInfo';
    totalCount: ProductTemplateGameserversDataProductTemplateGameserversPageInfoTotalCount;
};

type ProductTemplateGameserversDataProductTemplateGameserversPageInfoTotalCount = number;

useMutationCreateProductTemplateGameserver.Document = gql`
    mutation createProductTemplateGameserver(
        $title: String!
        $setup: Float!
        $basePrice: Float!
        $urlKey: String!
        $active: Boolean!
        $slotOptionId: ID
        $memoryOptionId: ID
    ) {
        productTemplateGameserverCreate(
            title: $title
            setup: $setup
            basePrice: $basePrice
            urlKey: $urlKey
            active: $active
            slotOptionId: $slotOptionId
            memoryOptionId: $memoryOptionId
        ) {
            id
        }
    }
` as DocumentNode;

export function useMutationCreateProductTemplateGameserver(
    options?: MutationHookOptions<
        CreateProductTemplateGameserverData,
        CreateProductTemplateGameserverVariables
    >
): MutationHookFn<
    CreateProductTemplateGameserverData,
    CreateProductTemplateGameserverVariables
> {
    return useMutation<
        CreateProductTemplateGameserverData,
        CreateProductTemplateGameserverVariables
    >(useMutationCreateProductTemplateGameserver.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type CreateProductTemplateGameserverVariables = {
    title: CreateProductTemplateGameserverVariablesTitle;
    setup: CreateProductTemplateGameserverVariablesSetup;
    basePrice: CreateProductTemplateGameserverVariablesBasePrice;
    urlKey: CreateProductTemplateGameserverVariablesUrlKey;
    active: CreateProductTemplateGameserverVariablesActive;
    slotOptionId?: Nullable<CreateProductTemplateGameserverVariablesSlotOptionId>;
    memoryOptionId?: Nullable<CreateProductTemplateGameserverVariablesMemoryOptionId>;
};

type CreateProductTemplateGameserverVariablesTitle = string;
type CreateProductTemplateGameserverVariablesSetup = number;
type CreateProductTemplateGameserverVariablesBasePrice = number;
type CreateProductTemplateGameserverVariablesUrlKey = string;
type CreateProductTemplateGameserverVariablesActive = boolean;
type CreateProductTemplateGameserverVariablesSlotOptionId = string;
type CreateProductTemplateGameserverVariablesMemoryOptionId = string;

export type CreateProductTemplateGameserverData = {
    productTemplateGameserverCreate: CreateProductTemplateGameserverDataProductTemplateGameserverCreate;
};

type CreateProductTemplateGameserverDataProductTemplateGameserverCreate = {
    __typename?: 'ProductTemplateGameserver';
    id: CreateProductTemplateGameserverDataProductTemplateGameserverCreateId;
};

type CreateProductTemplateGameserverDataProductTemplateGameserverCreateId = string;

useMutationEditProductTemplateGameserver.Document = gql`
    mutation editProductTemplateGameserver(
        $id: ID!
        $title: String!
        $setup: Float!
        $basePrice: Float!
        $urlKey: String!
        $active: Boolean!
        $slotOptionId: ID
        $memoryOptionId: ID
        $assignedGameserverTemplates: [ID!]
        $hostNodeFilterKey: String
        $optionIds: [ID!]
    ) {
        productTemplateGameserverEdit(
            id: $id
            title: $title
            setup: $setup
            urlKey: $urlKey
            assignedGameserverTemplates: $assignedGameserverTemplates
            basePrice: $basePrice
            active: $active
            hostNodeFilterKey: $hostNodeFilterKey
            slotOptionId: $slotOptionId
            memoryOptionId: $memoryOptionId
            optionIds: $optionIds
        ) {
            ...ProductTemplateGameserverPart
        }
    }
    ${_gql_ProductTemplateGameserverPart}
` as DocumentNode;

export function useMutationEditProductTemplateGameserver(
    options?: MutationHookOptions<
        EditProductTemplateGameserverData,
        EditProductTemplateGameserverVariables
    >
): MutationHookFn<
    EditProductTemplateGameserverData,
    EditProductTemplateGameserverVariables
> {
    return useMutation<
        EditProductTemplateGameserverData,
        EditProductTemplateGameserverVariables
    >(useMutationEditProductTemplateGameserver.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type EditProductTemplateGameserverVariables = {
    id: EditProductTemplateGameserverVariablesId;
    title: EditProductTemplateGameserverVariablesTitle;
    setup: EditProductTemplateGameserverVariablesSetup;
    basePrice: EditProductTemplateGameserverVariablesBasePrice;
    urlKey: EditProductTemplateGameserverVariablesUrlKey;
    active: EditProductTemplateGameserverVariablesActive;
    slotOptionId?: Nullable<EditProductTemplateGameserverVariablesSlotOptionId>;
    memoryOptionId?: Nullable<EditProductTemplateGameserverVariablesMemoryOptionId>;
    assignedGameserverTemplates?: Nullable<
        ReadonlyArray<EditProductTemplateGameserverVariablesAssignedGameserverTemplates>
    >;
    hostNodeFilterKey?: Nullable<EditProductTemplateGameserverVariablesHostNodeFilterKey>;
    optionIds?: Nullable<
        ReadonlyArray<EditProductTemplateGameserverVariablesOptionIds>
    >;
};

type EditProductTemplateGameserverVariablesId = string;
type EditProductTemplateGameserverVariablesTitle = string;
type EditProductTemplateGameserverVariablesSetup = number;
type EditProductTemplateGameserverVariablesBasePrice = number;
type EditProductTemplateGameserverVariablesUrlKey = string;
type EditProductTemplateGameserverVariablesActive = boolean;
type EditProductTemplateGameserverVariablesSlotOptionId = string;
type EditProductTemplateGameserverVariablesMemoryOptionId = string;
type EditProductTemplateGameserverVariablesAssignedGameserverTemplates = string;
type EditProductTemplateGameserverVariablesHostNodeFilterKey = string;
type EditProductTemplateGameserverVariablesOptionIds = string;

export type EditProductTemplateGameserverData = {
    productTemplateGameserverEdit: EditProductTemplateGameserverDataProductTemplateGameserverEdit;
};

type EditProductTemplateGameserverDataProductTemplateGameserverEdit = ProductTemplateGameserverPart & {
    __typename?: 'ProductTemplateGameserver';
};

useMutationDeleteProductTemplateGameserver.Document = gql`
    mutation deleteProductTemplateGameserver($id: ID!) {
        productTemplateGameserverDelete(id: $id)
    }
` as DocumentNode;

export function useMutationDeleteProductTemplateGameserver(
    options?: MutationHookOptions<
        DeleteProductTemplateGameserverData,
        DeleteProductTemplateGameserverVariables
    >
): MutationHookFn<
    DeleteProductTemplateGameserverData,
    DeleteProductTemplateGameserverVariables
> {
    return useMutation<
        DeleteProductTemplateGameserverData,
        DeleteProductTemplateGameserverVariables
    >(useMutationDeleteProductTemplateGameserver.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type DeleteProductTemplateGameserverVariables = {
    id: DeleteProductTemplateGameserverVariablesId;
};

type DeleteProductTemplateGameserverVariablesId = string;

export type DeleteProductTemplateGameserverData = {
    productTemplateGameserverDelete: DeleteProductTemplateGameserverDataProductTemplateGameserverDelete;
};

type DeleteProductTemplateGameserverDataProductTemplateGameserverDelete = boolean;

/*,
 * Fragments from undefined,
 */

/*,
 * Operations from undefined,
 */

useQueryProductTemplateOptionById.Document = gql`
    query productTemplateOptionById($id: ID!) {
        productTemplateOptionById(id: $id) {
            id
            title
            display
            create
            upgradeable
            variants(includeHidden: true) {
                id
                priceMultiplier
                price
                priceSetup
                key
                label
                value
                meta
                siblings {
                    id
                }
            }
        }
    }
` as DocumentNode;

export function useQueryProductTemplateOptionById(
    options?: QueryHookOptions<
        ProductTemplateOptionByIdData,
        ProductTemplateOptionByIdVariables
    >
) {
    const result = useQuery<
        ProductTemplateOptionByIdData,
        ProductTemplateOptionByIdVariables
    >(useQueryProductTemplateOptionById.Document, {
        ...queryDefaultOptions,
        ...options,
    });
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryProductTemplateOptionById.lazy = function (
    options?: LazyQueryHookOptions<
        ProductTemplateOptionByIdData,
        ProductTemplateOptionByIdVariables
    >
) {
    return useLazyQuery(useQueryProductTemplateOptionById.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type ProductTemplateOptionByIdVariables = {
    id: ProductTemplateOptionByIdVariablesId;
};

type ProductTemplateOptionByIdVariablesId = string;

export type ProductTemplateOptionByIdData = {
    productTemplateOptionById: ProductTemplateOptionByIdDataProductTemplateOptionById;
};

type ProductTemplateOptionByIdDataProductTemplateOptionById = {
    __typename?: 'ProductTemplateOption';
    id: ProductTemplateOptionByIdDataProductTemplateOptionByIdId;
    title: ProductTemplateOptionByIdDataProductTemplateOptionByIdTitle;
    display: ProductTemplateOptionByIdDataProductTemplateOptionByIdDisplay;
    create: ProductTemplateOptionByIdDataProductTemplateOptionByIdCreate;
    upgradeable: ProductTemplateOptionByIdDataProductTemplateOptionByIdUpgradeable;
    variants: Array<ProductTemplateOptionByIdDataProductTemplateOptionByIdVariants>;
};

type ProductTemplateOptionByIdDataProductTemplateOptionByIdId = string;
type ProductTemplateOptionByIdDataProductTemplateOptionByIdTitle = string;
type ProductTemplateOptionByIdDataProductTemplateOptionByIdDisplay = string;
type ProductTemplateOptionByIdDataProductTemplateOptionByIdCreate = any;
type ProductTemplateOptionByIdDataProductTemplateOptionByIdUpgradeable = boolean;
type ProductTemplateOptionByIdDataProductTemplateOptionByIdVariants = {
    __typename?: 'ProductTemplateOptionVariant';
    id: ProductTemplateOptionByIdDataProductTemplateOptionByIdVariantsId;
    priceMultiplier: ProductTemplateOptionByIdDataProductTemplateOptionByIdVariantsPriceMultiplier;
    price: ProductTemplateOptionByIdDataProductTemplateOptionByIdVariantsPrice;
    priceSetup: ProductTemplateOptionByIdDataProductTemplateOptionByIdVariantsPriceSetup;
    key: ProductTemplateOptionByIdDataProductTemplateOptionByIdVariantsKey;
    label: ProductTemplateOptionByIdDataProductTemplateOptionByIdVariantsLabel;
    value?: Nullable<ProductTemplateOptionByIdDataProductTemplateOptionByIdVariantsValue>;
    meta: ProductTemplateOptionByIdDataProductTemplateOptionByIdVariantsMeta;
    siblings: Array<ProductTemplateOptionByIdDataProductTemplateOptionByIdVariantsSiblings>;
};

type ProductTemplateOptionByIdDataProductTemplateOptionByIdVariantsId = string;
type ProductTemplateOptionByIdDataProductTemplateOptionByIdVariantsPriceMultiplier = number;
type ProductTemplateOptionByIdDataProductTemplateOptionByIdVariantsPrice = number;
type ProductTemplateOptionByIdDataProductTemplateOptionByIdVariantsPriceSetup = number;
type ProductTemplateOptionByIdDataProductTemplateOptionByIdVariantsKey = string;
type ProductTemplateOptionByIdDataProductTemplateOptionByIdVariantsLabel = string;
type ProductTemplateOptionByIdDataProductTemplateOptionByIdVariantsValue = any;
type ProductTemplateOptionByIdDataProductTemplateOptionByIdVariantsMeta = any;
type ProductTemplateOptionByIdDataProductTemplateOptionByIdVariantsSiblings = {
    __typename?: 'ProductTemplateOptionVariant';
    id: ProductTemplateOptionByIdDataProductTemplateOptionByIdVariantsSiblingsId;
};

type ProductTemplateOptionByIdDataProductTemplateOptionByIdVariantsSiblingsId = string;

useQueryProductTemplateOptions.Document = gql`
    query productTemplateOptions($filter: CordFilter) {
        productTemplateOptions(filter: $filter) {
            edges {
                id
                title
                display
                create
                variants(includeHidden: true) {
                    id
                    priceMultiplier
                    price
                    priceSetup
                    key
                    label
                    value
                    meta
                    siblings {
                        id
                    }
                }
            }
            pageInfo {
                totalCount
            }
        }
    }
` as DocumentNode;

export function useQueryProductTemplateOptions(
    options?: QueryHookOptions<
        ProductTemplateOptionsData,
        ProductTemplateOptionsVariables
    >
) {
    const result = useQuery<
        ProductTemplateOptionsData,
        ProductTemplateOptionsVariables
    >(useQueryProductTemplateOptions.Document, {
        ...queryDefaultOptions,
        ...options,
    });
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryProductTemplateOptions.lazy = function (
    options?: LazyQueryHookOptions<
        ProductTemplateOptionsData,
        ProductTemplateOptionsVariables
    >
) {
    return useLazyQuery(useQueryProductTemplateOptions.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type ProductTemplateOptionsVariables = {
    filter?: Nullable<ProductTemplateOptionsVariablesFilter>;
};

type ProductTemplateOptionsVariablesFilter = CordFilter;

export type ProductTemplateOptionsData = {
    productTemplateOptions: ProductTemplateOptionsDataProductTemplateOptions;
};

type ProductTemplateOptionsDataProductTemplateOptions = {
    __typename?: 'ProductTemplateOptionResultMany';
    edges: Array<ProductTemplateOptionsDataProductTemplateOptionsEdges>;
    pageInfo: ProductTemplateOptionsDataProductTemplateOptionsPageInfo;
};

type ProductTemplateOptionsDataProductTemplateOptionsEdges = {
    __typename?: 'ProductTemplateOption';
    id: ProductTemplateOptionsDataProductTemplateOptionsEdgesId;
    title: ProductTemplateOptionsDataProductTemplateOptionsEdgesTitle;
    display: ProductTemplateOptionsDataProductTemplateOptionsEdgesDisplay;
    create: ProductTemplateOptionsDataProductTemplateOptionsEdgesCreate;
    variants: Array<ProductTemplateOptionsDataProductTemplateOptionsEdgesVariants>;
};

type ProductTemplateOptionsDataProductTemplateOptionsEdgesId = string;
type ProductTemplateOptionsDataProductTemplateOptionsEdgesTitle = string;
type ProductTemplateOptionsDataProductTemplateOptionsEdgesDisplay = string;
type ProductTemplateOptionsDataProductTemplateOptionsEdgesCreate = any;
type ProductTemplateOptionsDataProductTemplateOptionsEdgesVariants = {
    __typename?: 'ProductTemplateOptionVariant';
    id: ProductTemplateOptionsDataProductTemplateOptionsEdgesVariantsId;
    priceMultiplier: ProductTemplateOptionsDataProductTemplateOptionsEdgesVariantsPriceMultiplier;
    price: ProductTemplateOptionsDataProductTemplateOptionsEdgesVariantsPrice;
    priceSetup: ProductTemplateOptionsDataProductTemplateOptionsEdgesVariantsPriceSetup;
    key: ProductTemplateOptionsDataProductTemplateOptionsEdgesVariantsKey;
    label: ProductTemplateOptionsDataProductTemplateOptionsEdgesVariantsLabel;
    value?: Nullable<ProductTemplateOptionsDataProductTemplateOptionsEdgesVariantsValue>;
    meta: ProductTemplateOptionsDataProductTemplateOptionsEdgesVariantsMeta;
    siblings: Array<ProductTemplateOptionsDataProductTemplateOptionsEdgesVariantsSiblings>;
};

type ProductTemplateOptionsDataProductTemplateOptionsEdgesVariantsId = string;
type ProductTemplateOptionsDataProductTemplateOptionsEdgesVariantsPriceMultiplier = number;
type ProductTemplateOptionsDataProductTemplateOptionsEdgesVariantsPrice = number;
type ProductTemplateOptionsDataProductTemplateOptionsEdgesVariantsPriceSetup = number;
type ProductTemplateOptionsDataProductTemplateOptionsEdgesVariantsKey = string;
type ProductTemplateOptionsDataProductTemplateOptionsEdgesVariantsLabel = string;
type ProductTemplateOptionsDataProductTemplateOptionsEdgesVariantsValue = any;
type ProductTemplateOptionsDataProductTemplateOptionsEdgesVariantsMeta = any;
type ProductTemplateOptionsDataProductTemplateOptionsEdgesVariantsSiblings = {
    __typename?: 'ProductTemplateOptionVariant';
    id: ProductTemplateOptionsDataProductTemplateOptionsEdgesVariantsSiblingsId;
};

type ProductTemplateOptionsDataProductTemplateOptionsEdgesVariantsSiblingsId = string;
type ProductTemplateOptionsDataProductTemplateOptionsPageInfo = {
    __typename?: 'CordPageInfo';
    totalCount: ProductTemplateOptionsDataProductTemplateOptionsPageInfoTotalCount;
};

type ProductTemplateOptionsDataProductTemplateOptionsPageInfoTotalCount = number;

useMutationCreateProductTemplateOption.Document = gql`
    mutation createProductTemplateOption($title: String!, $display: String!) {
        productTemplateOptionCreate(title: $title, display: $display) {
            id
        }
    }
` as DocumentNode;

export function useMutationCreateProductTemplateOption(
    options?: MutationHookOptions<
        CreateProductTemplateOptionData,
        CreateProductTemplateOptionVariables
    >
): MutationHookFn<
    CreateProductTemplateOptionData,
    CreateProductTemplateOptionVariables
> {
    return useMutation<
        CreateProductTemplateOptionData,
        CreateProductTemplateOptionVariables
    >(useMutationCreateProductTemplateOption.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type CreateProductTemplateOptionVariables = {
    title: CreateProductTemplateOptionVariablesTitle;
    display: CreateProductTemplateOptionVariablesDisplay;
};

type CreateProductTemplateOptionVariablesTitle = string;
type CreateProductTemplateOptionVariablesDisplay = string;

export type CreateProductTemplateOptionData = {
    productTemplateOptionCreate: CreateProductTemplateOptionDataProductTemplateOptionCreate;
};

type CreateProductTemplateOptionDataProductTemplateOptionCreate = {
    __typename?: 'ProductTemplateOption';
    id: CreateProductTemplateOptionDataProductTemplateOptionCreateId;
};

type CreateProductTemplateOptionDataProductTemplateOptionCreateId = string;

useMutationEditProductTemplateOption.Document = gql`
    mutation editProductTemplateOption(
        $id: ID!
        $title: String!
        $display: String!
        $upgradeable: Boolean!
    ) {
        productTemplateOptionEdit(
            id: $id
            title: $title
            display: $display
            upgradeable: $upgradeable
        ) {
            id
        }
    }
` as DocumentNode;

export function useMutationEditProductTemplateOption(
    options?: MutationHookOptions<
        EditProductTemplateOptionData,
        EditProductTemplateOptionVariables
    >
): MutationHookFn<
    EditProductTemplateOptionData,
    EditProductTemplateOptionVariables
> {
    return useMutation<
        EditProductTemplateOptionData,
        EditProductTemplateOptionVariables
    >(useMutationEditProductTemplateOption.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type EditProductTemplateOptionVariables = {
    id: EditProductTemplateOptionVariablesId;
    title: EditProductTemplateOptionVariablesTitle;
    display: EditProductTemplateOptionVariablesDisplay;
    upgradeable: EditProductTemplateOptionVariablesUpgradeable;
};

type EditProductTemplateOptionVariablesId = string;
type EditProductTemplateOptionVariablesTitle = string;
type EditProductTemplateOptionVariablesDisplay = string;
type EditProductTemplateOptionVariablesUpgradeable = boolean;

export type EditProductTemplateOptionData = {
    productTemplateOptionEdit: EditProductTemplateOptionDataProductTemplateOptionEdit;
};

type EditProductTemplateOptionDataProductTemplateOptionEdit = {
    __typename?: 'ProductTemplateOption';
    id: EditProductTemplateOptionDataProductTemplateOptionEditId;
};

type EditProductTemplateOptionDataProductTemplateOptionEditId = string;

/*,
 * Fragments from undefined,
 */

/*,
 * Operations from undefined,
 */

useQueryProductTemplateOptionVariantById.Document = gql`
    query productTemplateOptionVariantById($id: ID!) {
        productTemplateOptionVariantById(id: $id) {
            id
            priceMultiplier
            price
            priceSetup
            key
            sort
            hidden
            label
            value
            meta
            siblings {
                id
            }
        }
    }
` as DocumentNode;

export function useQueryProductTemplateOptionVariantById(
    options?: QueryHookOptions<
        ProductTemplateOptionVariantByIdData,
        ProductTemplateOptionVariantByIdVariables
    >
) {
    const result = useQuery<
        ProductTemplateOptionVariantByIdData,
        ProductTemplateOptionVariantByIdVariables
    >(useQueryProductTemplateOptionVariantById.Document, {
        ...queryDefaultOptions,
        ...options,
    });
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryProductTemplateOptionVariantById.lazy = function (
    options?: LazyQueryHookOptions<
        ProductTemplateOptionVariantByIdData,
        ProductTemplateOptionVariantByIdVariables
    >
) {
    return useLazyQuery(useQueryProductTemplateOptionVariantById.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type ProductTemplateOptionVariantByIdVariables = {
    id: ProductTemplateOptionVariantByIdVariablesId;
};

type ProductTemplateOptionVariantByIdVariablesId = string;

export type ProductTemplateOptionVariantByIdData = {
    productTemplateOptionVariantById: ProductTemplateOptionVariantByIdDataProductTemplateOptionVariantById;
};

type ProductTemplateOptionVariantByIdDataProductTemplateOptionVariantById = {
    __typename?: 'ProductTemplateOptionVariant';
    id: ProductTemplateOptionVariantByIdDataProductTemplateOptionVariantByIdId;
    priceMultiplier: ProductTemplateOptionVariantByIdDataProductTemplateOptionVariantByIdPriceMultiplier;
    price: ProductTemplateOptionVariantByIdDataProductTemplateOptionVariantByIdPrice;
    priceSetup: ProductTemplateOptionVariantByIdDataProductTemplateOptionVariantByIdPriceSetup;
    key: ProductTemplateOptionVariantByIdDataProductTemplateOptionVariantByIdKey;
    sort: ProductTemplateOptionVariantByIdDataProductTemplateOptionVariantByIdSort;
    hidden: ProductTemplateOptionVariantByIdDataProductTemplateOptionVariantByIdHidden;
    label: ProductTemplateOptionVariantByIdDataProductTemplateOptionVariantByIdLabel;
    value?: Nullable<ProductTemplateOptionVariantByIdDataProductTemplateOptionVariantByIdValue>;
    meta: ProductTemplateOptionVariantByIdDataProductTemplateOptionVariantByIdMeta;
    siblings: Array<ProductTemplateOptionVariantByIdDataProductTemplateOptionVariantByIdSiblings>;
};

type ProductTemplateOptionVariantByIdDataProductTemplateOptionVariantByIdId = string;
type ProductTemplateOptionVariantByIdDataProductTemplateOptionVariantByIdPriceMultiplier = number;
type ProductTemplateOptionVariantByIdDataProductTemplateOptionVariantByIdPrice = number;
type ProductTemplateOptionVariantByIdDataProductTemplateOptionVariantByIdPriceSetup = number;
type ProductTemplateOptionVariantByIdDataProductTemplateOptionVariantByIdKey = string;
type ProductTemplateOptionVariantByIdDataProductTemplateOptionVariantByIdSort = number;
type ProductTemplateOptionVariantByIdDataProductTemplateOptionVariantByIdHidden = boolean;
type ProductTemplateOptionVariantByIdDataProductTemplateOptionVariantByIdLabel = string;
type ProductTemplateOptionVariantByIdDataProductTemplateOptionVariantByIdValue = any;
type ProductTemplateOptionVariantByIdDataProductTemplateOptionVariantByIdMeta = any;
type ProductTemplateOptionVariantByIdDataProductTemplateOptionVariantByIdSiblings = {
    __typename?: 'ProductTemplateOptionVariant';
    id: ProductTemplateOptionVariantByIdDataProductTemplateOptionVariantByIdSiblingsId;
};

type ProductTemplateOptionVariantByIdDataProductTemplateOptionVariantByIdSiblingsId = string;

useQueryProductTemplateOptionVariants.Document = gql`
    query productTemplateOptionVariants($filter: CordFilter) {
        productTemplateOptionVariants(filter: $filter) {
            edges {
                id
                priceMultiplier
                price
                priceSetup
                key
                label
                value
                meta
                sort
                siblings {
                    id
                }
                option {
                    id
                    title
                }
            }
            pageInfo {
                totalCount
            }
        }
    }
` as DocumentNode;

export function useQueryProductTemplateOptionVariants(
    options?: QueryHookOptions<
        ProductTemplateOptionVariantsData,
        ProductTemplateOptionVariantsVariables
    >
) {
    const result = useQuery<
        ProductTemplateOptionVariantsData,
        ProductTemplateOptionVariantsVariables
    >(useQueryProductTemplateOptionVariants.Document, {
        ...queryDefaultOptions,
        ...options,
    });
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryProductTemplateOptionVariants.lazy = function (
    options?: LazyQueryHookOptions<
        ProductTemplateOptionVariantsData,
        ProductTemplateOptionVariantsVariables
    >
) {
    return useLazyQuery(useQueryProductTemplateOptionVariants.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type ProductTemplateOptionVariantsVariables = {
    filter?: Nullable<ProductTemplateOptionVariantsVariablesFilter>;
};

type ProductTemplateOptionVariantsVariablesFilter = CordFilter;

export type ProductTemplateOptionVariantsData = {
    productTemplateOptionVariants: ProductTemplateOptionVariantsDataProductTemplateOptionVariants;
};

type ProductTemplateOptionVariantsDataProductTemplateOptionVariants = {
    __typename?: 'ProductTemplateOptionVariantResultMany';
    edges: Array<ProductTemplateOptionVariantsDataProductTemplateOptionVariantsEdges>;
    pageInfo: ProductTemplateOptionVariantsDataProductTemplateOptionVariantsPageInfo;
};

type ProductTemplateOptionVariantsDataProductTemplateOptionVariantsEdges = {
    __typename?: 'ProductTemplateOptionVariant';
    id: ProductTemplateOptionVariantsDataProductTemplateOptionVariantsEdgesId;
    priceMultiplier: ProductTemplateOptionVariantsDataProductTemplateOptionVariantsEdgesPriceMultiplier;
    price: ProductTemplateOptionVariantsDataProductTemplateOptionVariantsEdgesPrice;
    priceSetup: ProductTemplateOptionVariantsDataProductTemplateOptionVariantsEdgesPriceSetup;
    key: ProductTemplateOptionVariantsDataProductTemplateOptionVariantsEdgesKey;
    label: ProductTemplateOptionVariantsDataProductTemplateOptionVariantsEdgesLabel;
    value?: Nullable<ProductTemplateOptionVariantsDataProductTemplateOptionVariantsEdgesValue>;
    meta: ProductTemplateOptionVariantsDataProductTemplateOptionVariantsEdgesMeta;
    sort: ProductTemplateOptionVariantsDataProductTemplateOptionVariantsEdgesSort;
    siblings: Array<ProductTemplateOptionVariantsDataProductTemplateOptionVariantsEdgesSiblings>;
    option?: Nullable<ProductTemplateOptionVariantsDataProductTemplateOptionVariantsEdgesOption>;
};

type ProductTemplateOptionVariantsDataProductTemplateOptionVariantsEdgesId = string;
type ProductTemplateOptionVariantsDataProductTemplateOptionVariantsEdgesPriceMultiplier = number;
type ProductTemplateOptionVariantsDataProductTemplateOptionVariantsEdgesPrice = number;
type ProductTemplateOptionVariantsDataProductTemplateOptionVariantsEdgesPriceSetup = number;
type ProductTemplateOptionVariantsDataProductTemplateOptionVariantsEdgesKey = string;
type ProductTemplateOptionVariantsDataProductTemplateOptionVariantsEdgesLabel = string;
type ProductTemplateOptionVariantsDataProductTemplateOptionVariantsEdgesValue = any;
type ProductTemplateOptionVariantsDataProductTemplateOptionVariantsEdgesMeta = any;
type ProductTemplateOptionVariantsDataProductTemplateOptionVariantsEdgesSort = number;
type ProductTemplateOptionVariantsDataProductTemplateOptionVariantsEdgesSiblings = {
    __typename?: 'ProductTemplateOptionVariant';
    id: ProductTemplateOptionVariantsDataProductTemplateOptionVariantsEdgesSiblingsId;
};

type ProductTemplateOptionVariantsDataProductTemplateOptionVariantsEdgesSiblingsId = string;
type ProductTemplateOptionVariantsDataProductTemplateOptionVariantsEdgesOption = {
    __typename?: 'ProductTemplateOption';
    id: ProductTemplateOptionVariantsDataProductTemplateOptionVariantsEdgesOptionId;
    title: ProductTemplateOptionVariantsDataProductTemplateOptionVariantsEdgesOptionTitle;
};

type ProductTemplateOptionVariantsDataProductTemplateOptionVariantsEdgesOptionId = string;
type ProductTemplateOptionVariantsDataProductTemplateOptionVariantsEdgesOptionTitle = string;
type ProductTemplateOptionVariantsDataProductTemplateOptionVariantsPageInfo = {
    __typename?: 'CordPageInfo';
    totalCount: ProductTemplateOptionVariantsDataProductTemplateOptionVariantsPageInfoTotalCount;
};

type ProductTemplateOptionVariantsDataProductTemplateOptionVariantsPageInfoTotalCount = number;

useMutationCreateProductTemplateOptionVariant.Document = gql`
    mutation createProductTemplateOptionVariant(
        $optionId: ID!
        $key: String!
        $sort: Int!
        $label: String!
        $price: Float!
        $priceMultiplier: Float!
        $priceSetup: Float!
    ) {
        productTemplateOptionVariantCreate(
            optionId: $optionId
            key: $key
            label: $label
            sort: $sort
            price: $price
            priceMultiplier: $priceMultiplier
            priceSetup: $priceSetup
        ) {
            id
        }
    }
` as DocumentNode;

export function useMutationCreateProductTemplateOptionVariant(
    options?: MutationHookOptions<
        CreateProductTemplateOptionVariantData,
        CreateProductTemplateOptionVariantVariables
    >
): MutationHookFn<
    CreateProductTemplateOptionVariantData,
    CreateProductTemplateOptionVariantVariables
> {
    return useMutation<
        CreateProductTemplateOptionVariantData,
        CreateProductTemplateOptionVariantVariables
    >(useMutationCreateProductTemplateOptionVariant.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type CreateProductTemplateOptionVariantVariables = {
    optionId: CreateProductTemplateOptionVariantVariablesOptionId;
    key: CreateProductTemplateOptionVariantVariablesKey;
    sort: CreateProductTemplateOptionVariantVariablesSort;
    label: CreateProductTemplateOptionVariantVariablesLabel;
    price: CreateProductTemplateOptionVariantVariablesPrice;
    priceMultiplier: CreateProductTemplateOptionVariantVariablesPriceMultiplier;
    priceSetup: CreateProductTemplateOptionVariantVariablesPriceSetup;
};

type CreateProductTemplateOptionVariantVariablesOptionId = string;
type CreateProductTemplateOptionVariantVariablesKey = string;
type CreateProductTemplateOptionVariantVariablesSort = number;
type CreateProductTemplateOptionVariantVariablesLabel = string;
type CreateProductTemplateOptionVariantVariablesPrice = number;
type CreateProductTemplateOptionVariantVariablesPriceMultiplier = number;
type CreateProductTemplateOptionVariantVariablesPriceSetup = number;

export type CreateProductTemplateOptionVariantData = {
    productTemplateOptionVariantCreate: CreateProductTemplateOptionVariantDataProductTemplateOptionVariantCreate;
};

type CreateProductTemplateOptionVariantDataProductTemplateOptionVariantCreate = {
    __typename?: 'ProductTemplateOptionVariant';
    id: CreateProductTemplateOptionVariantDataProductTemplateOptionVariantCreateId;
};

type CreateProductTemplateOptionVariantDataProductTemplateOptionVariantCreateId = string;

useMutationEditProductTemplateOptionVariant.Document = gql`
    mutation editProductTemplateOptionVariant(
        $id: ID!
        $key: String!
        $sort: Int!
        $label: String!
        $price: Float!
        $value: String
        $priceMultiplier: Float!
        $priceSetup: Float!
        $hidden: Boolean
    ) {
        productTemplateOptionVariantEdit(
            id: $id
            key: $key
            sort: $sort
            label: $label
            price: $price
            value: $value
            priceMultiplier: $priceMultiplier
            priceSetup: $priceSetup
            hidden: $hidden
        ) {
            id
            priceMultiplier
            sort
            hidden
            price
            priceSetup
            key
            label
            value
            meta
            siblings {
                id
            }
        }
    }
` as DocumentNode;

export function useMutationEditProductTemplateOptionVariant(
    options?: MutationHookOptions<
        EditProductTemplateOptionVariantData,
        EditProductTemplateOptionVariantVariables
    >
): MutationHookFn<
    EditProductTemplateOptionVariantData,
    EditProductTemplateOptionVariantVariables
> {
    return useMutation<
        EditProductTemplateOptionVariantData,
        EditProductTemplateOptionVariantVariables
    >(useMutationEditProductTemplateOptionVariant.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type EditProductTemplateOptionVariantVariables = {
    id: EditProductTemplateOptionVariantVariablesId;
    key: EditProductTemplateOptionVariantVariablesKey;
    sort: EditProductTemplateOptionVariantVariablesSort;
    label: EditProductTemplateOptionVariantVariablesLabel;
    price: EditProductTemplateOptionVariantVariablesPrice;
    value?: Nullable<EditProductTemplateOptionVariantVariablesValue>;
    priceMultiplier: EditProductTemplateOptionVariantVariablesPriceMultiplier;
    priceSetup: EditProductTemplateOptionVariantVariablesPriceSetup;
    hidden?: Nullable<EditProductTemplateOptionVariantVariablesHidden>;
};

type EditProductTemplateOptionVariantVariablesId = string;
type EditProductTemplateOptionVariantVariablesKey = string;
type EditProductTemplateOptionVariantVariablesSort = number;
type EditProductTemplateOptionVariantVariablesLabel = string;
type EditProductTemplateOptionVariantVariablesPrice = number;
type EditProductTemplateOptionVariantVariablesValue = string;
type EditProductTemplateOptionVariantVariablesPriceMultiplier = number;
type EditProductTemplateOptionVariantVariablesPriceSetup = number;
type EditProductTemplateOptionVariantVariablesHidden = boolean;

export type EditProductTemplateOptionVariantData = {
    productTemplateOptionVariantEdit: EditProductTemplateOptionVariantDataProductTemplateOptionVariantEdit;
};

type EditProductTemplateOptionVariantDataProductTemplateOptionVariantEdit = {
    __typename?: 'ProductTemplateOptionVariant';
    id: EditProductTemplateOptionVariantDataProductTemplateOptionVariantEditId;
    priceMultiplier: EditProductTemplateOptionVariantDataProductTemplateOptionVariantEditPriceMultiplier;
    sort: EditProductTemplateOptionVariantDataProductTemplateOptionVariantEditSort;
    hidden: EditProductTemplateOptionVariantDataProductTemplateOptionVariantEditHidden;
    price: EditProductTemplateOptionVariantDataProductTemplateOptionVariantEditPrice;
    priceSetup: EditProductTemplateOptionVariantDataProductTemplateOptionVariantEditPriceSetup;
    key: EditProductTemplateOptionVariantDataProductTemplateOptionVariantEditKey;
    label: EditProductTemplateOptionVariantDataProductTemplateOptionVariantEditLabel;
    value?: Nullable<EditProductTemplateOptionVariantDataProductTemplateOptionVariantEditValue>;
    meta: EditProductTemplateOptionVariantDataProductTemplateOptionVariantEditMeta;
    siblings: Array<EditProductTemplateOptionVariantDataProductTemplateOptionVariantEditSiblings>;
};

type EditProductTemplateOptionVariantDataProductTemplateOptionVariantEditId = string;
type EditProductTemplateOptionVariantDataProductTemplateOptionVariantEditPriceMultiplier = number;
type EditProductTemplateOptionVariantDataProductTemplateOptionVariantEditSort = number;
type EditProductTemplateOptionVariantDataProductTemplateOptionVariantEditHidden = boolean;
type EditProductTemplateOptionVariantDataProductTemplateOptionVariantEditPrice = number;
type EditProductTemplateOptionVariantDataProductTemplateOptionVariantEditPriceSetup = number;
type EditProductTemplateOptionVariantDataProductTemplateOptionVariantEditKey = string;
type EditProductTemplateOptionVariantDataProductTemplateOptionVariantEditLabel = string;
type EditProductTemplateOptionVariantDataProductTemplateOptionVariantEditValue = any;
type EditProductTemplateOptionVariantDataProductTemplateOptionVariantEditMeta = any;
type EditProductTemplateOptionVariantDataProductTemplateOptionVariantEditSiblings = {
    __typename?: 'ProductTemplateOptionVariant';
    id: EditProductTemplateOptionVariantDataProductTemplateOptionVariantEditSiblingsId;
};

type EditProductTemplateOptionVariantDataProductTemplateOptionVariantEditSiblingsId = string;

useMutationDeleteProductTemplateOptionVariant.Document = gql`
    mutation deleteProductTemplateOptionVariant($id: ID!) {
        productTemplateOptionVariantDelete(id: $id)
    }
` as DocumentNode;

export function useMutationDeleteProductTemplateOptionVariant(
    options?: MutationHookOptions<
        DeleteProductTemplateOptionVariantData,
        DeleteProductTemplateOptionVariantVariables
    >
): MutationHookFn<
    DeleteProductTemplateOptionVariantData,
    DeleteProductTemplateOptionVariantVariables
> {
    return useMutation<
        DeleteProductTemplateOptionVariantData,
        DeleteProductTemplateOptionVariantVariables
    >(useMutationDeleteProductTemplateOptionVariant.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type DeleteProductTemplateOptionVariantVariables = {
    id: DeleteProductTemplateOptionVariantVariablesId;
};

type DeleteProductTemplateOptionVariantVariablesId = string;

export type DeleteProductTemplateOptionVariantData = {
    productTemplateOptionVariantDelete: DeleteProductTemplateOptionVariantDataProductTemplateOptionVariantDelete;
};

type DeleteProductTemplateOptionVariantDataProductTemplateOptionVariantDelete = boolean;

/*,
 * Fragments from undefined,
 */
export type ProductTemplateSimplePart = {
    id: ProductTemplateSimplePartId;
    options: Array<ProductTemplateSimplePartOptions>;
    title: ProductTemplateSimplePartTitle;
    setup: ProductTemplateSimplePartSetup;
    basePrice: ProductTemplateSimplePartBasePrice;
    active: ProductTemplateSimplePartActive;
    periods: Array<ProductTemplateSimplePartPeriods>;
    update: ProductTemplateSimplePartUpdate;
    attributes: ProductTemplateSimplePartAttributes;
    availablePeriods: Array<ProductTemplateSimplePartAvailablePeriods>;
    includedGTld?: Nullable<ProductTemplateSimplePartIncludedGTld>;
    urlKey?: Nullable<ProductTemplateSimplePartUrlKey>;
};

type ProductTemplateSimplePartId = string;
type ProductTemplateSimplePartOptions = {
    __typename?: 'ProductTemplateOption';
    id: ProductTemplateSimplePartOptionsId;
};

type ProductTemplateSimplePartOptionsId = string;
type ProductTemplateSimplePartTitle = string;
type ProductTemplateSimplePartSetup = number;
type ProductTemplateSimplePartBasePrice = number;
type ProductTemplateSimplePartActive = boolean;
type ProductTemplateSimplePartPeriods = {
    __typename?: 'ProductTemplateExtendPeriod';
    id: ProductTemplateSimplePartPeriodsId;
};

type ProductTemplateSimplePartPeriodsId = string;
type ProductTemplateSimplePartUpdate = any;
type ProductTemplateSimplePartAttributes = any;
type ProductTemplateSimplePartAvailablePeriods = {
    __typename?: 'ProductTemplateExtendPeriod';
    id: ProductTemplateSimplePartAvailablePeriodsId;
};

type ProductTemplateSimplePartAvailablePeriodsId = string;
type ProductTemplateSimplePartIncludedGTld = string;
type ProductTemplateSimplePartUrlKey = string;
const _gql_ProductTemplateSimplePart = gql`
    fragment ProductTemplateSimplePart on ProductTemplateSimple {
        id
        options {
            id
        }
        title
        setup
        basePrice
        active
        periods {
            id
        }
        update
        attributes
        availablePeriods {
            id
        }
        includedGTld
        urlKey
    }
`;

/*,
 * Operations from undefined,
 */

useQueryProductTemplateSimpleById.Document = gql`
    query ProductTemplateSimpleById($id: ID!) {
        productTemplateSimpleById(id: $id) {
            ...ProductTemplateSimplePart
        }
    }
    ${_gql_ProductTemplateSimplePart}
` as DocumentNode;

export function useQueryProductTemplateSimpleById(
    options?: QueryHookOptions<
        ProductTemplateSimpleByIdData,
        ProductTemplateSimpleByIdVariables
    >
) {
    const result = useQuery<
        ProductTemplateSimpleByIdData,
        ProductTemplateSimpleByIdVariables
    >(useQueryProductTemplateSimpleById.Document, {
        ...queryDefaultOptions,
        ...options,
    });
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryProductTemplateSimpleById.lazy = function (
    options?: LazyQueryHookOptions<
        ProductTemplateSimpleByIdData,
        ProductTemplateSimpleByIdVariables
    >
) {
    return useLazyQuery(useQueryProductTemplateSimpleById.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type ProductTemplateSimpleByIdVariables = {
    id: ProductTemplateSimpleByIdVariablesId;
};

type ProductTemplateSimpleByIdVariablesId = string;

export type ProductTemplateSimpleByIdData = {
    productTemplateSimpleById: ProductTemplateSimpleByIdDataProductTemplateSimpleById;
};

type ProductTemplateSimpleByIdDataProductTemplateSimpleById = ProductTemplateSimplePart & {
    __typename?: 'ProductTemplateSimple';
};

useQueryProductTemplateSimples.Document = gql`
    query ProductTemplateSimples($filter: CordFilter) {
        productTemplateSimples(filter: $filter) {
            edges {
                id
                options {
                    id
                }
                urlKey
                title
                setup
                basePrice
                active
                update
            }
            pageInfo {
                totalCount
            }
        }
    }
` as DocumentNode;

export function useQueryProductTemplateSimples(
    options?: QueryHookOptions<
        ProductTemplateSimplesData,
        ProductTemplateSimplesVariables
    >
) {
    const result = useQuery<
        ProductTemplateSimplesData,
        ProductTemplateSimplesVariables
    >(useQueryProductTemplateSimples.Document, {
        ...queryDefaultOptions,
        ...options,
    });
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryProductTemplateSimples.lazy = function (
    options?: LazyQueryHookOptions<
        ProductTemplateSimplesData,
        ProductTemplateSimplesVariables
    >
) {
    return useLazyQuery(useQueryProductTemplateSimples.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type ProductTemplateSimplesVariables = {
    filter?: Nullable<ProductTemplateSimplesVariablesFilter>;
};

type ProductTemplateSimplesVariablesFilter = CordFilter;

export type ProductTemplateSimplesData = {
    productTemplateSimples: ProductTemplateSimplesDataProductTemplateSimples;
};

type ProductTemplateSimplesDataProductTemplateSimples = {
    __typename?: 'ProductTemplateSimpleResultMany';
    edges: Array<ProductTemplateSimplesDataProductTemplateSimplesEdges>;
    pageInfo: ProductTemplateSimplesDataProductTemplateSimplesPageInfo;
};

type ProductTemplateSimplesDataProductTemplateSimplesEdges = {
    __typename?: 'ProductTemplateSimple';
    id: ProductTemplateSimplesDataProductTemplateSimplesEdgesId;
    options: Array<ProductTemplateSimplesDataProductTemplateSimplesEdgesOptions>;
    urlKey?: Nullable<ProductTemplateSimplesDataProductTemplateSimplesEdgesUrlKey>;
    title: ProductTemplateSimplesDataProductTemplateSimplesEdgesTitle;
    setup: ProductTemplateSimplesDataProductTemplateSimplesEdgesSetup;
    basePrice: ProductTemplateSimplesDataProductTemplateSimplesEdgesBasePrice;
    active: ProductTemplateSimplesDataProductTemplateSimplesEdgesActive;
    update: ProductTemplateSimplesDataProductTemplateSimplesEdgesUpdate;
};

type ProductTemplateSimplesDataProductTemplateSimplesEdgesId = string;
type ProductTemplateSimplesDataProductTemplateSimplesEdgesOptions = {
    __typename?: 'ProductTemplateOption';
    id: ProductTemplateSimplesDataProductTemplateSimplesEdgesOptionsId;
};

type ProductTemplateSimplesDataProductTemplateSimplesEdgesOptionsId = string;
type ProductTemplateSimplesDataProductTemplateSimplesEdgesUrlKey = string;
type ProductTemplateSimplesDataProductTemplateSimplesEdgesTitle = string;
type ProductTemplateSimplesDataProductTemplateSimplesEdgesSetup = number;
type ProductTemplateSimplesDataProductTemplateSimplesEdgesBasePrice = number;
type ProductTemplateSimplesDataProductTemplateSimplesEdgesActive = boolean;
type ProductTemplateSimplesDataProductTemplateSimplesEdgesUpdate = any;
type ProductTemplateSimplesDataProductTemplateSimplesPageInfo = {
    __typename?: 'CordPageInfo';
    totalCount: ProductTemplateSimplesDataProductTemplateSimplesPageInfoTotalCount;
};

type ProductTemplateSimplesDataProductTemplateSimplesPageInfoTotalCount = number;

useMutationCreateProductTemplateSimple.Document = gql`
    mutation createProductTemplateSimple(
        $title: String!
        $setup: Float!
        $basePrice: Float!
        $urlKey: String!
        $active: Boolean!
    ) {
        productTemplateSimpleCreate(
            title: $title
            setup: $setup
            basePrice: $basePrice
            urlKey: $urlKey
            active: $active
        ) {
            id
        }
    }
` as DocumentNode;

export function useMutationCreateProductTemplateSimple(
    options?: MutationHookOptions<
        CreateProductTemplateSimpleData,
        CreateProductTemplateSimpleVariables
    >
): MutationHookFn<
    CreateProductTemplateSimpleData,
    CreateProductTemplateSimpleVariables
> {
    return useMutation<
        CreateProductTemplateSimpleData,
        CreateProductTemplateSimpleVariables
    >(useMutationCreateProductTemplateSimple.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type CreateProductTemplateSimpleVariables = {
    title: CreateProductTemplateSimpleVariablesTitle;
    setup: CreateProductTemplateSimpleVariablesSetup;
    basePrice: CreateProductTemplateSimpleVariablesBasePrice;
    urlKey: CreateProductTemplateSimpleVariablesUrlKey;
    active: CreateProductTemplateSimpleVariablesActive;
};

type CreateProductTemplateSimpleVariablesTitle = string;
type CreateProductTemplateSimpleVariablesSetup = number;
type CreateProductTemplateSimpleVariablesBasePrice = number;
type CreateProductTemplateSimpleVariablesUrlKey = string;
type CreateProductTemplateSimpleVariablesActive = boolean;

export type CreateProductTemplateSimpleData = {
    productTemplateSimpleCreate: CreateProductTemplateSimpleDataProductTemplateSimpleCreate;
};

type CreateProductTemplateSimpleDataProductTemplateSimpleCreate = {
    __typename?: 'ProductTemplateSimple';
    id: CreateProductTemplateSimpleDataProductTemplateSimpleCreateId;
};

type CreateProductTemplateSimpleDataProductTemplateSimpleCreateId = string;

useMutationEditProductTemplateSimple.Document = gql`
    mutation editProductTemplateSimple(
        $id: ID!
        $title: String!
        $setup: Float!
        $basePrice: Float!
        $urlKey: String!
        $active: Boolean!
        $optionIds: [ID!]!
        $includedGTld: String
        $extendIntervalIds: [ID!]
    ) {
        productTemplateSimpleEdit(
            id: $id
            title: $title
            setup: $setup
            urlKey: $urlKey
            basePrice: $basePrice
            active: $active
            optionIds: $optionIds
            includedGTld: $includedGTld
            extendIntervalIds: $extendIntervalIds
        ) {
            ...ProductTemplateSimplePart
        }
    }
    ${_gql_ProductTemplateSimplePart}
` as DocumentNode;

export function useMutationEditProductTemplateSimple(
    options?: MutationHookOptions<
        EditProductTemplateSimpleData,
        EditProductTemplateSimpleVariables
    >
): MutationHookFn<
    EditProductTemplateSimpleData,
    EditProductTemplateSimpleVariables
> {
    return useMutation<
        EditProductTemplateSimpleData,
        EditProductTemplateSimpleVariables
    >(useMutationEditProductTemplateSimple.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type EditProductTemplateSimpleVariables = {
    id: EditProductTemplateSimpleVariablesId;
    title: EditProductTemplateSimpleVariablesTitle;
    setup: EditProductTemplateSimpleVariablesSetup;
    basePrice: EditProductTemplateSimpleVariablesBasePrice;
    urlKey: EditProductTemplateSimpleVariablesUrlKey;
    active: EditProductTemplateSimpleVariablesActive;
    optionIds: ReadonlyArray<EditProductTemplateSimpleVariablesOptionIds>;
    includedGTld?: Nullable<EditProductTemplateSimpleVariablesIncludedGTld>;
    extendIntervalIds?: Nullable<
        ReadonlyArray<EditProductTemplateSimpleVariablesExtendIntervalIds>
    >;
};

type EditProductTemplateSimpleVariablesId = string;
type EditProductTemplateSimpleVariablesTitle = string;
type EditProductTemplateSimpleVariablesSetup = number;
type EditProductTemplateSimpleVariablesBasePrice = number;
type EditProductTemplateSimpleVariablesUrlKey = string;
type EditProductTemplateSimpleVariablesActive = boolean;
type EditProductTemplateSimpleVariablesOptionIds = string;
type EditProductTemplateSimpleVariablesIncludedGTld = string;
type EditProductTemplateSimpleVariablesExtendIntervalIds = string;

export type EditProductTemplateSimpleData = {
    productTemplateSimpleEdit: EditProductTemplateSimpleDataProductTemplateSimpleEdit;
};

type EditProductTemplateSimpleDataProductTemplateSimpleEdit = ProductTemplateSimplePart & {
    __typename?: 'ProductTemplateSimple';
};

useMutationDeleteProductTemplateSimple.Document = gql`
    mutation deleteProductTemplateSimple($id: ID!) {
        productTemplateSimpleDelete(id: $id)
    }
` as DocumentNode;

export function useMutationDeleteProductTemplateSimple(
    options?: MutationHookOptions<
        DeleteProductTemplateSimpleData,
        DeleteProductTemplateSimpleVariables
    >
): MutationHookFn<
    DeleteProductTemplateSimpleData,
    DeleteProductTemplateSimpleVariables
> {
    return useMutation<
        DeleteProductTemplateSimpleData,
        DeleteProductTemplateSimpleVariables
    >(useMutationDeleteProductTemplateSimple.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type DeleteProductTemplateSimpleVariables = {
    id: DeleteProductTemplateSimpleVariablesId;
};

type DeleteProductTemplateSimpleVariablesId = string;

export type DeleteProductTemplateSimpleData = {
    productTemplateSimpleDelete: DeleteProductTemplateSimpleDataProductTemplateSimpleDelete;
};

type DeleteProductTemplateSimpleDataProductTemplateSimpleDelete = boolean;

/*,
 * Fragments from undefined,
 */
export type ProductTemplateTeamspeakPart = {
    id: ProductTemplateTeamspeakPartId;
    slot: ProductTemplateTeamspeakPartSlot;
    options: Array<ProductTemplateTeamspeakPartOptions>;
    title: ProductTemplateTeamspeakPartTitle;
    setup: ProductTemplateTeamspeakPartSetup;
    basePrice: ProductTemplateTeamspeakPartBasePrice;
    active: ProductTemplateTeamspeakPartActive;
    update: ProductTemplateTeamspeakPartUpdate;
    attributes: ProductTemplateTeamspeakPartAttributes;
    urlKey?: Nullable<ProductTemplateTeamspeakPartUrlKey>;
};

type ProductTemplateTeamspeakPartId = string;
type ProductTemplateTeamspeakPartSlot = {
    __typename?: 'ProductTemplateOption';
    id: ProductTemplateTeamspeakPartSlotId;
};

type ProductTemplateTeamspeakPartSlotId = string;
type ProductTemplateTeamspeakPartOptions = {
    __typename?: 'ProductTemplateOption';
    id: ProductTemplateTeamspeakPartOptionsId;
};

type ProductTemplateTeamspeakPartOptionsId = string;
type ProductTemplateTeamspeakPartTitle = string;
type ProductTemplateTeamspeakPartSetup = number;
type ProductTemplateTeamspeakPartBasePrice = number;
type ProductTemplateTeamspeakPartActive = boolean;
type ProductTemplateTeamspeakPartUpdate = any;
type ProductTemplateTeamspeakPartAttributes = any;
type ProductTemplateTeamspeakPartUrlKey = string;
const _gql_ProductTemplateTeamspeakPart = gql`
    fragment ProductTemplateTeamspeakPart on ProductTemplateTeamspeak {
        id
        slot {
            id
        }
        options {
            id
        }
        title
        setup
        basePrice
        active
        update
        attributes
        urlKey
    }
`;

/*,
 * Operations from undefined,
 */

useQueryProductTemplateTeamspeakById.Document = gql`
    query productTemplateTeamspeakById($id: ID!) {
        productTemplateTeamspeakById(id: $id) {
            ...ProductTemplateTeamspeakPart
        }
    }
    ${_gql_ProductTemplateTeamspeakPart}
` as DocumentNode;

export function useQueryProductTemplateTeamspeakById(
    options?: QueryHookOptions<
        ProductTemplateTeamspeakByIdData,
        ProductTemplateTeamspeakByIdVariables
    >
) {
    const result = useQuery<
        ProductTemplateTeamspeakByIdData,
        ProductTemplateTeamspeakByIdVariables
    >(useQueryProductTemplateTeamspeakById.Document, {
        ...queryDefaultOptions,
        ...options,
    });
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryProductTemplateTeamspeakById.lazy = function (
    options?: LazyQueryHookOptions<
        ProductTemplateTeamspeakByIdData,
        ProductTemplateTeamspeakByIdVariables
    >
) {
    return useLazyQuery(useQueryProductTemplateTeamspeakById.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type ProductTemplateTeamspeakByIdVariables = {
    id: ProductTemplateTeamspeakByIdVariablesId;
};

type ProductTemplateTeamspeakByIdVariablesId = string;

export type ProductTemplateTeamspeakByIdData = {
    productTemplateTeamspeakById: ProductTemplateTeamspeakByIdDataProductTemplateTeamspeakById;
};

type ProductTemplateTeamspeakByIdDataProductTemplateTeamspeakById = ProductTemplateTeamspeakPart & {
    __typename?: 'ProductTemplateTeamspeak';
};

useQueryProductTemplateTeamspeaks.Document = gql`
    query productTemplateTeamspeaks($filter: CordFilter) {
        productTemplateTeamspeaks(filter: $filter) {
            edges {
                id
                slot {
                    id
                }
                options {
                    id
                }
                urlKey
                title
                setup
                basePrice
                active
                update
            }
            pageInfo {
                totalCount
            }
        }
    }
` as DocumentNode;

export function useQueryProductTemplateTeamspeaks(
    options?: QueryHookOptions<
        ProductTemplateTeamspeaksData,
        ProductTemplateTeamspeaksVariables
    >
) {
    const result = useQuery<
        ProductTemplateTeamspeaksData,
        ProductTemplateTeamspeaksVariables
    >(useQueryProductTemplateTeamspeaks.Document, {
        ...queryDefaultOptions,
        ...options,
    });
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryProductTemplateTeamspeaks.lazy = function (
    options?: LazyQueryHookOptions<
        ProductTemplateTeamspeaksData,
        ProductTemplateTeamspeaksVariables
    >
) {
    return useLazyQuery(useQueryProductTemplateTeamspeaks.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type ProductTemplateTeamspeaksVariables = {
    filter?: Nullable<ProductTemplateTeamspeaksVariablesFilter>;
};

type ProductTemplateTeamspeaksVariablesFilter = CordFilter;

export type ProductTemplateTeamspeaksData = {
    productTemplateTeamspeaks: ProductTemplateTeamspeaksDataProductTemplateTeamspeaks;
};

type ProductTemplateTeamspeaksDataProductTemplateTeamspeaks = {
    __typename?: 'ProductTemplateTeamspeakResultMany';
    edges: Array<ProductTemplateTeamspeaksDataProductTemplateTeamspeaksEdges>;
    pageInfo: ProductTemplateTeamspeaksDataProductTemplateTeamspeaksPageInfo;
};

type ProductTemplateTeamspeaksDataProductTemplateTeamspeaksEdges = {
    __typename?: 'ProductTemplateTeamspeak';
    id: ProductTemplateTeamspeaksDataProductTemplateTeamspeaksEdgesId;
    slot: ProductTemplateTeamspeaksDataProductTemplateTeamspeaksEdgesSlot;
    options: Array<ProductTemplateTeamspeaksDataProductTemplateTeamspeaksEdgesOptions>;
    urlKey?: Nullable<ProductTemplateTeamspeaksDataProductTemplateTeamspeaksEdgesUrlKey>;
    title: ProductTemplateTeamspeaksDataProductTemplateTeamspeaksEdgesTitle;
    setup: ProductTemplateTeamspeaksDataProductTemplateTeamspeaksEdgesSetup;
    basePrice: ProductTemplateTeamspeaksDataProductTemplateTeamspeaksEdgesBasePrice;
    active: ProductTemplateTeamspeaksDataProductTemplateTeamspeaksEdgesActive;
    update: ProductTemplateTeamspeaksDataProductTemplateTeamspeaksEdgesUpdate;
};

type ProductTemplateTeamspeaksDataProductTemplateTeamspeaksEdgesId = string;
type ProductTemplateTeamspeaksDataProductTemplateTeamspeaksEdgesSlot = {
    __typename?: 'ProductTemplateOption';
    id: ProductTemplateTeamspeaksDataProductTemplateTeamspeaksEdgesSlotId;
};

type ProductTemplateTeamspeaksDataProductTemplateTeamspeaksEdgesSlotId = string;
type ProductTemplateTeamspeaksDataProductTemplateTeamspeaksEdgesOptions = {
    __typename?: 'ProductTemplateOption';
    id: ProductTemplateTeamspeaksDataProductTemplateTeamspeaksEdgesOptionsId;
};

type ProductTemplateTeamspeaksDataProductTemplateTeamspeaksEdgesOptionsId = string;
type ProductTemplateTeamspeaksDataProductTemplateTeamspeaksEdgesUrlKey = string;
type ProductTemplateTeamspeaksDataProductTemplateTeamspeaksEdgesTitle = string;
type ProductTemplateTeamspeaksDataProductTemplateTeamspeaksEdgesSetup = number;
type ProductTemplateTeamspeaksDataProductTemplateTeamspeaksEdgesBasePrice = number;
type ProductTemplateTeamspeaksDataProductTemplateTeamspeaksEdgesActive = boolean;
type ProductTemplateTeamspeaksDataProductTemplateTeamspeaksEdgesUpdate = any;
type ProductTemplateTeamspeaksDataProductTemplateTeamspeaksPageInfo = {
    __typename?: 'CordPageInfo';
    totalCount: ProductTemplateTeamspeaksDataProductTemplateTeamspeaksPageInfoTotalCount;
};

type ProductTemplateTeamspeaksDataProductTemplateTeamspeaksPageInfoTotalCount = number;

useMutationCreateProductTemplateTeamspeak.Document = gql`
    mutation createProductTemplateTeamspeak(
        $title: String!
        $setup: Float!
        $basePrice: Float!
        $urlKey: String!
        $active: Boolean!
        $slotOptionId: ID!
    ) {
        productTemplateTeamspeakCreate(
            title: $title
            setup: $setup
            basePrice: $basePrice
            urlKey: $urlKey
            active: $active
            slotOptionId: $slotOptionId
        ) {
            id
        }
    }
` as DocumentNode;

export function useMutationCreateProductTemplateTeamspeak(
    options?: MutationHookOptions<
        CreateProductTemplateTeamspeakData,
        CreateProductTemplateTeamspeakVariables
    >
): MutationHookFn<
    CreateProductTemplateTeamspeakData,
    CreateProductTemplateTeamspeakVariables
> {
    return useMutation<
        CreateProductTemplateTeamspeakData,
        CreateProductTemplateTeamspeakVariables
    >(useMutationCreateProductTemplateTeamspeak.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type CreateProductTemplateTeamspeakVariables = {
    title: CreateProductTemplateTeamspeakVariablesTitle;
    setup: CreateProductTemplateTeamspeakVariablesSetup;
    basePrice: CreateProductTemplateTeamspeakVariablesBasePrice;
    urlKey: CreateProductTemplateTeamspeakVariablesUrlKey;
    active: CreateProductTemplateTeamspeakVariablesActive;
    slotOptionId: CreateProductTemplateTeamspeakVariablesSlotOptionId;
};

type CreateProductTemplateTeamspeakVariablesTitle = string;
type CreateProductTemplateTeamspeakVariablesSetup = number;
type CreateProductTemplateTeamspeakVariablesBasePrice = number;
type CreateProductTemplateTeamspeakVariablesUrlKey = string;
type CreateProductTemplateTeamspeakVariablesActive = boolean;
type CreateProductTemplateTeamspeakVariablesSlotOptionId = string;

export type CreateProductTemplateTeamspeakData = {
    productTemplateTeamspeakCreate: CreateProductTemplateTeamspeakDataProductTemplateTeamspeakCreate;
};

type CreateProductTemplateTeamspeakDataProductTemplateTeamspeakCreate = {
    __typename?: 'ProductTemplateTeamspeak';
    id: CreateProductTemplateTeamspeakDataProductTemplateTeamspeakCreateId;
};

type CreateProductTemplateTeamspeakDataProductTemplateTeamspeakCreateId = string;

useMutationEditProductTemplateTeamspeak.Document = gql`
    mutation editProductTemplateTeamspeak(
        $id: ID!
        $title: String!
        $setup: Float!
        $basePrice: Float!
        $urlKey: String!
        $active: Boolean!
        $slotOptionId: ID!
    ) {
        productTemplateTeamspeakEdit(
            id: $id
            title: $title
            setup: $setup
            urlKey: $urlKey
            basePrice: $basePrice
            active: $active
            slotOptionId: $slotOptionId
        ) {
            ...ProductTemplateTeamspeakPart
        }
    }
    ${_gql_ProductTemplateTeamspeakPart}
` as DocumentNode;

export function useMutationEditProductTemplateTeamspeak(
    options?: MutationHookOptions<
        EditProductTemplateTeamspeakData,
        EditProductTemplateTeamspeakVariables
    >
): MutationHookFn<
    EditProductTemplateTeamspeakData,
    EditProductTemplateTeamspeakVariables
> {
    return useMutation<
        EditProductTemplateTeamspeakData,
        EditProductTemplateTeamspeakVariables
    >(useMutationEditProductTemplateTeamspeak.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type EditProductTemplateTeamspeakVariables = {
    id: EditProductTemplateTeamspeakVariablesId;
    title: EditProductTemplateTeamspeakVariablesTitle;
    setup: EditProductTemplateTeamspeakVariablesSetup;
    basePrice: EditProductTemplateTeamspeakVariablesBasePrice;
    urlKey: EditProductTemplateTeamspeakVariablesUrlKey;
    active: EditProductTemplateTeamspeakVariablesActive;
    slotOptionId: EditProductTemplateTeamspeakVariablesSlotOptionId;
};

type EditProductTemplateTeamspeakVariablesId = string;
type EditProductTemplateTeamspeakVariablesTitle = string;
type EditProductTemplateTeamspeakVariablesSetup = number;
type EditProductTemplateTeamspeakVariablesBasePrice = number;
type EditProductTemplateTeamspeakVariablesUrlKey = string;
type EditProductTemplateTeamspeakVariablesActive = boolean;
type EditProductTemplateTeamspeakVariablesSlotOptionId = string;

export type EditProductTemplateTeamspeakData = {
    productTemplateTeamspeakEdit: EditProductTemplateTeamspeakDataProductTemplateTeamspeakEdit;
};

type EditProductTemplateTeamspeakDataProductTemplateTeamspeakEdit = ProductTemplateTeamspeakPart & {
    __typename?: 'ProductTemplateTeamspeak';
};

useMutationDeleteProductTemplateTeamspeak.Document = gql`
    mutation deleteProductTemplateTeamspeak($id: ID!) {
        productTemplateTeamspeakDelete(id: $id)
    }
` as DocumentNode;

export function useMutationDeleteProductTemplateTeamspeak(
    options?: MutationHookOptions<
        DeleteProductTemplateTeamspeakData,
        DeleteProductTemplateTeamspeakVariables
    >
): MutationHookFn<
    DeleteProductTemplateTeamspeakData,
    DeleteProductTemplateTeamspeakVariables
> {
    return useMutation<
        DeleteProductTemplateTeamspeakData,
        DeleteProductTemplateTeamspeakVariables
    >(useMutationDeleteProductTemplateTeamspeak.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type DeleteProductTemplateTeamspeakVariables = {
    id: DeleteProductTemplateTeamspeakVariablesId;
};

type DeleteProductTemplateTeamspeakVariablesId = string;

export type DeleteProductTemplateTeamspeakData = {
    productTemplateTeamspeakDelete: DeleteProductTemplateTeamspeakDataProductTemplateTeamspeakDelete;
};

type DeleteProductTemplateTeamspeakDataProductTemplateTeamspeakDelete = boolean;

/*,
 * Fragments from undefined,
 */
export type ProductTemplateVserverPart = {
    id: ProductTemplateVserverPartId;
    urlKey?: Nullable<ProductTemplateVserverPartUrlKey>;
    title: ProductTemplateVserverPartTitle;
    setup: ProductTemplateVserverPartSetup;
    basePrice: ProductTemplateVserverPartBasePrice;
    active: ProductTemplateVserverPartActive;
    platform: ProductTemplateVserverPartPlatform;
    update: ProductTemplateVserverPartUpdate;
    hostNodeFilterKey?: Nullable<ProductTemplateVserverPartHostNodeFilterKey>;
    memory: ProductTemplateVserverPartMemory;
    space: ProductTemplateVserverPartSpace;
    cores: ProductTemplateVserverPartCores;
};

type ProductTemplateVserverPartId = string;
type ProductTemplateVserverPartUrlKey = string;
type ProductTemplateVserverPartTitle = string;
type ProductTemplateVserverPartSetup = number;
type ProductTemplateVserverPartBasePrice = number;
type ProductTemplateVserverPartActive = boolean;
type ProductTemplateVserverPartPlatform = string;
type ProductTemplateVserverPartUpdate = any;
type ProductTemplateVserverPartHostNodeFilterKey = string;
type ProductTemplateVserverPartMemory = {
    __typename?: 'ProductTemplateOptionVariant';
    id: ProductTemplateVserverPartMemoryId;
};

type ProductTemplateVserverPartMemoryId = string;
type ProductTemplateVserverPartSpace = {
    __typename?: 'ProductTemplateOptionVariant';
    id: ProductTemplateVserverPartSpaceId;
};

type ProductTemplateVserverPartSpaceId = string;
type ProductTemplateVserverPartCores = {
    __typename?: 'ProductTemplateOptionVariant';
    id: ProductTemplateVserverPartCoresId;
};

type ProductTemplateVserverPartCoresId = string;
const _gql_ProductTemplateVserverPart = gql`
    fragment ProductTemplateVserverPart on ProductTemplateVserver {
        id
        urlKey
        title
        setup
        basePrice
        active
        platform
        update
        hostNodeFilterKey
        memory {
            id
        }
        space {
            id
        }
        cores {
            id
        }
    }
`;

/*,
 * Operations from undefined,
 */

useQueryProductTemplateVservers.Document = gql`
    query productTemplateVservers($filter: CordFilter) {
        productTemplateVservers(filter: $filter) {
            edges {
                ...ProductTemplateVserverPart
            }
            pageInfo {
                totalCount
            }
        }
    }
    ${_gql_ProductTemplateVserverPart}
` as DocumentNode;

export function useQueryProductTemplateVservers(
    options?: QueryHookOptions<
        ProductTemplateVserversData,
        ProductTemplateVserversVariables
    >
) {
    const result = useQuery<
        ProductTemplateVserversData,
        ProductTemplateVserversVariables
    >(useQueryProductTemplateVservers.Document, {
        ...queryDefaultOptions,
        ...options,
    });
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryProductTemplateVservers.lazy = function (
    options?: LazyQueryHookOptions<
        ProductTemplateVserversData,
        ProductTemplateVserversVariables
    >
) {
    return useLazyQuery(useQueryProductTemplateVservers.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type ProductTemplateVserversVariables = {
    filter?: Nullable<ProductTemplateVserversVariablesFilter>;
};

type ProductTemplateVserversVariablesFilter = CordFilter;

export type ProductTemplateVserversData = {
    productTemplateVservers: ProductTemplateVserversDataProductTemplateVservers;
};

type ProductTemplateVserversDataProductTemplateVservers = {
    __typename?: 'ProductTemplateVserverResultMany';
    edges: Array<ProductTemplateVserversDataProductTemplateVserversEdges>;
    pageInfo: ProductTemplateVserversDataProductTemplateVserversPageInfo;
};

type ProductTemplateVserversDataProductTemplateVserversEdges = ProductTemplateVserverPart & {
    __typename?: 'ProductTemplateVserver';
};

type ProductTemplateVserversDataProductTemplateVserversPageInfo = {
    __typename?: 'CordPageInfo';
    totalCount: ProductTemplateVserversDataProductTemplateVserversPageInfoTotalCount;
};

type ProductTemplateVserversDataProductTemplateVserversPageInfoTotalCount = number;

useQueryProductTemplateVserverById.Document = gql`
    query productTemplateVserverById($id: ID!) {
        productTemplateVserverById(id: $id) {
            ...ProductTemplateVserverPart
        }
    }
    ${_gql_ProductTemplateVserverPart}
` as DocumentNode;

export function useQueryProductTemplateVserverById(
    options?: QueryHookOptions<
        ProductTemplateVserverByIdData,
        ProductTemplateVserverByIdVariables
    >
) {
    const result = useQuery<
        ProductTemplateVserverByIdData,
        ProductTemplateVserverByIdVariables
    >(useQueryProductTemplateVserverById.Document, {
        ...queryDefaultOptions,
        ...options,
    });
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryProductTemplateVserverById.lazy = function (
    options?: LazyQueryHookOptions<
        ProductTemplateVserverByIdData,
        ProductTemplateVserverByIdVariables
    >
) {
    return useLazyQuery(useQueryProductTemplateVserverById.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type ProductTemplateVserverByIdVariables = {
    id: ProductTemplateVserverByIdVariablesId;
};

type ProductTemplateVserverByIdVariablesId = string;

export type ProductTemplateVserverByIdData = {
    productTemplateVserverById: ProductTemplateVserverByIdDataProductTemplateVserverById;
};

type ProductTemplateVserverByIdDataProductTemplateVserverById = ProductTemplateVserverPart & {
    __typename?: 'ProductTemplateVserver';
};

useMutationCreateProductTemplateVserver.Document = gql`
    mutation createProductTemplateVserver(
        $data: ProductTemplateVserverCreateInput!
    ) {
        productTemplateVserverCreate(data: $data) {
            ...ProductTemplateVserverPart
        }
    }
    ${_gql_ProductTemplateVserverPart}
` as DocumentNode;

export function useMutationCreateProductTemplateVserver(
    options?: MutationHookOptions<
        CreateProductTemplateVserverData,
        CreateProductTemplateVserverVariables
    >
): MutationHookFn<
    CreateProductTemplateVserverData,
    CreateProductTemplateVserverVariables
> {
    return useMutation<
        CreateProductTemplateVserverData,
        CreateProductTemplateVserverVariables
    >(useMutationCreateProductTemplateVserver.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type CreateProductTemplateVserverVariables = {
    data: CreateProductTemplateVserverVariablesData;
};

type CreateProductTemplateVserverVariablesData = ProductTemplateVserverCreateInput;

export type CreateProductTemplateVserverData = {
    productTemplateVserverCreate: CreateProductTemplateVserverDataProductTemplateVserverCreate;
};

type CreateProductTemplateVserverDataProductTemplateVserverCreate = ProductTemplateVserverPart & {
    __typename?: 'ProductTemplateVserver';
};

useMutationEditProductTemplateVserver.Document = gql`
    mutation editProductTemplateVserver(
        $data: ProductTemplateVserverEditInput!
    ) {
        productTemplateVserverEdit(data: $data) {
            ...ProductTemplateVserverPart
        }
    }
    ${_gql_ProductTemplateVserverPart}
` as DocumentNode;

export function useMutationEditProductTemplateVserver(
    options?: MutationHookOptions<
        EditProductTemplateVserverData,
        EditProductTemplateVserverVariables
    >
): MutationHookFn<
    EditProductTemplateVserverData,
    EditProductTemplateVserverVariables
> {
    return useMutation<
        EditProductTemplateVserverData,
        EditProductTemplateVserverVariables
    >(useMutationEditProductTemplateVserver.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type EditProductTemplateVserverVariables = {
    data: EditProductTemplateVserverVariablesData;
};

type EditProductTemplateVserverVariablesData = ProductTemplateVserverEditInput;

export type EditProductTemplateVserverData = {
    productTemplateVserverEdit: EditProductTemplateVserverDataProductTemplateVserverEdit;
};

type EditProductTemplateVserverDataProductTemplateVserverEdit = ProductTemplateVserverPart & {
    __typename?: 'ProductTemplateVserver';
};

useMutationDeleteProductTemplateVserver.Document = gql`
    mutation deleteProductTemplateVserver($id: ID!) {
        productTemplateVserverDelete(id: $id)
    }
` as DocumentNode;

export function useMutationDeleteProductTemplateVserver(
    options?: MutationHookOptions<
        DeleteProductTemplateVserverData,
        DeleteProductTemplateVserverVariables
    >
): MutationHookFn<
    DeleteProductTemplateVserverData,
    DeleteProductTemplateVserverVariables
> {
    return useMutation<
        DeleteProductTemplateVserverData,
        DeleteProductTemplateVserverVariables
    >(useMutationDeleteProductTemplateVserver.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type DeleteProductTemplateVserverVariables = {
    id: DeleteProductTemplateVserverVariablesId;
};

type DeleteProductTemplateVserverVariablesId = string;

export type DeleteProductTemplateVserverData = {
    productTemplateVserverDelete: DeleteProductTemplateVserverDataProductTemplateVserverDelete;
};

type DeleteProductTemplateVserverDataProductTemplateVserverDelete = boolean;

/*,
 * Fragments from undefined,
 */
export type TranslationPart = {
    id: TranslationPartId;
    language: TranslationPartLanguage;
    key: TranslationPartKey;
    value: TranslationPartValue;
};

type TranslationPartId = string;
type TranslationPartLanguage = string;
type TranslationPartKey = string;
type TranslationPartValue = string;
const _gql_TranslationPart = gql`
    fragment TranslationPart on Translation {
        id
        language
        key
        value
    }
`;

/*,
 * Operations from undefined,
 */

useQueryTranslations.Document = gql`
    query translations($filter: CordFilter) {
        translations(filter: $filter) {
            edges {
                ...TranslationPart
            }
            pageInfo {
                totalCount
            }
        }
    }
    ${_gql_TranslationPart}
` as DocumentNode;

export function useQueryTranslations(
    options?: QueryHookOptions<TranslationsData, TranslationsVariables>
) {
    const result = useQuery<TranslationsData, TranslationsVariables>(
        useQueryTranslations.Document,
        { ...queryDefaultOptions, ...options }
    );
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryTranslations.lazy = function (
    options?: LazyQueryHookOptions<TranslationsData, TranslationsVariables>
) {
    return useLazyQuery(useQueryTranslations.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type TranslationsVariables = {
    filter?: Nullable<TranslationsVariablesFilter>;
};

type TranslationsVariablesFilter = CordFilter;

export type TranslationsData = {
    translations: TranslationsDataTranslations;
};

type TranslationsDataTranslations = {
    __typename?: 'TranslationResultMany';
    edges: Array<TranslationsDataTranslationsEdges>;
    pageInfo: TranslationsDataTranslationsPageInfo;
};

type TranslationsDataTranslationsEdges = TranslationPart & {
    __typename?: 'Translation';
};

type TranslationsDataTranslationsPageInfo = {
    __typename?: 'CordPageInfo';
    totalCount: TranslationsDataTranslationsPageInfoTotalCount;
};

type TranslationsDataTranslationsPageInfoTotalCount = number;

useQueryTranslationById.Document = gql`
    query translationById($id: ID!) {
        translationById(id: $id) {
            ...TranslationPart
        }
    }
    ${_gql_TranslationPart}
` as DocumentNode;

export function useQueryTranslationById(
    options?: QueryHookOptions<TranslationByIdData, TranslationByIdVariables>
) {
    const result = useQuery<TranslationByIdData, TranslationByIdVariables>(
        useQueryTranslationById.Document,
        { ...queryDefaultOptions, ...options }
    );
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryTranslationById.lazy = function (
    options?: LazyQueryHookOptions<
        TranslationByIdData,
        TranslationByIdVariables
    >
) {
    return useLazyQuery(useQueryTranslationById.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type TranslationByIdVariables = {
    id: TranslationByIdVariablesId;
};

type TranslationByIdVariablesId = string;

export type TranslationByIdData = {
    translationById: TranslationByIdDataTranslationById;
};

type TranslationByIdDataTranslationById = TranslationPart & {
    __typename?: 'Translation';
};

useMutationTranslationEdit.Document = gql`
    mutation translationEdit(
        $id: ID!
        $value: String!
        $key: String!
        $language: String!
    ) {
        translationEdit(
            id: $id
            value: $value
            key: $key
            language: $language
        ) {
            ...TranslationPart
        }
    }
    ${_gql_TranslationPart}
` as DocumentNode;

export function useMutationTranslationEdit(
    options?: MutationHookOptions<TranslationEditData, TranslationEditVariables>
): MutationHookFn<TranslationEditData, TranslationEditVariables> {
    return useMutation<TranslationEditData, TranslationEditVariables>(
        useMutationTranslationEdit.Document,
        { ...mutationDefaultOptions, ...options }
    ) as any;
}

export type TranslationEditVariables = {
    id: TranslationEditVariablesId;
    value: TranslationEditVariablesValue;
    key: TranslationEditVariablesKey;
    language: TranslationEditVariablesLanguage;
};

type TranslationEditVariablesId = string;
type TranslationEditVariablesValue = string;
type TranslationEditVariablesKey = string;
type TranslationEditVariablesLanguage = string;

export type TranslationEditData = {
    translationEdit: TranslationEditDataTranslationEdit;
};

type TranslationEditDataTranslationEdit = TranslationPart & {
    __typename?: 'Translation';
};

useMutationTranslationCreate.Document = gql`
    mutation translationCreate {
        translationCreate {
            ...TranslationPart
        }
    }
    ${_gql_TranslationPart}
` as DocumentNode;

export function useMutationTranslationCreate(
    options?: MutationHookOptions<
        TranslationCreateData,
        TranslationCreateVariables
    >
): MutationHookFn<TranslationCreateData, TranslationCreateVariables> {
    return useMutation<TranslationCreateData, TranslationCreateVariables>(
        useMutationTranslationCreate.Document,
        { ...mutationDefaultOptions, ...options }
    ) as any;
}

export type TranslationCreateVariables = {};

export type TranslationCreateData = {
    translationCreate: TranslationCreateDataTranslationCreate;
};

type TranslationCreateDataTranslationCreate = TranslationPart & {
    __typename?: 'Translation';
};

useMutationTranslationDelete.Document = gql`
    mutation translationDelete($id: ID!) {
        translationDelete(id: $id)
    }
` as DocumentNode;

export function useMutationTranslationDelete(
    options?: MutationHookOptions<
        TranslationDeleteData,
        TranslationDeleteVariables
    >
): MutationHookFn<TranslationDeleteData, TranslationDeleteVariables> {
    return useMutation<TranslationDeleteData, TranslationDeleteVariables>(
        useMutationTranslationDelete.Document,
        { ...mutationDefaultOptions, ...options }
    ) as any;
}

export type TranslationDeleteVariables = {
    id: TranslationDeleteVariablesId;
};

type TranslationDeleteVariablesId = string;

export type TranslationDeleteData = {
    translationDelete: TranslationDeleteDataTranslationDelete;
};

type TranslationDeleteDataTranslationDelete = boolean;

/*,
 * Fragments from undefined,
 */
export type UserPart = {
    avatar: UserPartAvatar;
    nickname?: Nullable<UserPartNickname>;
    credits: UserPartCredits;
    email: UserPartEmail;
    active: UserPartActive;
    supportId: UserPartSupportId;
    localAvatar?: Nullable<UserPartLocalAvatar>;
    id: UserPartId;
    forceEmailLogin: UserPartForceEmailLogin;
};

type UserPartAvatar = string;
type UserPartNickname = string;
type UserPartCredits = number;
type UserPartEmail = string;
type UserPartActive = boolean;
type UserPartSupportId = string;
type UserPartLocalAvatar = {
    __typename?: 'File';
    id: UserPartLocalAvatarId;
    url: UserPartLocalAvatarUrl;
};

type UserPartLocalAvatarId = string;
type UserPartLocalAvatarUrl = string;
type UserPartId = string;
type UserPartForceEmailLogin = boolean;
const _gql_UserPart = gql`
    fragment UserPart on User {
        avatar
        nickname
        credits
        email
        active
        supportId
        localAvatar {
            id
            url
        }
        id
        forceEmailLogin
    }
`;
export type UserPartAddress = {
    firstname?: Nullable<UserPartAddressFirstname>;
    lastname?: Nullable<UserPartAddressLastname>;
    street1?: Nullable<UserPartAddressStreet1>;
    zip?: Nullable<UserPartAddressZip>;
    country: UserPartAddressCountry;
    title?: Nullable<UserPartAddressTitle>;
    city?: Nullable<UserPartAddressCity>;
    birthdate?: Nullable<UserPartAddressBirthdate>;
    phone?: Nullable<UserPartAddressPhone>;
    phoneMobile?: Nullable<UserPartAddressPhoneMobile>;
    company?: Nullable<UserPartAddressCompany>;
    vatId?: Nullable<UserPartAddressVatId>;
    id: UserPartAddressId;
    verified: UserPartAddressVerified;
    vat?: Nullable<UserPartAddressVat>;
    verifyDocument?: Nullable<UserPartAddressVerifyDocument>;
};

type UserPartAddressFirstname = string;
type UserPartAddressLastname = string;
type UserPartAddressStreet1 = string;
type UserPartAddressZip = string;
type UserPartAddressCountry = string;
type UserPartAddressTitle = string;
type UserPartAddressCity = string;
type UserPartAddressBirthdate = string;
type UserPartAddressPhone = string;
type UserPartAddressPhoneMobile = string;
type UserPartAddressCompany = string;
type UserPartAddressVatId = string;
type UserPartAddressId = string;
type UserPartAddressVerified = boolean;
type UserPartAddressVat = number;
type UserPartAddressVerifyDocument = {
    __typename?: 'File';
    id: UserPartAddressVerifyDocumentId;
    originalname: UserPartAddressVerifyDocumentOriginalname;
    url: UserPartAddressVerifyDocumentUrl;
    create: UserPartAddressVerifyDocumentCreate;
};

type UserPartAddressVerifyDocumentId = string;
type UserPartAddressVerifyDocumentOriginalname = string;
type UserPartAddressVerifyDocumentUrl = string;
type UserPartAddressVerifyDocumentCreate = any;
const _gql_UserPartAddress = gql`
    fragment UserPartAddress on UserAddress {
        firstname
        lastname
        street1
        zip
        country
        title
        city

        birthdate
        phone
        phoneMobile
        company
        vatId
        id
        verified
        vat
        verifyDocument {
            id
            originalname
            url
            create
        }
    }
`;

/*,
 * Operations from undefined,
 */

useMutationUserSetActive.Document = gql`
    mutation userSetActive($id: ID!, $active: Boolean!) {
        userSetActive(id: $id, active: $active) {
            ...UserPart
        }
    }
    ${_gql_UserPart}
` as DocumentNode;

export function useMutationUserSetActive(
    options?: MutationHookOptions<UserSetActiveData, UserSetActiveVariables>
): MutationHookFn<UserSetActiveData, UserSetActiveVariables> {
    return useMutation<UserSetActiveData, UserSetActiveVariables>(
        useMutationUserSetActive.Document,
        { ...mutationDefaultOptions, ...options }
    ) as any;
}

export type UserSetActiveVariables = {
    id: UserSetActiveVariablesId;
    active: UserSetActiveVariablesActive;
};

type UserSetActiveVariablesId = string;
type UserSetActiveVariablesActive = boolean;

export type UserSetActiveData = {
    userSetActive: UserSetActiveDataUserSetActive;
};

type UserSetActiveDataUserSetActive = UserPart & {
    __typename?: 'User';
};

useQueryPing.Document = gql`
    query ping {
        ping
    }
` as DocumentNode;

export function useQueryPing(
    options?: QueryHookOptions<PingData, PingVariables>
) {
    const result = useQuery<PingData, PingVariables>(useQueryPing.Document, {
        ...queryDefaultOptions,
        ...options,
    });
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryPing.lazy = function (
    options?: LazyQueryHookOptions<PingData, PingVariables>
) {
    return useLazyQuery(useQueryPing.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type PingVariables = {};

export type PingData = {
    ping: PingDataPing;
};

type PingDataPing = any;

useQueryUsers.Document = gql`
    query users($filter: CordFilter) {
        users(filter: $filter) {
            edges {
                ...UserPart
            }
            pageInfo {
                totalCount
            }
        }
    }
    ${_gql_UserPart}
` as DocumentNode;

export function useQueryUsers(
    options?: QueryHookOptions<UsersData, UsersVariables>
) {
    const result = useQuery<UsersData, UsersVariables>(useQueryUsers.Document, {
        ...queryDefaultOptions,
        ...options,
    });
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryUsers.lazy = function (
    options?: LazyQueryHookOptions<UsersData, UsersVariables>
) {
    return useLazyQuery(useQueryUsers.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type UsersVariables = {
    filter?: Nullable<UsersVariablesFilter>;
};

type UsersVariablesFilter = CordFilter;

export type UsersData = {
    users: UsersDataUsers;
};

type UsersDataUsers = {
    __typename?: 'UserResultMany';
    edges: Array<UsersDataUsersEdges>;
    pageInfo: UsersDataUsersPageInfo;
};

type UsersDataUsersEdges = UserPart & {
    __typename?: 'User';
};

type UsersDataUsersPageInfo = {
    __typename?: 'CordPageInfo';
    totalCount: UsersDataUsersPageInfoTotalCount;
};

type UsersDataUsersPageInfoTotalCount = number;

useMutationUserTestMyPassword.Document = gql`
    mutation userTestMyPassword($password: String!) {
        userTestMyPassword(password: $password)
    }
` as DocumentNode;

export function useMutationUserTestMyPassword(
    options?: MutationHookOptions<
        UserTestMyPasswordData,
        UserTestMyPasswordVariables
    >
): MutationHookFn<UserTestMyPasswordData, UserTestMyPasswordVariables> {
    return useMutation<UserTestMyPasswordData, UserTestMyPasswordVariables>(
        useMutationUserTestMyPassword.Document,
        { ...mutationDefaultOptions, ...options }
    ) as any;
}

export type UserTestMyPasswordVariables = {
    password: UserTestMyPasswordVariablesPassword;
};

type UserTestMyPasswordVariablesPassword = string;

export type UserTestMyPasswordData = {
    userTestMyPassword: UserTestMyPasswordDataUserTestMyPassword;
};

type UserTestMyPasswordDataUserTestMyPassword = boolean;

useQueryUserById.Document = gql`
    query userById($id: ID!) {
        userById(id: $id) {
            ...UserPart
            verifyLevel
            lastLogin
            publicName
            customerId
            vat
            create
            active
            supportId
            address {
                ...UserPartAddress
            }
            tickets {
                id
                create
                open
                subject
                status
                category
            }
            products {
                id
            }
            gameservers {
                id
                name
                product {
                    id
                    create
                    expire
                }
            }
            teamspeaks {
                id
                name
                product {
                    id
                    create
                    expire
                }
            }
            vservers {
                id
                name
                ips {
                    ip
                }
                product {
                    id
                    create
                    expire
                }
            }
            domains {
                id
                authcode
                requestNewAuthcode
                registered
                tld
                name
                product {
                    id
                    create
                    expire
                }
            }
            simples {
                id
                name
                description
                product {
                    id
                    create
                    expire
                }
            }
            transactions {
                id
                type
                billId
                total
                create
                charge {
                    id
                    create
                }
            }
        }
    }
    ${_gql_UserPartAddress}
    ${_gql_UserPart}
` as DocumentNode;

export function useQueryUserById(
    options?: QueryHookOptions<UserByIdData, UserByIdVariables>
) {
    const result = useQuery<UserByIdData, UserByIdVariables>(
        useQueryUserById.Document,
        { ...queryDefaultOptions, ...options }
    );
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryUserById.lazy = function (
    options?: LazyQueryHookOptions<UserByIdData, UserByIdVariables>
) {
    return useLazyQuery(useQueryUserById.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type UserByIdVariables = {
    id: UserByIdVariablesId;
};

type UserByIdVariablesId = string;

export type UserByIdData = {
    userById: UserByIdDataUserById;
};

type UserByIdDataUserById = UserPart & {
    __typename?: 'User';
    verifyLevel: UserByIdDataUserByIdVerifyLevel;
    lastLogin?: Nullable<UserByIdDataUserByIdLastLogin>;
    publicName: UserByIdDataUserByIdPublicName;
    customerId: UserByIdDataUserByIdCustomerId;
    vat?: Nullable<UserByIdDataUserByIdVat>;
    create: UserByIdDataUserByIdCreate;
    active: UserByIdDataUserByIdActive;
    supportId: UserByIdDataUserByIdSupportId;
    address?: Nullable<UserByIdDataUserByIdAddress>;
    tickets: Array<UserByIdDataUserByIdTickets>;
    products: Array<UserByIdDataUserByIdProducts>;
    gameservers: Array<UserByIdDataUserByIdGameservers>;
    teamspeaks: Array<UserByIdDataUserByIdTeamspeaks>;
    vservers: Array<UserByIdDataUserByIdVservers>;
    domains: Array<UserByIdDataUserByIdDomains>;
    simples: Array<UserByIdDataUserByIdSimples>;
    transactions: Array<UserByIdDataUserByIdTransactions>;
};

type UserByIdDataUserByIdVerifyLevel = number;
type UserByIdDataUserByIdLastLogin = any;
type UserByIdDataUserByIdPublicName = string;
type UserByIdDataUserByIdCustomerId = number;
type UserByIdDataUserByIdVat = number;
type UserByIdDataUserByIdCreate = any;
type UserByIdDataUserByIdActive = boolean;
type UserByIdDataUserByIdSupportId = string;
type UserByIdDataUserByIdAddress = UserPartAddress & {
    __typename?: 'UserAddress';
};

type UserByIdDataUserByIdTickets = {
    __typename?: 'SupportTicket';
    id: UserByIdDataUserByIdTicketsId;
    create: UserByIdDataUserByIdTicketsCreate;
    open: UserByIdDataUserByIdTicketsOpen;
    subject: UserByIdDataUserByIdTicketsSubject;
    status: UserByIdDataUserByIdTicketsStatus;
    category: UserByIdDataUserByIdTicketsCategory;
};

type UserByIdDataUserByIdTicketsId = string;
type UserByIdDataUserByIdTicketsCreate = any;
type UserByIdDataUserByIdTicketsOpen = boolean;
type UserByIdDataUserByIdTicketsSubject = string;
type UserByIdDataUserByIdTicketsStatus = string;
type UserByIdDataUserByIdTicketsCategory = string;
type UserByIdDataUserByIdProducts = {
    __typename?: 'Product';
    id: UserByIdDataUserByIdProductsId;
};

type UserByIdDataUserByIdProductsId = string;
type UserByIdDataUserByIdGameservers = {
    __typename?: 'ProductGameserver';
    id: UserByIdDataUserByIdGameserversId;
    name: UserByIdDataUserByIdGameserversName;
    product?: Nullable<UserByIdDataUserByIdGameserversProduct>;
};

type UserByIdDataUserByIdGameserversId = string;
type UserByIdDataUserByIdGameserversName = string;
type UserByIdDataUserByIdGameserversProduct = {
    __typename?: 'Product';
    id: UserByIdDataUserByIdGameserversProductId;
    create: UserByIdDataUserByIdGameserversProductCreate;
    expire?: Nullable<UserByIdDataUserByIdGameserversProductExpire>;
};

type UserByIdDataUserByIdGameserversProductId = string;
type UserByIdDataUserByIdGameserversProductCreate = any;
type UserByIdDataUserByIdGameserversProductExpire = any;
type UserByIdDataUserByIdTeamspeaks = {
    __typename?: 'ProductTeamspeak';
    id: UserByIdDataUserByIdTeamspeaksId;
    name: UserByIdDataUserByIdTeamspeaksName;
    product: UserByIdDataUserByIdTeamspeaksProduct;
};

type UserByIdDataUserByIdTeamspeaksId = string;
type UserByIdDataUserByIdTeamspeaksName = string;
type UserByIdDataUserByIdTeamspeaksProduct = {
    __typename?: 'Product';
    id: UserByIdDataUserByIdTeamspeaksProductId;
    create: UserByIdDataUserByIdTeamspeaksProductCreate;
    expire?: Nullable<UserByIdDataUserByIdTeamspeaksProductExpire>;
};

type UserByIdDataUserByIdTeamspeaksProductId = string;
type UserByIdDataUserByIdTeamspeaksProductCreate = any;
type UserByIdDataUserByIdTeamspeaksProductExpire = any;
type UserByIdDataUserByIdVservers = {
    __typename?: 'ProductVserver';
    id: UserByIdDataUserByIdVserversId;
    name: UserByIdDataUserByIdVserversName;
    ips: Array<UserByIdDataUserByIdVserversIps>;
    product: UserByIdDataUserByIdVserversProduct;
};

type UserByIdDataUserByIdVserversId = string;
type UserByIdDataUserByIdVserversName = string;
type UserByIdDataUserByIdVserversIps = {
    __typename?: 'ProductVserverIp';
    ip: UserByIdDataUserByIdVserversIpsIp;
};

type UserByIdDataUserByIdVserversIpsIp = string;
type UserByIdDataUserByIdVserversProduct = {
    __typename?: 'Product';
    id: UserByIdDataUserByIdVserversProductId;
    create: UserByIdDataUserByIdVserversProductCreate;
    expire?: Nullable<UserByIdDataUserByIdVserversProductExpire>;
};

type UserByIdDataUserByIdVserversProductId = string;
type UserByIdDataUserByIdVserversProductCreate = any;
type UserByIdDataUserByIdVserversProductExpire = any;
type UserByIdDataUserByIdDomains = {
    __typename?: 'ProductDomain';
    id: UserByIdDataUserByIdDomainsId;
    authcode?: Nullable<UserByIdDataUserByIdDomainsAuthcode>;
    requestNewAuthcode: UserByIdDataUserByIdDomainsRequestNewAuthcode;
    registered: UserByIdDataUserByIdDomainsRegistered;
    tld: UserByIdDataUserByIdDomainsTld;
    name: UserByIdDataUserByIdDomainsName;
    product: UserByIdDataUserByIdDomainsProduct;
};

type UserByIdDataUserByIdDomainsId = string;
type UserByIdDataUserByIdDomainsAuthcode = string;
type UserByIdDataUserByIdDomainsRequestNewAuthcode = boolean;
type UserByIdDataUserByIdDomainsRegistered = boolean;
type UserByIdDataUserByIdDomainsTld = string;
type UserByIdDataUserByIdDomainsName = string;
type UserByIdDataUserByIdDomainsProduct = {
    __typename?: 'Product';
    id: UserByIdDataUserByIdDomainsProductId;
    create: UserByIdDataUserByIdDomainsProductCreate;
    expire?: Nullable<UserByIdDataUserByIdDomainsProductExpire>;
};

type UserByIdDataUserByIdDomainsProductId = string;
type UserByIdDataUserByIdDomainsProductCreate = any;
type UserByIdDataUserByIdDomainsProductExpire = any;
type UserByIdDataUserByIdSimples = {
    __typename?: 'ProductSimple';
    id: UserByIdDataUserByIdSimplesId;
    name: UserByIdDataUserByIdSimplesName;
    description?: Nullable<UserByIdDataUserByIdSimplesDescription>;
    product: UserByIdDataUserByIdSimplesProduct;
};

type UserByIdDataUserByIdSimplesId = string;
type UserByIdDataUserByIdSimplesName = string;
type UserByIdDataUserByIdSimplesDescription = string;
type UserByIdDataUserByIdSimplesProduct = {
    __typename?: 'Product';
    id: UserByIdDataUserByIdSimplesProductId;
    create: UserByIdDataUserByIdSimplesProductCreate;
    expire?: Nullable<UserByIdDataUserByIdSimplesProductExpire>;
};

type UserByIdDataUserByIdSimplesProductId = string;
type UserByIdDataUserByIdSimplesProductCreate = any;
type UserByIdDataUserByIdSimplesProductExpire = any;
type UserByIdDataUserByIdTransactions = {
    __typename?: 'FinanceTransaction';
    id: UserByIdDataUserByIdTransactionsId;
    type: UserByIdDataUserByIdTransactionsType;
    billId: UserByIdDataUserByIdTransactionsBillId;
    total: UserByIdDataUserByIdTransactionsTotal;
    create: UserByIdDataUserByIdTransactionsCreate;
    charge?: Nullable<UserByIdDataUserByIdTransactionsCharge>;
};

type UserByIdDataUserByIdTransactionsId = string;
type UserByIdDataUserByIdTransactionsType = string;
type UserByIdDataUserByIdTransactionsBillId = string;
type UserByIdDataUserByIdTransactionsTotal = number;
type UserByIdDataUserByIdTransactionsCreate = any;
type UserByIdDataUserByIdTransactionsCharge = {
    __typename?: 'FinanceCharge';
    id: UserByIdDataUserByIdTransactionsChargeId;
    create: UserByIdDataUserByIdTransactionsChargeCreate;
};

type UserByIdDataUserByIdTransactionsChargeId = string;
type UserByIdDataUserByIdTransactionsChargeCreate = any;

useQueryMeLoggedIn.Document = gql`
    query meLoggedIn {
        user_is_login
    }
` as DocumentNode;

export function useQueryMeLoggedIn(
    options?: QueryHookOptions<MeLoggedInData, MeLoggedInVariables>
) {
    const result = useQuery<MeLoggedInData, MeLoggedInVariables>(
        useQueryMeLoggedIn.Document,
        { ...queryDefaultOptions, ...options }
    );
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryMeLoggedIn.lazy = function (
    options?: LazyQueryHookOptions<MeLoggedInData, MeLoggedInVariables>
) {
    return useLazyQuery(useQueryMeLoggedIn.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type MeLoggedInVariables = {};

export type MeLoggedInData = {
    user_is_login: MeLoggedInDataUserIsLogin;
};

type MeLoggedInDataUserIsLogin = boolean;

useMutationLogin.Document = gql`
    mutation login($username: String!, $password: String!) {
        userLoginWithEmailToken(username: $username, password: $password)
    }
` as DocumentNode;

export function useMutationLogin(
    options?: MutationHookOptions<LoginData, LoginVariables>
): MutationHookFn<LoginData, LoginVariables> {
    return useMutation<LoginData, LoginVariables>(useMutationLogin.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type LoginVariables = {
    username: LoginVariablesUsername;
    password: LoginVariablesPassword;
};

type LoginVariablesUsername = string;
type LoginVariablesPassword = string;

export type LoginData = {
    userLoginWithEmailToken: LoginDataUserLoginWithEmailToken;
};

type LoginDataUserLoginWithEmailToken = boolean;

useMutationAdminLoginAsUser.Document = gql`
    mutation adminLoginAsUser($id: ID!) {
        user_admin_login(id: $id)
    }
` as DocumentNode;

export function useMutationAdminLoginAsUser(
    options?: MutationHookOptions<
        AdminLoginAsUserData,
        AdminLoginAsUserVariables
    >
): MutationHookFn<AdminLoginAsUserData, AdminLoginAsUserVariables> {
    return useMutation<AdminLoginAsUserData, AdminLoginAsUserVariables>(
        useMutationAdminLoginAsUser.Document,
        { ...mutationDefaultOptions, ...options }
    ) as any;
}

export type AdminLoginAsUserVariables = {
    id: AdminLoginAsUserVariablesId;
};

type AdminLoginAsUserVariablesId = string;

export type AdminLoginAsUserData = {
    user_admin_login: AdminLoginAsUserDataUserAdminLogin;
};

type AdminLoginAsUserDataUserAdminLogin = boolean;

useMutationUserMakeFeedback.Document = gql`
    mutation userMakeFeedback(
        $availableForMoreFeedback: Boolean
        $feedbackMessage: String
        $feedbackSatisfied: Boolean
    ) {
        userMakeFeedback(
            availableForMoreFeedback: $availableForMoreFeedback
            feedbackMessage: $feedbackMessage
            feedbackSatisfied: $feedbackSatisfied
        ) {
            id
            canMakeFeedback
        }
    }
` as DocumentNode;

export function useMutationUserMakeFeedback(
    options?: MutationHookOptions<
        UserMakeFeedbackData,
        UserMakeFeedbackVariables
    >
): MutationHookFn<UserMakeFeedbackData, UserMakeFeedbackVariables> {
    return useMutation<UserMakeFeedbackData, UserMakeFeedbackVariables>(
        useMutationUserMakeFeedback.Document,
        { ...mutationDefaultOptions, ...options }
    ) as any;
}

export type UserMakeFeedbackVariables = {
    availableForMoreFeedback?: Nullable<UserMakeFeedbackVariablesAvailableForMoreFeedback>;
    feedbackMessage?: Nullable<UserMakeFeedbackVariablesFeedbackMessage>;
    feedbackSatisfied?: Nullable<UserMakeFeedbackVariablesFeedbackSatisfied>;
};

type UserMakeFeedbackVariablesAvailableForMoreFeedback = boolean;
type UserMakeFeedbackVariablesFeedbackMessage = string;
type UserMakeFeedbackVariablesFeedbackSatisfied = boolean;

export type UserMakeFeedbackData = {
    userMakeFeedback: UserMakeFeedbackDataUserMakeFeedback;
};

type UserMakeFeedbackDataUserMakeFeedback = {
    __typename?: 'User';
    id: UserMakeFeedbackDataUserMakeFeedbackId;
    canMakeFeedback: UserMakeFeedbackDataUserMakeFeedbackCanMakeFeedback;
};

type UserMakeFeedbackDataUserMakeFeedbackId = string;
type UserMakeFeedbackDataUserMakeFeedbackCanMakeFeedback = boolean;

useQueryUserMe.Document = gql`
    query userMe {
        user_me {
            ...UserPart
            supportId
            publicName
            canMakeFeedback
            address {
                ...UserPartAddress
            }
        }
    }
    ${_gql_UserPartAddress}
    ${_gql_UserPart}
` as DocumentNode;

export function useQueryUserMe(
    options?: QueryHookOptions<UserMeData, UserMeVariables>
) {
    const result = useQuery<UserMeData, UserMeVariables>(
        useQueryUserMe.Document,
        { ...queryDefaultOptions, ...options }
    );
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryUserMe.lazy = function (
    options?: LazyQueryHookOptions<UserMeData, UserMeVariables>
) {
    return useLazyQuery(useQueryUserMe.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type UserMeVariables = {};

export type UserMeData = {
    user_me: UserMeDataUserMe;
};

type UserMeDataUserMe = UserPart & {
    __typename?: 'User';
    supportId: UserMeDataUserMeSupportId;
    publicName: UserMeDataUserMePublicName;
    canMakeFeedback: UserMeDataUserMeCanMakeFeedback;
    address?: Nullable<UserMeDataUserMeAddress>;
};

type UserMeDataUserMeSupportId = string;
type UserMeDataUserMePublicName = string;
type UserMeDataUserMeCanMakeFeedback = boolean;
type UserMeDataUserMeAddress = UserPartAddress & {
    __typename?: 'UserAddress';
};

useMutationUserAddressAddVerifyDocument.Document = gql`
    mutation userAddressAddVerifyDocument($fileId: ID!) {
        userAddressAddVerifyDocument(fileId: $fileId) {
            ...UserPart
            supportId
            address {
                ...UserPartAddress
            }
        }
    }
    ${_gql_UserPartAddress}
    ${_gql_UserPart}
` as DocumentNode;

export function useMutationUserAddressAddVerifyDocument(
    options?: MutationHookOptions<
        UserAddressAddVerifyDocumentData,
        UserAddressAddVerifyDocumentVariables
    >
): MutationHookFn<
    UserAddressAddVerifyDocumentData,
    UserAddressAddVerifyDocumentVariables
> {
    return useMutation<
        UserAddressAddVerifyDocumentData,
        UserAddressAddVerifyDocumentVariables
    >(useMutationUserAddressAddVerifyDocument.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type UserAddressAddVerifyDocumentVariables = {
    fileId: UserAddressAddVerifyDocumentVariablesFileId;
};

type UserAddressAddVerifyDocumentVariablesFileId = string;

export type UserAddressAddVerifyDocumentData = {
    userAddressAddVerifyDocument: UserAddressAddVerifyDocumentDataUserAddressAddVerifyDocument;
};

type UserAddressAddVerifyDocumentDataUserAddressAddVerifyDocument = UserPart & {
    __typename?: 'User';
    supportId: UserAddressAddVerifyDocumentDataUserAddressAddVerifyDocumentSupportId;
    address?: Nullable<UserAddressAddVerifyDocumentDataUserAddressAddVerifyDocumentAddress>;
};

type UserAddressAddVerifyDocumentDataUserAddressAddVerifyDocumentSupportId = string;
type UserAddressAddVerifyDocumentDataUserAddressAddVerifyDocumentAddress = UserPartAddress & {
    __typename?: 'UserAddress';
};

useMutationUserAddressDelVerifyDocument.Document = gql`
    mutation userAddressDelVerifyDocument {
        userAddressDelVerifyDocument {
            ...UserPart
            supportId
            address {
                ...UserPartAddress
            }
        }
    }
    ${_gql_UserPartAddress}
    ${_gql_UserPart}
` as DocumentNode;

export function useMutationUserAddressDelVerifyDocument(
    options?: MutationHookOptions<
        UserAddressDelVerifyDocumentData,
        UserAddressDelVerifyDocumentVariables
    >
): MutationHookFn<
    UserAddressDelVerifyDocumentData,
    UserAddressDelVerifyDocumentVariables
> {
    return useMutation<
        UserAddressDelVerifyDocumentData,
        UserAddressDelVerifyDocumentVariables
    >(useMutationUserAddressDelVerifyDocument.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type UserAddressDelVerifyDocumentVariables = {};

export type UserAddressDelVerifyDocumentData = {
    userAddressDelVerifyDocument: UserAddressDelVerifyDocumentDataUserAddressDelVerifyDocument;
};

type UserAddressDelVerifyDocumentDataUserAddressDelVerifyDocument = UserPart & {
    __typename?: 'User';
    supportId: UserAddressDelVerifyDocumentDataUserAddressDelVerifyDocumentSupportId;
    address?: Nullable<UserAddressDelVerifyDocumentDataUserAddressDelVerifyDocumentAddress>;
};

type UserAddressDelVerifyDocumentDataUserAddressDelVerifyDocumentSupportId = string;
type UserAddressDelVerifyDocumentDataUserAddressDelVerifyDocumentAddress = UserPartAddress & {
    __typename?: 'UserAddress';
};

useQueryUserMeCustomCredits.Document = gql`
    query userMeCustomCredits {
        user_me {
            id
            bonusCredits
            importedCredits
            credits
            canHaveBonusCredits
        }
    }
` as DocumentNode;

export function useQueryUserMeCustomCredits(
    options?: QueryHookOptions<
        UserMeCustomCreditsData,
        UserMeCustomCreditsVariables
    >
) {
    const result = useQuery<
        UserMeCustomCreditsData,
        UserMeCustomCreditsVariables
    >(useQueryUserMeCustomCredits.Document, {
        ...queryDefaultOptions,
        ...options,
    });
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryUserMeCustomCredits.lazy = function (
    options?: LazyQueryHookOptions<
        UserMeCustomCreditsData,
        UserMeCustomCreditsVariables
    >
) {
    return useLazyQuery(useQueryUserMeCustomCredits.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type UserMeCustomCreditsVariables = {};

export type UserMeCustomCreditsData = {
    user_me: UserMeCustomCreditsDataUserMe;
};

type UserMeCustomCreditsDataUserMe = {
    __typename?: 'User';
    id: UserMeCustomCreditsDataUserMeId;
    bonusCredits: UserMeCustomCreditsDataUserMeBonusCredits;
    importedCredits: UserMeCustomCreditsDataUserMeImportedCredits;
    credits: UserMeCustomCreditsDataUserMeCredits;
    canHaveBonusCredits: UserMeCustomCreditsDataUserMeCanHaveBonusCredits;
};

type UserMeCustomCreditsDataUserMeId = string;
type UserMeCustomCreditsDataUserMeBonusCredits = number;
type UserMeCustomCreditsDataUserMeImportedCredits = number;
type UserMeCustomCreditsDataUserMeCredits = number;
type UserMeCustomCreditsDataUserMeCanHaveBonusCredits = boolean;

useQueryUserCustomCredits.Document = gql`
    query userCustomCredits($id: ID!) {
        userById(id: $id) {
            id
            bonusCredits
            importedCredits
            credits
        }
    }
` as DocumentNode;

export function useQueryUserCustomCredits(
    options?: QueryHookOptions<
        UserCustomCreditsData,
        UserCustomCreditsVariables
    >
) {
    const result = useQuery<UserCustomCreditsData, UserCustomCreditsVariables>(
        useQueryUserCustomCredits.Document,
        { ...queryDefaultOptions, ...options }
    );
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryUserCustomCredits.lazy = function (
    options?: LazyQueryHookOptions<
        UserCustomCreditsData,
        UserCustomCreditsVariables
    >
) {
    return useLazyQuery(useQueryUserCustomCredits.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type UserCustomCreditsVariables = {
    id: UserCustomCreditsVariablesId;
};

type UserCustomCreditsVariablesId = string;

export type UserCustomCreditsData = {
    userById: UserCustomCreditsDataUserById;
};

type UserCustomCreditsDataUserById = {
    __typename?: 'User';
    id: UserCustomCreditsDataUserByIdId;
    bonusCredits: UserCustomCreditsDataUserByIdBonusCredits;
    importedCredits: UserCustomCreditsDataUserByIdImportedCredits;
    credits: UserCustomCreditsDataUserByIdCredits;
};

type UserCustomCreditsDataUserByIdId = string;
type UserCustomCreditsDataUserByIdBonusCredits = number;
type UserCustomCreditsDataUserByIdImportedCredits = number;
type UserCustomCreditsDataUserByIdCredits = number;

useMutationUserEditSelfGeneral.Document = gql`
    mutation userEditSelfGeneral(
        $new_password: String
        $nickname: String!
        $forceEmailLogin: Boolean
        $localAvatarId: ID
    ) {
        userEditSelfGeneral(
            new_password: $new_password
            nickname: $nickname
            forceEmailLogin: $forceEmailLogin
            localAvatarId: $localAvatarId
        ) {
            ...UserPart
            address {
                ...UserPartAddress
            }
        }
    }
    ${_gql_UserPartAddress}
    ${_gql_UserPart}
` as DocumentNode;

export function useMutationUserEditSelfGeneral(
    options?: MutationHookOptions<
        UserEditSelfGeneralData,
        UserEditSelfGeneralVariables
    >
): MutationHookFn<UserEditSelfGeneralData, UserEditSelfGeneralVariables> {
    return useMutation<UserEditSelfGeneralData, UserEditSelfGeneralVariables>(
        useMutationUserEditSelfGeneral.Document,
        { ...mutationDefaultOptions, ...options }
    ) as any;
}

export type UserEditSelfGeneralVariables = {
    new_password?: Nullable<UserEditSelfGeneralVariablesNewPassword>;
    nickname: UserEditSelfGeneralVariablesNickname;
    forceEmailLogin?: Nullable<UserEditSelfGeneralVariablesForceEmailLogin>;
    localAvatarId?: Nullable<UserEditSelfGeneralVariablesLocalAvatarId>;
};

type UserEditSelfGeneralVariablesNewPassword = string;
type UserEditSelfGeneralVariablesNickname = string;
type UserEditSelfGeneralVariablesForceEmailLogin = boolean;
type UserEditSelfGeneralVariablesLocalAvatarId = string;

export type UserEditSelfGeneralData = {
    userEditSelfGeneral: UserEditSelfGeneralDataUserEditSelfGeneral;
};

type UserEditSelfGeneralDataUserEditSelfGeneral = UserPart & {
    __typename?: 'User';
    address?: Nullable<UserEditSelfGeneralDataUserEditSelfGeneralAddress>;
};

type UserEditSelfGeneralDataUserEditSelfGeneralAddress = UserPartAddress & {
    __typename?: 'UserAddress';
};

useMutationUserEditSelfAddress.Document = gql`
    mutation userEditSelfAddress($data: UserInputUserEditAddress!) {
        userEditSelfAddress(data: $data) {
            ...UserPart
            address {
                ...UserPartAddress
            }
        }
    }
    ${_gql_UserPartAddress}
    ${_gql_UserPart}
` as DocumentNode;

export function useMutationUserEditSelfAddress(
    options?: MutationHookOptions<
        UserEditSelfAddressData,
        UserEditSelfAddressVariables
    >
): MutationHookFn<UserEditSelfAddressData, UserEditSelfAddressVariables> {
    return useMutation<UserEditSelfAddressData, UserEditSelfAddressVariables>(
        useMutationUserEditSelfAddress.Document,
        { ...mutationDefaultOptions, ...options }
    ) as any;
}

export type UserEditSelfAddressVariables = {
    data: UserEditSelfAddressVariablesData;
};

type UserEditSelfAddressVariablesData = UserInputUserEditAddress;

export type UserEditSelfAddressData = {
    userEditSelfAddress: UserEditSelfAddressDataUserEditSelfAddress;
};

type UserEditSelfAddressDataUserEditSelfAddress = UserPart & {
    __typename?: 'User';
    address?: Nullable<UserEditSelfAddressDataUserEditSelfAddressAddress>;
};

type UserEditSelfAddressDataUserEditSelfAddressAddress = UserPartAddress & {
    __typename?: 'UserAddress';
};

useMutationUserEditSelfEmail.Document = gql`
    mutation userEditSelfEmail($email: String!, $password: String!) {
        userEditSelfEmail(email: $email, password: $password) {
            ...UserPart
        }
    }
    ${_gql_UserPart}
` as DocumentNode;

export function useMutationUserEditSelfEmail(
    options?: MutationHookOptions<
        UserEditSelfEmailData,
        UserEditSelfEmailVariables
    >
): MutationHookFn<UserEditSelfEmailData, UserEditSelfEmailVariables> {
    return useMutation<UserEditSelfEmailData, UserEditSelfEmailVariables>(
        useMutationUserEditSelfEmail.Document,
        { ...mutationDefaultOptions, ...options }
    ) as any;
}

export type UserEditSelfEmailVariables = {
    email: UserEditSelfEmailVariablesEmail;
    password: UserEditSelfEmailVariablesPassword;
};

type UserEditSelfEmailVariablesEmail = string;
type UserEditSelfEmailVariablesPassword = string;

export type UserEditSelfEmailData = {
    userEditSelfEmail: UserEditSelfEmailDataUserEditSelfEmail;
};

type UserEditSelfEmailDataUserEditSelfEmail = UserPart & {
    __typename?: 'User';
};

useQueryUserCountries.Document = gql`
    query userCountries {
        userCountries
    }
` as DocumentNode;

export function useQueryUserCountries(
    options?: QueryHookOptions<UserCountriesData, UserCountriesVariables>
) {
    const result = useQuery<UserCountriesData, UserCountriesVariables>(
        useQueryUserCountries.Document,
        { ...queryDefaultOptions, ...options }
    );
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryUserCountries.lazy = function (
    options?: LazyQueryHookOptions<UserCountriesData, UserCountriesVariables>
) {
    return useLazyQuery(useQueryUserCountries.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type UserCountriesVariables = {};

export type UserCountriesData = {
    userCountries: Array<UserCountriesDataUserCountries>;
};

type UserCountriesDataUserCountries = string;

useMutationRegisterNewUser.Document = gql`
    mutation registerNewUser(
        $googleCaptcha: String!
        $data: UserInputRegister!
    ) {
        user_register(data: $data, googleCaptcha: $googleCaptcha)
    }
` as DocumentNode;

export function useMutationRegisterNewUser(
    options?: MutationHookOptions<RegisterNewUserData, RegisterNewUserVariables>
): MutationHookFn<RegisterNewUserData, RegisterNewUserVariables> {
    return useMutation<RegisterNewUserData, RegisterNewUserVariables>(
        useMutationRegisterNewUser.Document,
        { ...mutationDefaultOptions, ...options }
    ) as any;
}

export type RegisterNewUserVariables = {
    googleCaptcha: RegisterNewUserVariablesGoogleCaptcha;
    data: RegisterNewUserVariablesData;
};

type RegisterNewUserVariablesGoogleCaptcha = string;
type RegisterNewUserVariablesData = UserInputRegister;

export type RegisterNewUserData = {
    user_register: RegisterNewUserDataUserRegister;
};

type RegisterNewUserDataUserRegister = boolean;

useMutationUserAdminLogout.Document = gql`
    mutation userAdminLogout {
        userAdminLogout
    }
` as DocumentNode;

export function useMutationUserAdminLogout(
    options?: MutationHookOptions<UserAdminLogoutData, UserAdminLogoutVariables>
): MutationHookFn<UserAdminLogoutData, UserAdminLogoutVariables> {
    return useMutation<UserAdminLogoutData, UserAdminLogoutVariables>(
        useMutationUserAdminLogout.Document,
        { ...mutationDefaultOptions, ...options }
    ) as any;
}

export type UserAdminLogoutVariables = {};

export type UserAdminLogoutData = {
    userAdminLogout: UserAdminLogoutDataUserAdminLogout;
};

type UserAdminLogoutDataUserAdminLogout = boolean;

useMutationUserVerify.Document = gql`
    mutation user_verify($token: String!) {
        user_verify(token: $token)
    }
` as DocumentNode;

export function useMutationUserVerify(
    options?: MutationHookOptions<UserVerifyData, UserVerifyVariables>
): MutationHookFn<UserVerifyData, UserVerifyVariables> {
    return useMutation<UserVerifyData, UserVerifyVariables>(
        useMutationUserVerify.Document,
        { ...mutationDefaultOptions, ...options }
    ) as any;
}

export type UserVerifyVariables = {
    token: UserVerifyVariablesToken;
};

type UserVerifyVariablesToken = string;

export type UserVerifyData = {
    user_verify: UserVerifyDataUserVerify;
};

type UserVerifyDataUserVerify = boolean;

useMutationResetPassword.Document = gql`
    mutation reset_password($token: String!, $password: String!) {
        user_reset_password_token(token: $token, password: $password)
    }
` as DocumentNode;

export function useMutationResetPassword(
    options?: MutationHookOptions<ResetPasswordData, ResetPasswordVariables>
): MutationHookFn<ResetPasswordData, ResetPasswordVariables> {
    return useMutation<ResetPasswordData, ResetPasswordVariables>(
        useMutationResetPassword.Document,
        { ...mutationDefaultOptions, ...options }
    ) as any;
}

export type ResetPasswordVariables = {
    token: ResetPasswordVariablesToken;
    password: ResetPasswordVariablesPassword;
};

type ResetPasswordVariablesToken = string;
type ResetPasswordVariablesPassword = string;

export type ResetPasswordData = {
    user_reset_password_token: ResetPasswordDataUserResetPasswordToken;
};

type ResetPasswordDataUserResetPasswordToken = boolean;

useMutationUserResetPassword.Document = gql`
    mutation userResetPassword($email: String!, $captcha: String!) {
        user_reset_password(email: $email, captcha: $captcha)
    }
` as DocumentNode;

export function useMutationUserResetPassword(
    options?: MutationHookOptions<
        UserResetPasswordData,
        UserResetPasswordVariables
    >
): MutationHookFn<UserResetPasswordData, UserResetPasswordVariables> {
    return useMutation<UserResetPasswordData, UserResetPasswordVariables>(
        useMutationUserResetPassword.Document,
        { ...mutationDefaultOptions, ...options }
    ) as any;
}

export type UserResetPasswordVariables = {
    email: UserResetPasswordVariablesEmail;
    captcha: UserResetPasswordVariablesCaptcha;
};

type UserResetPasswordVariablesEmail = string;
type UserResetPasswordVariablesCaptcha = string;

export type UserResetPasswordData = {
    user_reset_password: UserResetPasswordDataUserResetPassword;
};

type UserResetPasswordDataUserResetPassword = boolean;

useQueryProductAdminInfo.Document = gql`
    query productAdminInfo {
        productAdminInfo {
            domains
            vservers
            gameservers
            vserverFreeIps
            teamspeaks
            simples
            activeUsers
            userRegisterYesterday {
                label
                value
            }
            userRegisterToDay {
                label
                value
            }
            chargesToday {
                label
                value
            }
            chargesYesterday {
                label
                value
            }
            hostNodeFree {
                type
                free
                filter
            }
        }
    }
` as DocumentNode;

export function useQueryProductAdminInfo(
    options?: QueryHookOptions<ProductAdminInfoData, ProductAdminInfoVariables>
) {
    const result = useQuery<ProductAdminInfoData, ProductAdminInfoVariables>(
        useQueryProductAdminInfo.Document,
        { ...queryDefaultOptions, ...options }
    );
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryProductAdminInfo.lazy = function (
    options?: LazyQueryHookOptions<
        ProductAdminInfoData,
        ProductAdminInfoVariables
    >
) {
    return useLazyQuery(useQueryProductAdminInfo.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type ProductAdminInfoVariables = {};

export type ProductAdminInfoData = {
    productAdminInfo: ProductAdminInfoDataProductAdminInfo;
};

type ProductAdminInfoDataProductAdminInfo = {
    __typename?: 'ProductAdminInfoResultDto';
    domains: ProductAdminInfoDataProductAdminInfoDomains;
    vservers: ProductAdminInfoDataProductAdminInfoVservers;
    gameservers: ProductAdminInfoDataProductAdminInfoGameservers;
    vserverFreeIps: ProductAdminInfoDataProductAdminInfoVserverFreeIps;
    teamspeaks: ProductAdminInfoDataProductAdminInfoTeamspeaks;
    simples: ProductAdminInfoDataProductAdminInfoSimples;
    activeUsers: ProductAdminInfoDataProductAdminInfoActiveUsers;
    userRegisterYesterday: Array<ProductAdminInfoDataProductAdminInfoUserRegisterYesterday>;
    userRegisterToDay: Array<ProductAdminInfoDataProductAdminInfoUserRegisterToDay>;
    chargesToday: Array<ProductAdminInfoDataProductAdminInfoChargesToday>;
    chargesYesterday: Array<ProductAdminInfoDataProductAdminInfoChargesYesterday>;
    hostNodeFree: Array<ProductAdminInfoDataProductAdminInfoHostNodeFree>;
};

type ProductAdminInfoDataProductAdminInfoDomains = number;
type ProductAdminInfoDataProductAdminInfoVservers = number;
type ProductAdminInfoDataProductAdminInfoGameservers = number;
type ProductAdminInfoDataProductAdminInfoVserverFreeIps = number;
type ProductAdminInfoDataProductAdminInfoTeamspeaks = number;
type ProductAdminInfoDataProductAdminInfoSimples = number;
type ProductAdminInfoDataProductAdminInfoActiveUsers = number;
type ProductAdminInfoDataProductAdminInfoUserRegisterYesterday = {
    __typename?: 'ProductAdminInfoPointMapDto';
    label: ProductAdminInfoDataProductAdminInfoUserRegisterYesterdayLabel;
    value: ProductAdminInfoDataProductAdminInfoUserRegisterYesterdayValue;
};

type ProductAdminInfoDataProductAdminInfoUserRegisterYesterdayLabel = string;
type ProductAdminInfoDataProductAdminInfoUserRegisterYesterdayValue = number;
type ProductAdminInfoDataProductAdminInfoUserRegisterToDay = {
    __typename?: 'ProductAdminInfoPointMapDto';
    label: ProductAdminInfoDataProductAdminInfoUserRegisterToDayLabel;
    value: ProductAdminInfoDataProductAdminInfoUserRegisterToDayValue;
};

type ProductAdminInfoDataProductAdminInfoUserRegisterToDayLabel = string;
type ProductAdminInfoDataProductAdminInfoUserRegisterToDayValue = number;
type ProductAdminInfoDataProductAdminInfoChargesToday = {
    __typename?: 'ProductAdminInfoPointMapDto';
    label: ProductAdminInfoDataProductAdminInfoChargesTodayLabel;
    value: ProductAdminInfoDataProductAdminInfoChargesTodayValue;
};

type ProductAdminInfoDataProductAdminInfoChargesTodayLabel = string;
type ProductAdminInfoDataProductAdminInfoChargesTodayValue = number;
type ProductAdminInfoDataProductAdminInfoChargesYesterday = {
    __typename?: 'ProductAdminInfoPointMapDto';
    label: ProductAdminInfoDataProductAdminInfoChargesYesterdayLabel;
    value: ProductAdminInfoDataProductAdminInfoChargesYesterdayValue;
};

type ProductAdminInfoDataProductAdminInfoChargesYesterdayLabel = string;
type ProductAdminInfoDataProductAdminInfoChargesYesterdayValue = number;
type ProductAdminInfoDataProductAdminInfoHostNodeFree = {
    __typename?: 'HostNodeTypeInfoUsageDto';
    type: ProductAdminInfoDataProductAdminInfoHostNodeFreeType;
    free: ProductAdminInfoDataProductAdminInfoHostNodeFreeFree;
    filter?: Nullable<ProductAdminInfoDataProductAdminInfoHostNodeFreeFilter>;
};

type ProductAdminInfoDataProductAdminInfoHostNodeFreeType = string;
type ProductAdminInfoDataProductAdminInfoHostNodeFreeFree = number;
type ProductAdminInfoDataProductAdminInfoHostNodeFreeFilter = string;

/*,
 * Fragments from undefined,
 */

/*,
 * Operations from undefined,
 */

useQueryUserAddresss.Document = gql`
    query userAddresss($filter: CordFilter) {
        userAddresss(filter: $filter) {
            edges {
                firstname
                lastname
                street1
                zip
                country
                title
                city

                birthdate
                phone
                phoneMobile
                company
                vatId
                create
                id
                verified
                vat
                user {
                    id
                }
                verifyDocument {
                    id
                    originalname
                    url
                    create
                }
            }
            pageInfo {
                totalCount
            }
        }
    }
` as DocumentNode;

export function useQueryUserAddresss(
    options?: QueryHookOptions<UserAddresssData, UserAddresssVariables>
) {
    const result = useQuery<UserAddresssData, UserAddresssVariables>(
        useQueryUserAddresss.Document,
        { ...queryDefaultOptions, ...options }
    );
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryUserAddresss.lazy = function (
    options?: LazyQueryHookOptions<UserAddresssData, UserAddresssVariables>
) {
    return useLazyQuery(useQueryUserAddresss.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type UserAddresssVariables = {
    filter?: Nullable<UserAddresssVariablesFilter>;
};

type UserAddresssVariablesFilter = CordFilter;

export type UserAddresssData = {
    userAddresss: UserAddresssDataUserAddresss;
};

type UserAddresssDataUserAddresss = {
    __typename?: 'UserAddressResultMany';
    edges: Array<UserAddresssDataUserAddresssEdges>;
    pageInfo: UserAddresssDataUserAddresssPageInfo;
};

type UserAddresssDataUserAddresssEdges = {
    __typename?: 'UserAddress';
    firstname?: Nullable<UserAddresssDataUserAddresssEdgesFirstname>;
    lastname?: Nullable<UserAddresssDataUserAddresssEdgesLastname>;
    street1?: Nullable<UserAddresssDataUserAddresssEdgesStreet1>;
    zip?: Nullable<UserAddresssDataUserAddresssEdgesZip>;
    country: UserAddresssDataUserAddresssEdgesCountry;
    title?: Nullable<UserAddresssDataUserAddresssEdgesTitle>;
    city?: Nullable<UserAddresssDataUserAddresssEdgesCity>;
    birthdate?: Nullable<UserAddresssDataUserAddresssEdgesBirthdate>;
    phone?: Nullable<UserAddresssDataUserAddresssEdgesPhone>;
    phoneMobile?: Nullable<UserAddresssDataUserAddresssEdgesPhoneMobile>;
    company?: Nullable<UserAddresssDataUserAddresssEdgesCompany>;
    vatId?: Nullable<UserAddresssDataUserAddresssEdgesVatId>;
    create: UserAddresssDataUserAddresssEdgesCreate;
    id: UserAddresssDataUserAddresssEdgesId;
    verified: UserAddresssDataUserAddresssEdgesVerified;
    vat?: Nullable<UserAddresssDataUserAddresssEdgesVat>;
    user: UserAddresssDataUserAddresssEdgesUser;
    verifyDocument?: Nullable<UserAddresssDataUserAddresssEdgesVerifyDocument>;
};

type UserAddresssDataUserAddresssEdgesFirstname = string;
type UserAddresssDataUserAddresssEdgesLastname = string;
type UserAddresssDataUserAddresssEdgesStreet1 = string;
type UserAddresssDataUserAddresssEdgesZip = string;
type UserAddresssDataUserAddresssEdgesCountry = string;
type UserAddresssDataUserAddresssEdgesTitle = string;
type UserAddresssDataUserAddresssEdgesCity = string;
type UserAddresssDataUserAddresssEdgesBirthdate = string;
type UserAddresssDataUserAddresssEdgesPhone = string;
type UserAddresssDataUserAddresssEdgesPhoneMobile = string;
type UserAddresssDataUserAddresssEdgesCompany = string;
type UserAddresssDataUserAddresssEdgesVatId = string;
type UserAddresssDataUserAddresssEdgesCreate = any;
type UserAddresssDataUserAddresssEdgesId = string;
type UserAddresssDataUserAddresssEdgesVerified = boolean;
type UserAddresssDataUserAddresssEdgesVat = number;
type UserAddresssDataUserAddresssEdgesUser = {
    __typename?: 'User';
    id: UserAddresssDataUserAddresssEdgesUserId;
};

type UserAddresssDataUserAddresssEdgesUserId = string;
type UserAddresssDataUserAddresssEdgesVerifyDocument = {
    __typename?: 'File';
    id: UserAddresssDataUserAddresssEdgesVerifyDocumentId;
    originalname: UserAddresssDataUserAddresssEdgesVerifyDocumentOriginalname;
    url: UserAddresssDataUserAddresssEdgesVerifyDocumentUrl;
    create: UserAddresssDataUserAddresssEdgesVerifyDocumentCreate;
};

type UserAddresssDataUserAddresssEdgesVerifyDocumentId = string;
type UserAddresssDataUserAddresssEdgesVerifyDocumentOriginalname = string;
type UserAddresssDataUserAddresssEdgesVerifyDocumentUrl = string;
type UserAddresssDataUserAddresssEdgesVerifyDocumentCreate = any;
type UserAddresssDataUserAddresssPageInfo = {
    __typename?: 'CordPageInfo';
    totalCount: UserAddresssDataUserAddresssPageInfoTotalCount;
};

type UserAddresssDataUserAddresssPageInfoTotalCount = number;

useMutationUserAddressConfirmVerify.Document = gql`
    mutation userAddressConfirmVerify($id: ID!) {
        userAddressConfirmVerify(id: $id) {
            firstname
            lastname
            street1
            zip
            country
            title
            city

            birthdate
            phone
            phoneMobile
            company
            vatId
            create
            id
            verified
            vat
            user {
                id
            }
            verifyDocument {
                id
                originalname
                url
                create
            }
        }
    }
` as DocumentNode;

export function useMutationUserAddressConfirmVerify(
    options?: MutationHookOptions<
        UserAddressConfirmVerifyData,
        UserAddressConfirmVerifyVariables
    >
): MutationHookFn<
    UserAddressConfirmVerifyData,
    UserAddressConfirmVerifyVariables
> {
    return useMutation<
        UserAddressConfirmVerifyData,
        UserAddressConfirmVerifyVariables
    >(useMutationUserAddressConfirmVerify.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type UserAddressConfirmVerifyVariables = {
    id: UserAddressConfirmVerifyVariablesId;
};

type UserAddressConfirmVerifyVariablesId = string;

export type UserAddressConfirmVerifyData = {
    userAddressConfirmVerify: UserAddressConfirmVerifyDataUserAddressConfirmVerify;
};

type UserAddressConfirmVerifyDataUserAddressConfirmVerify = {
    __typename?: 'UserAddress';
    firstname?: Nullable<UserAddressConfirmVerifyDataUserAddressConfirmVerifyFirstname>;
    lastname?: Nullable<UserAddressConfirmVerifyDataUserAddressConfirmVerifyLastname>;
    street1?: Nullable<UserAddressConfirmVerifyDataUserAddressConfirmVerifyStreet1>;
    zip?: Nullable<UserAddressConfirmVerifyDataUserAddressConfirmVerifyZip>;
    country: UserAddressConfirmVerifyDataUserAddressConfirmVerifyCountry;
    title?: Nullable<UserAddressConfirmVerifyDataUserAddressConfirmVerifyTitle>;
    city?: Nullable<UserAddressConfirmVerifyDataUserAddressConfirmVerifyCity>;
    birthdate?: Nullable<UserAddressConfirmVerifyDataUserAddressConfirmVerifyBirthdate>;
    phone?: Nullable<UserAddressConfirmVerifyDataUserAddressConfirmVerifyPhone>;
    phoneMobile?: Nullable<UserAddressConfirmVerifyDataUserAddressConfirmVerifyPhoneMobile>;
    company?: Nullable<UserAddressConfirmVerifyDataUserAddressConfirmVerifyCompany>;
    vatId?: Nullable<UserAddressConfirmVerifyDataUserAddressConfirmVerifyVatId>;
    create: UserAddressConfirmVerifyDataUserAddressConfirmVerifyCreate;
    id: UserAddressConfirmVerifyDataUserAddressConfirmVerifyId;
    verified: UserAddressConfirmVerifyDataUserAddressConfirmVerifyVerified;
    vat?: Nullable<UserAddressConfirmVerifyDataUserAddressConfirmVerifyVat>;
    user: UserAddressConfirmVerifyDataUserAddressConfirmVerifyUser;
    verifyDocument?: Nullable<UserAddressConfirmVerifyDataUserAddressConfirmVerifyVerifyDocument>;
};

type UserAddressConfirmVerifyDataUserAddressConfirmVerifyFirstname = string;
type UserAddressConfirmVerifyDataUserAddressConfirmVerifyLastname = string;
type UserAddressConfirmVerifyDataUserAddressConfirmVerifyStreet1 = string;
type UserAddressConfirmVerifyDataUserAddressConfirmVerifyZip = string;
type UserAddressConfirmVerifyDataUserAddressConfirmVerifyCountry = string;
type UserAddressConfirmVerifyDataUserAddressConfirmVerifyTitle = string;
type UserAddressConfirmVerifyDataUserAddressConfirmVerifyCity = string;
type UserAddressConfirmVerifyDataUserAddressConfirmVerifyBirthdate = string;
type UserAddressConfirmVerifyDataUserAddressConfirmVerifyPhone = string;
type UserAddressConfirmVerifyDataUserAddressConfirmVerifyPhoneMobile = string;
type UserAddressConfirmVerifyDataUserAddressConfirmVerifyCompany = string;
type UserAddressConfirmVerifyDataUserAddressConfirmVerifyVatId = string;
type UserAddressConfirmVerifyDataUserAddressConfirmVerifyCreate = any;
type UserAddressConfirmVerifyDataUserAddressConfirmVerifyId = string;
type UserAddressConfirmVerifyDataUserAddressConfirmVerifyVerified = boolean;
type UserAddressConfirmVerifyDataUserAddressConfirmVerifyVat = number;
type UserAddressConfirmVerifyDataUserAddressConfirmVerifyUser = {
    __typename?: 'User';
    id: UserAddressConfirmVerifyDataUserAddressConfirmVerifyUserId;
};

type UserAddressConfirmVerifyDataUserAddressConfirmVerifyUserId = string;
type UserAddressConfirmVerifyDataUserAddressConfirmVerifyVerifyDocument = {
    __typename?: 'File';
    id: UserAddressConfirmVerifyDataUserAddressConfirmVerifyVerifyDocumentId;
    originalname: UserAddressConfirmVerifyDataUserAddressConfirmVerifyVerifyDocumentOriginalname;
    url: UserAddressConfirmVerifyDataUserAddressConfirmVerifyVerifyDocumentUrl;
    create: UserAddressConfirmVerifyDataUserAddressConfirmVerifyVerifyDocumentCreate;
};

type UserAddressConfirmVerifyDataUserAddressConfirmVerifyVerifyDocumentId = string;
type UserAddressConfirmVerifyDataUserAddressConfirmVerifyVerifyDocumentOriginalname = string;
type UserAddressConfirmVerifyDataUserAddressConfirmVerifyVerifyDocumentUrl = string;
type UserAddressConfirmVerifyDataUserAddressConfirmVerifyVerifyDocumentCreate = any;

useMutationUserAddressRejectVerify.Document = gql`
    mutation userAddressRejectVerify($id: ID!) {
        userAddressRejectVerify(id: $id) {
            firstname
            lastname
            street1
            zip
            country
            title
            city

            birthdate
            phone
            phoneMobile
            company
            vatId
            create
            id
            verified
            vat
            user {
                id
            }
            verifyDocument {
                id
                originalname
                url
                create
            }
        }
    }
` as DocumentNode;

export function useMutationUserAddressRejectVerify(
    options?: MutationHookOptions<
        UserAddressRejectVerifyData,
        UserAddressRejectVerifyVariables
    >
): MutationHookFn<
    UserAddressRejectVerifyData,
    UserAddressRejectVerifyVariables
> {
    return useMutation<
        UserAddressRejectVerifyData,
        UserAddressRejectVerifyVariables
    >(useMutationUserAddressRejectVerify.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type UserAddressRejectVerifyVariables = {
    id: UserAddressRejectVerifyVariablesId;
};

type UserAddressRejectVerifyVariablesId = string;

export type UserAddressRejectVerifyData = {
    userAddressRejectVerify: UserAddressRejectVerifyDataUserAddressRejectVerify;
};

type UserAddressRejectVerifyDataUserAddressRejectVerify = {
    __typename?: 'UserAddress';
    firstname?: Nullable<UserAddressRejectVerifyDataUserAddressRejectVerifyFirstname>;
    lastname?: Nullable<UserAddressRejectVerifyDataUserAddressRejectVerifyLastname>;
    street1?: Nullable<UserAddressRejectVerifyDataUserAddressRejectVerifyStreet1>;
    zip?: Nullable<UserAddressRejectVerifyDataUserAddressRejectVerifyZip>;
    country: UserAddressRejectVerifyDataUserAddressRejectVerifyCountry;
    title?: Nullable<UserAddressRejectVerifyDataUserAddressRejectVerifyTitle>;
    city?: Nullable<UserAddressRejectVerifyDataUserAddressRejectVerifyCity>;
    birthdate?: Nullable<UserAddressRejectVerifyDataUserAddressRejectVerifyBirthdate>;
    phone?: Nullable<UserAddressRejectVerifyDataUserAddressRejectVerifyPhone>;
    phoneMobile?: Nullable<UserAddressRejectVerifyDataUserAddressRejectVerifyPhoneMobile>;
    company?: Nullable<UserAddressRejectVerifyDataUserAddressRejectVerifyCompany>;
    vatId?: Nullable<UserAddressRejectVerifyDataUserAddressRejectVerifyVatId>;
    create: UserAddressRejectVerifyDataUserAddressRejectVerifyCreate;
    id: UserAddressRejectVerifyDataUserAddressRejectVerifyId;
    verified: UserAddressRejectVerifyDataUserAddressRejectVerifyVerified;
    vat?: Nullable<UserAddressRejectVerifyDataUserAddressRejectVerifyVat>;
    user: UserAddressRejectVerifyDataUserAddressRejectVerifyUser;
    verifyDocument?: Nullable<UserAddressRejectVerifyDataUserAddressRejectVerifyVerifyDocument>;
};

type UserAddressRejectVerifyDataUserAddressRejectVerifyFirstname = string;
type UserAddressRejectVerifyDataUserAddressRejectVerifyLastname = string;
type UserAddressRejectVerifyDataUserAddressRejectVerifyStreet1 = string;
type UserAddressRejectVerifyDataUserAddressRejectVerifyZip = string;
type UserAddressRejectVerifyDataUserAddressRejectVerifyCountry = string;
type UserAddressRejectVerifyDataUserAddressRejectVerifyTitle = string;
type UserAddressRejectVerifyDataUserAddressRejectVerifyCity = string;
type UserAddressRejectVerifyDataUserAddressRejectVerifyBirthdate = string;
type UserAddressRejectVerifyDataUserAddressRejectVerifyPhone = string;
type UserAddressRejectVerifyDataUserAddressRejectVerifyPhoneMobile = string;
type UserAddressRejectVerifyDataUserAddressRejectVerifyCompany = string;
type UserAddressRejectVerifyDataUserAddressRejectVerifyVatId = string;
type UserAddressRejectVerifyDataUserAddressRejectVerifyCreate = any;
type UserAddressRejectVerifyDataUserAddressRejectVerifyId = string;
type UserAddressRejectVerifyDataUserAddressRejectVerifyVerified = boolean;
type UserAddressRejectVerifyDataUserAddressRejectVerifyVat = number;
type UserAddressRejectVerifyDataUserAddressRejectVerifyUser = {
    __typename?: 'User';
    id: UserAddressRejectVerifyDataUserAddressRejectVerifyUserId;
};

type UserAddressRejectVerifyDataUserAddressRejectVerifyUserId = string;
type UserAddressRejectVerifyDataUserAddressRejectVerifyVerifyDocument = {
    __typename?: 'File';
    id: UserAddressRejectVerifyDataUserAddressRejectVerifyVerifyDocumentId;
    originalname: UserAddressRejectVerifyDataUserAddressRejectVerifyVerifyDocumentOriginalname;
    url: UserAddressRejectVerifyDataUserAddressRejectVerifyVerifyDocumentUrl;
    create: UserAddressRejectVerifyDataUserAddressRejectVerifyVerifyDocumentCreate;
};

type UserAddressRejectVerifyDataUserAddressRejectVerifyVerifyDocumentId = string;
type UserAddressRejectVerifyDataUserAddressRejectVerifyVerifyDocumentOriginalname = string;
type UserAddressRejectVerifyDataUserAddressRejectVerifyVerifyDocumentUrl = string;
type UserAddressRejectVerifyDataUserAddressRejectVerifyVerifyDocumentCreate = any;

/*,
 * Fragments from undefined,
 */

/*,
 * Operations from undefined,
 */

useQueryUserCommentsByUser.Document = gql`
    query userCommentsByUser($userId: ID!) {
        userCommentsByUser(userId: $userId) {
            message
            id
            create
        }
    }
` as DocumentNode;

export function useQueryUserCommentsByUser(
    options?: QueryHookOptions<
        UserCommentsByUserData,
        UserCommentsByUserVariables
    >
) {
    const result = useQuery<
        UserCommentsByUserData,
        UserCommentsByUserVariables
    >(useQueryUserCommentsByUser.Document, {
        ...queryDefaultOptions,
        ...options,
    });
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryUserCommentsByUser.lazy = function (
    options?: LazyQueryHookOptions<
        UserCommentsByUserData,
        UserCommentsByUserVariables
    >
) {
    return useLazyQuery(useQueryUserCommentsByUser.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type UserCommentsByUserVariables = {
    userId: UserCommentsByUserVariablesUserId;
};

type UserCommentsByUserVariablesUserId = string;

export type UserCommentsByUserData = {
    userCommentsByUser: Array<UserCommentsByUserDataUserCommentsByUser>;
};

type UserCommentsByUserDataUserCommentsByUser = {
    __typename?: 'UserComment';
    message: UserCommentsByUserDataUserCommentsByUserMessage;
    id: UserCommentsByUserDataUserCommentsByUserId;
    create: UserCommentsByUserDataUserCommentsByUserCreate;
};

type UserCommentsByUserDataUserCommentsByUserMessage = string;
type UserCommentsByUserDataUserCommentsByUserId = string;
type UserCommentsByUserDataUserCommentsByUserCreate = any;

useMutationUserCommentCreate.Document = gql`
    mutation userCommentCreate($userId: ID!, $message: String!) {
        userCommentCreate(userId: $userId, message: $message) {
            message
            id
            create
        }
    }
` as DocumentNode;

export function useMutationUserCommentCreate(
    options?: MutationHookOptions<
        UserCommentCreateData,
        UserCommentCreateVariables
    >
): MutationHookFn<UserCommentCreateData, UserCommentCreateVariables> {
    return useMutation<UserCommentCreateData, UserCommentCreateVariables>(
        useMutationUserCommentCreate.Document,
        { ...mutationDefaultOptions, ...options }
    ) as any;
}

export type UserCommentCreateVariables = {
    userId: UserCommentCreateVariablesUserId;
    message: UserCommentCreateVariablesMessage;
};

type UserCommentCreateVariablesUserId = string;
type UserCommentCreateVariablesMessage = string;

export type UserCommentCreateData = {
    userCommentCreate: UserCommentCreateDataUserCommentCreate;
};

type UserCommentCreateDataUserCommentCreate = {
    __typename?: 'UserComment';
    message: UserCommentCreateDataUserCommentCreateMessage;
    id: UserCommentCreateDataUserCommentCreateId;
    create: UserCommentCreateDataUserCommentCreateCreate;
};

type UserCommentCreateDataUserCommentCreateMessage = string;
type UserCommentCreateDataUserCommentCreateId = string;
type UserCommentCreateDataUserCommentCreateCreate = any;

/*,
 * Fragments from undefined,
 */

/*,
 * Operations from undefined,
 */

useQueryMyUserOAuthTokens.Document = gql`
    query myUserOAuthTokens {
        myUserOAuthTokens {
            id
            service
            confirmed
        }
    }
` as DocumentNode;

export function useQueryMyUserOAuthTokens(
    options?: QueryHookOptions<
        MyUserOAuthTokensData,
        MyUserOAuthTokensVariables
    >
) {
    const result = useQuery<MyUserOAuthTokensData, MyUserOAuthTokensVariables>(
        useQueryMyUserOAuthTokens.Document,
        { ...queryDefaultOptions, ...options }
    );
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryMyUserOAuthTokens.lazy = function (
    options?: LazyQueryHookOptions<
        MyUserOAuthTokensData,
        MyUserOAuthTokensVariables
    >
) {
    return useLazyQuery(useQueryMyUserOAuthTokens.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type MyUserOAuthTokensVariables = {};

export type MyUserOAuthTokensData = {
    myUserOAuthTokens: Array<MyUserOAuthTokensDataMyUserOAuthTokens>;
};

type MyUserOAuthTokensDataMyUserOAuthTokens = {
    __typename?: 'UserOauthToken';
    id: MyUserOAuthTokensDataMyUserOAuthTokensId;
    service: MyUserOAuthTokensDataMyUserOAuthTokensService;
    confirmed: MyUserOAuthTokensDataMyUserOAuthTokensConfirmed;
};

type MyUserOAuthTokensDataMyUserOAuthTokensId = string;
type MyUserOAuthTokensDataMyUserOAuthTokensService = string;
type MyUserOAuthTokensDataMyUserOAuthTokensConfirmed = boolean;

useMutationUserOauthTokenConfirm.Document = gql`
    mutation userOauthTokenConfirm($password: String!, $id: ID!) {
        userOauthTokenConfirm(id: $id, password: $password) {
            id
            service
            confirmed
        }
    }
` as DocumentNode;

export function useMutationUserOauthTokenConfirm(
    options?: MutationHookOptions<
        UserOauthTokenConfirmData,
        UserOauthTokenConfirmVariables
    >
): MutationHookFn<UserOauthTokenConfirmData, UserOauthTokenConfirmVariables> {
    return useMutation<
        UserOauthTokenConfirmData,
        UserOauthTokenConfirmVariables
    >(useMutationUserOauthTokenConfirm.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type UserOauthTokenConfirmVariables = {
    password: UserOauthTokenConfirmVariablesPassword;
    id: UserOauthTokenConfirmVariablesId;
};

type UserOauthTokenConfirmVariablesPassword = string;
type UserOauthTokenConfirmVariablesId = string;

export type UserOauthTokenConfirmData = {
    userOauthTokenConfirm: UserOauthTokenConfirmDataUserOauthTokenConfirm;
};

type UserOauthTokenConfirmDataUserOauthTokenConfirm = {
    __typename?: 'UserOauthToken';
    id: UserOauthTokenConfirmDataUserOauthTokenConfirmId;
    service: UserOauthTokenConfirmDataUserOauthTokenConfirmService;
    confirmed: UserOauthTokenConfirmDataUserOauthTokenConfirmConfirmed;
};

type UserOauthTokenConfirmDataUserOauthTokenConfirmId = string;
type UserOauthTokenConfirmDataUserOauthTokenConfirmService = string;
type UserOauthTokenConfirmDataUserOauthTokenConfirmConfirmed = boolean;

useMutationUserOAuthDeleteToken.Document = gql`
    mutation userOAuthDeleteToken($id: ID!) {
        userOAuthDeleteToken(id: $id)
    }
` as DocumentNode;

export function useMutationUserOAuthDeleteToken(
    options?: MutationHookOptions<
        UserOAuthDeleteTokenData,
        UserOAuthDeleteTokenVariables
    >
): MutationHookFn<UserOAuthDeleteTokenData, UserOAuthDeleteTokenVariables> {
    return useMutation<UserOAuthDeleteTokenData, UserOAuthDeleteTokenVariables>(
        useMutationUserOAuthDeleteToken.Document,
        { ...mutationDefaultOptions, ...options }
    ) as any;
}

export type UserOAuthDeleteTokenVariables = {
    id: UserOAuthDeleteTokenVariablesId;
};

type UserOAuthDeleteTokenVariablesId = string;

export type UserOAuthDeleteTokenData = {
    userOAuthDeleteToken: UserOAuthDeleteTokenDataUserOAuthDeleteToken;
};

type UserOAuthDeleteTokenDataUserOAuthDeleteToken = boolean;

/*,
 * Fragments from undefined,
 */
export type ProductVserverPart = {
    id: ProductVserverPartId;
    create: ProductVserverPartCreate;
    name: ProductVserverPartName;
    hasRunningTask: ProductVserverPartHasRunningTask;
    sshPassword?: Nullable<ProductVserverPartSshPassword>;
    vserverId?: Nullable<ProductVserverPartVserverId>;
    cores: ProductVserverPartCores;
    memory: ProductVserverPartMemory;
    platform: ProductVserverPartPlatform;
    diskspace: ProductVserverPartDiskspace;
    networkSpeed: ProductVserverPartNetworkSpeed;
    attributes: ProductVserverPartAttributes;
    ips: Array<ProductVserverPartIps>;
    hostNode: ProductVserverPartHostNode;
    product: ProductVserverPartProduct;
    images: Array<ProductVserverPartImages>;
};

type ProductVserverPartId = string;
type ProductVserverPartCreate = any;
type ProductVserverPartName = string;
type ProductVserverPartHasRunningTask = boolean;
type ProductVserverPartSshPassword = string;
type ProductVserverPartVserverId = number;
type ProductVserverPartCores = string;
type ProductVserverPartMemory = string;
type ProductVserverPartPlatform = string;
type ProductVserverPartDiskspace = string;
type ProductVserverPartNetworkSpeed = number;
type ProductVserverPartAttributes = any;
type ProductVserverPartIps = {
    __typename?: 'ProductVserverIp';
    id: ProductVserverPartIpsId;
    ip: ProductVserverPartIpsIp;
    active: ProductVserverPartIpsActive;
    gateway: ProductVserverPartIpsGateway;
    netmask: ProductVserverPartIpsNetmask;
};

type ProductVserverPartIpsId = string;
type ProductVserverPartIpsIp = string;
type ProductVserverPartIpsActive = boolean;
type ProductVserverPartIpsGateway = string;
type ProductVserverPartIpsNetmask = string;
type ProductVserverPartHostNode = {
    __typename?: 'HostNode';
    id: ProductVserverPartHostNodeId;
    name: ProductVserverPartHostNodeName;
    cpuInfo: ProductVserverPartHostNodeCpuInfo;
    cpuCores: ProductVserverPartHostNodeCpuCores;
};

type ProductVserverPartHostNodeId = string;
type ProductVserverPartHostNodeName = string;
type ProductVserverPartHostNodeCpuInfo = string;
type ProductVserverPartHostNodeCpuCores = number;
type ProductVserverPartProduct = {
    __typename?: 'Product';
    id: ProductVserverPartProductId;
    locked: ProductVserverPartProductLocked;
    user: ProductVserverPartProductUser;
    expire?: Nullable<ProductVserverPartProductExpire>;
};

type ProductVserverPartProductId = string;
type ProductVserverPartProductLocked = boolean;
type ProductVserverPartProductUser = {
    __typename?: 'User';
    id: ProductVserverPartProductUserId;
    publicName: ProductVserverPartProductUserPublicName;
};

type ProductVserverPartProductUserId = string;
type ProductVserverPartProductUserPublicName = string;
type ProductVserverPartProductExpire = any;
type ProductVserverPartImages = {
    __typename?: 'ProductVserverImage';
    id: ProductVserverPartImagesId;
    logo?: Nullable<ProductVserverPartImagesLogo>;
};

type ProductVserverPartImagesId = string;
type ProductVserverPartImagesLogo = {
    __typename?: 'File';
    id: ProductVserverPartImagesLogoId;
    url: ProductVserverPartImagesLogoUrl;
};

type ProductVserverPartImagesLogoId = string;
type ProductVserverPartImagesLogoUrl = string;
const _gql_ProductVserverPart = gql`
    fragment ProductVserverPart on ProductVserver {
        id
        create
        name
        hasRunningTask
        sshPassword
        vserverId
        cores
        memory
        platform
        diskspace
        networkSpeed
        attributes
        ips {
            id
            ip
            active
            gateway
            netmask
        }
        hostNode {
            id
            name
            cpuInfo
            cpuCores
        }
        product {
            id
            locked
            user {
                id
                publicName
            }
            expire
        }
        images {
            id
            logo {
                id
                url
            }
        }
    }
`;

/*,
 * Operations from undefined,
 */

useQueryProductVserverByIdBackups.Document = gql`
    query productVserverByIdBackups($id: ID!) {
        productVserverById(id: $id) {
            ...ProductVserverPart
            backups {
                id
                create
                sizeInMb
                restorable
            }
        }
    }
    ${_gql_ProductVserverPart}
` as DocumentNode;

export function useQueryProductVserverByIdBackups(
    options?: QueryHookOptions<
        ProductVserverByIdBackupsData,
        ProductVserverByIdBackupsVariables
    >
) {
    const result = useQuery<
        ProductVserverByIdBackupsData,
        ProductVserverByIdBackupsVariables
    >(useQueryProductVserverByIdBackups.Document, {
        ...queryDefaultOptions,
        ...options,
    });
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryProductVserverByIdBackups.lazy = function (
    options?: LazyQueryHookOptions<
        ProductVserverByIdBackupsData,
        ProductVserverByIdBackupsVariables
    >
) {
    return useLazyQuery(useQueryProductVserverByIdBackups.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type ProductVserverByIdBackupsVariables = {
    id: ProductVserverByIdBackupsVariablesId;
};

type ProductVserverByIdBackupsVariablesId = string;

export type ProductVserverByIdBackupsData = {
    productVserverById: ProductVserverByIdBackupsDataProductVserverById;
};

type ProductVserverByIdBackupsDataProductVserverById = ProductVserverPart & {
    __typename?: 'ProductVserver';
    backups: Array<ProductVserverByIdBackupsDataProductVserverByIdBackups>;
};

type ProductVserverByIdBackupsDataProductVserverByIdBackups = {
    __typename?: 'ProductVserverBackup';
    id: ProductVserverByIdBackupsDataProductVserverByIdBackupsId;
    create: ProductVserverByIdBackupsDataProductVserverByIdBackupsCreate;
    sizeInMb?: Nullable<ProductVserverByIdBackupsDataProductVserverByIdBackupsSizeInMb>;
    restorable: ProductVserverByIdBackupsDataProductVserverByIdBackupsRestorable;
};

type ProductVserverByIdBackupsDataProductVserverByIdBackupsId = string;
type ProductVserverByIdBackupsDataProductVserverByIdBackupsCreate = any;
type ProductVserverByIdBackupsDataProductVserverByIdBackupsSizeInMb = number;
type ProductVserverByIdBackupsDataProductVserverByIdBackupsRestorable = boolean;

useMutationProductVserverDelete.Document = gql`
    mutation productVserverDelete($id: ID!) {
        productVserverDelete(id: $id)
    }
` as DocumentNode;

export function useMutationProductVserverDelete(
    options?: MutationHookOptions<
        ProductVserverDeleteData,
        ProductVserverDeleteVariables
    >
): MutationHookFn<ProductVserverDeleteData, ProductVserverDeleteVariables> {
    return useMutation<ProductVserverDeleteData, ProductVserverDeleteVariables>(
        useMutationProductVserverDelete.Document,
        { ...mutationDefaultOptions, ...options }
    ) as any;
}

export type ProductVserverDeleteVariables = {
    id: ProductVserverDeleteVariablesId;
};

type ProductVserverDeleteVariablesId = string;

export type ProductVserverDeleteData = {
    productVserverDelete: ProductVserverDeleteDataProductVserverDelete;
};

type ProductVserverDeleteDataProductVserverDelete = boolean;

useQueryProductVservers.Document = gql`
    query productVservers($filter: CordFilter) {
        productVservers(filter: $filter) {
            edges {
                ...ProductVserverPart
            }
            pageInfo {
                totalCount
            }
        }
    }
    ${_gql_ProductVserverPart}
` as DocumentNode;

export function useQueryProductVservers(
    options?: QueryHookOptions<ProductVserversData, ProductVserversVariables>
) {
    const result = useQuery<ProductVserversData, ProductVserversVariables>(
        useQueryProductVservers.Document,
        { ...queryDefaultOptions, ...options }
    );
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryProductVservers.lazy = function (
    options?: LazyQueryHookOptions<
        ProductVserversData,
        ProductVserversVariables
    >
) {
    return useLazyQuery(useQueryProductVservers.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type ProductVserversVariables = {
    filter?: Nullable<ProductVserversVariablesFilter>;
};

type ProductVserversVariablesFilter = CordFilter;

export type ProductVserversData = {
    productVservers: ProductVserversDataProductVservers;
};

type ProductVserversDataProductVservers = {
    __typename?: 'ProductVserverResultMany';
    edges: Array<ProductVserversDataProductVserversEdges>;
    pageInfo: ProductVserversDataProductVserversPageInfo;
};

type ProductVserversDataProductVserversEdges = ProductVserverPart & {
    __typename?: 'ProductVserver';
};

type ProductVserversDataProductVserversPageInfo = {
    __typename?: 'CordPageInfo';
    totalCount: ProductVserversDataProductVserversPageInfoTotalCount;
};

type ProductVserversDataProductVserversPageInfoTotalCount = number;

useQueryProductVserverExist.Document = gql`
    query productVserverExist($id: ID!) {
        productVserverExist(vserverId: $id)
    }
` as DocumentNode;

export function useQueryProductVserverExist(
    options?: QueryHookOptions<
        ProductVserverExistData,
        ProductVserverExistVariables
    >
) {
    const result = useQuery<
        ProductVserverExistData,
        ProductVserverExistVariables
    >(useQueryProductVserverExist.Document, {
        ...queryDefaultOptions,
        ...options,
    });
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryProductVserverExist.lazy = function (
    options?: LazyQueryHookOptions<
        ProductVserverExistData,
        ProductVserverExistVariables
    >
) {
    return useLazyQuery(useQueryProductVserverExist.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type ProductVserverExistVariables = {
    id: ProductVserverExistVariablesId;
};

type ProductVserverExistVariablesId = string;

export type ProductVserverExistData = {
    productVserverExist: ProductVserverExistDataProductVserverExist;
};

type ProductVserverExistDataProductVserverExist = boolean;

useQueryProductVserverStats.Document = gql`
    query productVserverStats($id: ID!) {
        productVserverStats(vserverId: $id) {
            cpu
            cpus
            disk
            diskread
            diskwrite
            lock
            maxdisk
            maxmem
            maxswap
            mem
            name
            netin
            netout
            pid
            status
            swap
            template
            type
            time
            uptime
            vmid
        }
    }
` as DocumentNode;

export function useQueryProductVserverStats(
    options?: QueryHookOptions<
        ProductVserverStatsData,
        ProductVserverStatsVariables
    >
) {
    const result = useQuery<
        ProductVserverStatsData,
        ProductVserverStatsVariables
    >(useQueryProductVserverStats.Document, {
        ...queryDefaultOptions,
        ...options,
    });
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryProductVserverStats.lazy = function (
    options?: LazyQueryHookOptions<
        ProductVserverStatsData,
        ProductVserverStatsVariables
    >
) {
    return useLazyQuery(useQueryProductVserverStats.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type ProductVserverStatsVariables = {
    id: ProductVserverStatsVariablesId;
};

type ProductVserverStatsVariablesId = string;

export type ProductVserverStatsData = {
    productVserverStats: Array<ProductVserverStatsDataProductVserverStats>;
};

type ProductVserverStatsDataProductVserverStats = {
    __typename?: 'VserverStatsEntry';
    cpu?: Nullable<ProductVserverStatsDataProductVserverStatsCpu>;
    cpus?: Nullable<ProductVserverStatsDataProductVserverStatsCpus>;
    disk?: Nullable<ProductVserverStatsDataProductVserverStatsDisk>;
    diskread?: Nullable<ProductVserverStatsDataProductVserverStatsDiskread>;
    diskwrite?: Nullable<ProductVserverStatsDataProductVserverStatsDiskwrite>;
    lock?: Nullable<ProductVserverStatsDataProductVserverStatsLock>;
    maxdisk?: Nullable<ProductVserverStatsDataProductVserverStatsMaxdisk>;
    maxmem?: Nullable<ProductVserverStatsDataProductVserverStatsMaxmem>;
    maxswap?: Nullable<ProductVserverStatsDataProductVserverStatsMaxswap>;
    mem?: Nullable<ProductVserverStatsDataProductVserverStatsMem>;
    name?: Nullable<ProductVserverStatsDataProductVserverStatsName>;
    netin?: Nullable<ProductVserverStatsDataProductVserverStatsNetin>;
    netout?: Nullable<ProductVserverStatsDataProductVserverStatsNetout>;
    pid?: Nullable<ProductVserverStatsDataProductVserverStatsPid>;
    status?: Nullable<ProductVserverStatsDataProductVserverStatsStatus>;
    swap?: Nullable<ProductVserverStatsDataProductVserverStatsSwap>;
    template?: Nullable<ProductVserverStatsDataProductVserverStatsTemplate>;
    type?: Nullable<ProductVserverStatsDataProductVserverStatsType>;
    time: ProductVserverStatsDataProductVserverStatsTime;
    uptime?: Nullable<ProductVserverStatsDataProductVserverStatsUptime>;
    vmid?: Nullable<ProductVserverStatsDataProductVserverStatsVmid>;
};

type ProductVserverStatsDataProductVserverStatsCpu = number;
type ProductVserverStatsDataProductVserverStatsCpus = number;
type ProductVserverStatsDataProductVserverStatsDisk = string;
type ProductVserverStatsDataProductVserverStatsDiskread = number;
type ProductVserverStatsDataProductVserverStatsDiskwrite = number;
type ProductVserverStatsDataProductVserverStatsLock = string;
type ProductVserverStatsDataProductVserverStatsMaxdisk = string;
type ProductVserverStatsDataProductVserverStatsMaxmem = number;
type ProductVserverStatsDataProductVserverStatsMaxswap = number;
type ProductVserverStatsDataProductVserverStatsMem = number;
type ProductVserverStatsDataProductVserverStatsName = string;
type ProductVserverStatsDataProductVserverStatsNetin = number;
type ProductVserverStatsDataProductVserverStatsNetout = number;
type ProductVserverStatsDataProductVserverStatsPid = string;
type ProductVserverStatsDataProductVserverStatsStatus = string;
type ProductVserverStatsDataProductVserverStatsSwap = number;
type ProductVserverStatsDataProductVserverStatsTemplate = string;
type ProductVserverStatsDataProductVserverStatsType = string;
type ProductVserverStatsDataProductVserverStatsTime = number;
type ProductVserverStatsDataProductVserverStatsUptime = number;
type ProductVserverStatsDataProductVserverStatsVmid = string;

useQueryProductVserverRunning.Document = gql`
    query productVserverRunning($id: ID!) {
        productVserverRunning(vserverId: $id)
    }
` as DocumentNode;

export function useQueryProductVserverRunning(
    options?: QueryHookOptions<
        ProductVserverRunningData,
        ProductVserverRunningVariables
    >
) {
    const result = useQuery<
        ProductVserverRunningData,
        ProductVserverRunningVariables
    >(useQueryProductVserverRunning.Document, {
        ...queryDefaultOptions,
        ...options,
    });
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryProductVserverRunning.lazy = function (
    options?: LazyQueryHookOptions<
        ProductVserverRunningData,
        ProductVserverRunningVariables
    >
) {
    return useLazyQuery(useQueryProductVserverRunning.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type ProductVserverRunningVariables = {
    id: ProductVserverRunningVariablesId;
};

type ProductVserverRunningVariablesId = string;

export type ProductVserverRunningData = {
    productVserverRunning: ProductVserverRunningDataProductVserverRunning;
};

type ProductVserverRunningDataProductVserverRunning = boolean;

useMutationProductVserverMakeVncPort.Document = gql`
    mutation productVserverMakeVncPort($id: ID!) {
        productVserverMakeVncPort(vserverId: $id)
    }
` as DocumentNode;

export function useMutationProductVserverMakeVncPort(
    options?: MutationHookOptions<
        ProductVserverMakeVncPortData,
        ProductVserverMakeVncPortVariables
    >
): MutationHookFn<
    ProductVserverMakeVncPortData,
    ProductVserverMakeVncPortVariables
> {
    return useMutation<
        ProductVserverMakeVncPortData,
        ProductVserverMakeVncPortVariables
    >(useMutationProductVserverMakeVncPort.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type ProductVserverMakeVncPortVariables = {
    id: ProductVserverMakeVncPortVariablesId;
};

type ProductVserverMakeVncPortVariablesId = string;

export type ProductVserverMakeVncPortData = {
    productVserverMakeVncPort: ProductVserverMakeVncPortDataProductVserverMakeVncPort;
};

type ProductVserverMakeVncPortDataProductVserverMakeVncPort = string;

useMutationProductVserverInstall.Document = gql`
    mutation productVserverInstall($id: ID!, $recreate: Boolean) {
        productVserverInstall(vserverId: $id, recreate: $recreate) {
            id
        }
    }
` as DocumentNode;

export function useMutationProductVserverInstall(
    options?: MutationHookOptions<
        ProductVserverInstallData,
        ProductVserverInstallVariables
    >
): MutationHookFn<ProductVserverInstallData, ProductVserverInstallVariables> {
    return useMutation<
        ProductVserverInstallData,
        ProductVserverInstallVariables
    >(useMutationProductVserverInstall.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type ProductVserverInstallVariables = {
    id: ProductVserverInstallVariablesId;
    recreate?: Nullable<ProductVserverInstallVariablesRecreate>;
};

type ProductVserverInstallVariablesId = string;
type ProductVserverInstallVariablesRecreate = boolean;

export type ProductVserverInstallData = {
    productVserverInstall: ProductVserverInstallDataProductVserverInstall;
};

type ProductVserverInstallDataProductVserverInstall = {
    __typename?: 'HostNodeTask';
    id: ProductVserverInstallDataProductVserverInstallId;
};

type ProductVserverInstallDataProductVserverInstallId = string;

useMutationProductVserverBackupRestore.Document = gql`
    mutation productVserverBackupRestore($id: ID!, $backupId: ID!) {
        productVserverBackupRestore(id: $id, backupId: $backupId) {
            id
        }
    }
` as DocumentNode;

export function useMutationProductVserverBackupRestore(
    options?: MutationHookOptions<
        ProductVserverBackupRestoreData,
        ProductVserverBackupRestoreVariables
    >
): MutationHookFn<
    ProductVserverBackupRestoreData,
    ProductVserverBackupRestoreVariables
> {
    return useMutation<
        ProductVserverBackupRestoreData,
        ProductVserverBackupRestoreVariables
    >(useMutationProductVserverBackupRestore.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type ProductVserverBackupRestoreVariables = {
    id: ProductVserverBackupRestoreVariablesId;
    backupId: ProductVserverBackupRestoreVariablesBackupId;
};

type ProductVserverBackupRestoreVariablesId = string;
type ProductVserverBackupRestoreVariablesBackupId = string;

export type ProductVserverBackupRestoreData = {
    productVserverBackupRestore: ProductVserverBackupRestoreDataProductVserverBackupRestore;
};

type ProductVserverBackupRestoreDataProductVserverBackupRestore = {
    __typename?: 'ProductVserverBackup';
    id: ProductVserverBackupRestoreDataProductVserverBackupRestoreId;
};

type ProductVserverBackupRestoreDataProductVserverBackupRestoreId = string;

useMutationProductVserverBackupDownload.Document = gql`
    mutation productVserverBackupDownload($id: ID!) {
        productVserverBackupDownload(id: $id)
    }
` as DocumentNode;

export function useMutationProductVserverBackupDownload(
    options?: MutationHookOptions<
        ProductVserverBackupDownloadData,
        ProductVserverBackupDownloadVariables
    >
): MutationHookFn<
    ProductVserverBackupDownloadData,
    ProductVserverBackupDownloadVariables
> {
    return useMutation<
        ProductVserverBackupDownloadData,
        ProductVserverBackupDownloadVariables
    >(useMutationProductVserverBackupDownload.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type ProductVserverBackupDownloadVariables = {
    id: ProductVserverBackupDownloadVariablesId;
};

type ProductVserverBackupDownloadVariablesId = string;

export type ProductVserverBackupDownloadData = {
    productVserverBackupDownload: ProductVserverBackupDownloadDataProductVserverBackupDownload;
};

type ProductVserverBackupDownloadDataProductVserverBackupDownload = string;

useMutationProductVserverBackupCreate.Document = gql`
    mutation productVserverBackupCreate($id: ID!) {
        productVserverBackupCreate(id: $id) {
            id
        }
    }
` as DocumentNode;

export function useMutationProductVserverBackupCreate(
    options?: MutationHookOptions<
        ProductVserverBackupCreateData,
        ProductVserverBackupCreateVariables
    >
): MutationHookFn<
    ProductVserverBackupCreateData,
    ProductVserverBackupCreateVariables
> {
    return useMutation<
        ProductVserverBackupCreateData,
        ProductVserverBackupCreateVariables
    >(useMutationProductVserverBackupCreate.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type ProductVserverBackupCreateVariables = {
    id: ProductVserverBackupCreateVariablesId;
};

type ProductVserverBackupCreateVariablesId = string;

export type ProductVserverBackupCreateData = {
    productVserverBackupCreate: ProductVserverBackupCreateDataProductVserverBackupCreate;
};

type ProductVserverBackupCreateDataProductVserverBackupCreate = {
    __typename?: 'ProductVserverBackup';
    id: ProductVserverBackupCreateDataProductVserverBackupCreateId;
};

type ProductVserverBackupCreateDataProductVserverBackupCreateId = string;

useMutationProductVserverBackupDelete.Document = gql`
    mutation productVserverBackupDelete($id: ID!, $backupId: ID!) {
        productVserverBackupDelete(id: $id, backupId: $backupId)
    }
` as DocumentNode;

export function useMutationProductVserverBackupDelete(
    options?: MutationHookOptions<
        ProductVserverBackupDeleteData,
        ProductVserverBackupDeleteVariables
    >
): MutationHookFn<
    ProductVserverBackupDeleteData,
    ProductVserverBackupDeleteVariables
> {
    return useMutation<
        ProductVserverBackupDeleteData,
        ProductVserverBackupDeleteVariables
    >(useMutationProductVserverBackupDelete.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type ProductVserverBackupDeleteVariables = {
    id: ProductVserverBackupDeleteVariablesId;
    backupId: ProductVserverBackupDeleteVariablesBackupId;
};

type ProductVserverBackupDeleteVariablesId = string;
type ProductVserverBackupDeleteVariablesBackupId = string;

export type ProductVserverBackupDeleteData = {
    productVserverBackupDelete: ProductVserverBackupDeleteDataProductVserverBackupDelete;
};

type ProductVserverBackupDeleteDataProductVserverBackupDelete = boolean;

useMutationProductVserverStart.Document = gql`
    mutation productVserverStart($id: ID!, $withImages: Boolean) {
        productVserverStart(vserverId: $id, withImages: $withImages) {
            id
        }
    }
` as DocumentNode;

export function useMutationProductVserverStart(
    options?: MutationHookOptions<
        ProductVserverStartData,
        ProductVserverStartVariables
    >
): MutationHookFn<ProductVserverStartData, ProductVserverStartVariables> {
    return useMutation<ProductVserverStartData, ProductVserverStartVariables>(
        useMutationProductVserverStart.Document,
        { ...mutationDefaultOptions, ...options }
    ) as any;
}

export type ProductVserverStartVariables = {
    id: ProductVserverStartVariablesId;
    withImages?: Nullable<ProductVserverStartVariablesWithImages>;
};

type ProductVserverStartVariablesId = string;
type ProductVserverStartVariablesWithImages = boolean;

export type ProductVserverStartData = {
    productVserverStart: ProductVserverStartDataProductVserverStart;
};

type ProductVserverStartDataProductVserverStart = {
    __typename?: 'HostNodeTask';
    id: ProductVserverStartDataProductVserverStartId;
};

type ProductVserverStartDataProductVserverStartId = string;

useMutationProductVserverStop.Document = gql`
    mutation productVserverStop($id: ID!) {
        productVserverStop(vserverId: $id) {
            id
        }
    }
` as DocumentNode;

export function useMutationProductVserverStop(
    options?: MutationHookOptions<
        ProductVserverStopData,
        ProductVserverStopVariables
    >
): MutationHookFn<ProductVserverStopData, ProductVserverStopVariables> {
    return useMutation<ProductVserverStopData, ProductVserverStopVariables>(
        useMutationProductVserverStop.Document,
        { ...mutationDefaultOptions, ...options }
    ) as any;
}

export type ProductVserverStopVariables = {
    id: ProductVserverStopVariablesId;
};

type ProductVserverStopVariablesId = string;

export type ProductVserverStopData = {
    productVserverStop: ProductVserverStopDataProductVserverStop;
};

type ProductVserverStopDataProductVserverStop = {
    __typename?: 'HostNodeTask';
    id: ProductVserverStopDataProductVserverStopId;
};

type ProductVserverStopDataProductVserverStopId = string;

useMutationProductVserverSetSshPassword.Document = gql`
    mutation productVserverSetSshPassword($id: ID!, $password: String!) {
        productVserverSetSshPassword(vserverId: $id, password: $password) {
            ...ProductVserverPart
        }
    }
    ${_gql_ProductVserverPart}
` as DocumentNode;

export function useMutationProductVserverSetSshPassword(
    options?: MutationHookOptions<
        ProductVserverSetSshPasswordData,
        ProductVserverSetSshPasswordVariables
    >
): MutationHookFn<
    ProductVserverSetSshPasswordData,
    ProductVserverSetSshPasswordVariables
> {
    return useMutation<
        ProductVserverSetSshPasswordData,
        ProductVserverSetSshPasswordVariables
    >(useMutationProductVserverSetSshPassword.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type ProductVserverSetSshPasswordVariables = {
    id: ProductVserverSetSshPasswordVariablesId;
    password: ProductVserverSetSshPasswordVariablesPassword;
};

type ProductVserverSetSshPasswordVariablesId = string;
type ProductVserverSetSshPasswordVariablesPassword = string;

export type ProductVserverSetSshPasswordData = {
    productVserverSetSshPassword: ProductVserverSetSshPasswordDataProductVserverSetSshPassword;
};

type ProductVserverSetSshPasswordDataProductVserverSetSshPassword = ProductVserverPart & {
    __typename?: 'ProductVserver';
};

useMutationProductVserverChangeLabel.Document = gql`
    mutation productVserverChangeLabel($id: ID!, $label: String!) {
        productVserverChangeLabel(id: $id, label: $label) {
            ...ProductVserverPart
        }
    }
    ${_gql_ProductVserverPart}
` as DocumentNode;

export function useMutationProductVserverChangeLabel(
    options?: MutationHookOptions<
        ProductVserverChangeLabelData,
        ProductVserverChangeLabelVariables
    >
): MutationHookFn<
    ProductVserverChangeLabelData,
    ProductVserverChangeLabelVariables
> {
    return useMutation<
        ProductVserverChangeLabelData,
        ProductVserverChangeLabelVariables
    >(useMutationProductVserverChangeLabel.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type ProductVserverChangeLabelVariables = {
    id: ProductVserverChangeLabelVariablesId;
    label: ProductVserverChangeLabelVariablesLabel;
};

type ProductVserverChangeLabelVariablesId = string;
type ProductVserverChangeLabelVariablesLabel = string;

export type ProductVserverChangeLabelData = {
    productVserverChangeLabel: ProductVserverChangeLabelDataProductVserverChangeLabel;
};

type ProductVserverChangeLabelDataProductVserverChangeLabel = ProductVserverPart & {
    __typename?: 'ProductVserver';
};

useMutationProductVserverAddImage.Document = gql`
    mutation productVserverAddImage($id: ID!, $imageId: ID!) {
        productVserverAddImage(id: $id, imageId: $imageId) {
            ...ProductVserverPart
        }
    }
    ${_gql_ProductVserverPart}
` as DocumentNode;

export function useMutationProductVserverAddImage(
    options?: MutationHookOptions<
        ProductVserverAddImageData,
        ProductVserverAddImageVariables
    >
): MutationHookFn<ProductVserverAddImageData, ProductVserverAddImageVariables> {
    return useMutation<
        ProductVserverAddImageData,
        ProductVserverAddImageVariables
    >(useMutationProductVserverAddImage.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type ProductVserverAddImageVariables = {
    id: ProductVserverAddImageVariablesId;
    imageId: ProductVserverAddImageVariablesImageId;
};

type ProductVserverAddImageVariablesId = string;
type ProductVserverAddImageVariablesImageId = string;

export type ProductVserverAddImageData = {
    productVserverAddImage: ProductVserverAddImageDataProductVserverAddImage;
};

type ProductVserverAddImageDataProductVserverAddImage = ProductVserverPart & {
    __typename?: 'ProductVserver';
};

useMutationProductVserverRemoveImage.Document = gql`
    mutation productVserverRemoveImage($id: ID!, $imageId: ID!) {
        productVserverRemoveImage(id: $id, imageId: $imageId) {
            ...ProductVserverPart
        }
    }
    ${_gql_ProductVserverPart}
` as DocumentNode;

export function useMutationProductVserverRemoveImage(
    options?: MutationHookOptions<
        ProductVserverRemoveImageData,
        ProductVserverRemoveImageVariables
    >
): MutationHookFn<
    ProductVserverRemoveImageData,
    ProductVserverRemoveImageVariables
> {
    return useMutation<
        ProductVserverRemoveImageData,
        ProductVserverRemoveImageVariables
    >(useMutationProductVserverRemoveImage.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type ProductVserverRemoveImageVariables = {
    id: ProductVserverRemoveImageVariablesId;
    imageId: ProductVserverRemoveImageVariablesImageId;
};

type ProductVserverRemoveImageVariablesId = string;
type ProductVserverRemoveImageVariablesImageId = string;

export type ProductVserverRemoveImageData = {
    productVserverRemoveImage: ProductVserverRemoveImageDataProductVserverRemoveImage;
};

type ProductVserverRemoveImageDataProductVserverRemoveImage = ProductVserverPart & {
    __typename?: 'ProductVserver';
};

useQueryProductVserverById.Document = gql`
    query productVserverById($id: ID!) {
        productVserverById(id: $id) {
            ...ProductVserverPart
            trafficTransferredInMB
        }
    }
    ${_gql_ProductVserverPart}
` as DocumentNode;

export function useQueryProductVserverById(
    options?: QueryHookOptions<
        ProductVserverByIdData,
        ProductVserverByIdVariables
    >
) {
    const result = useQuery<
        ProductVserverByIdData,
        ProductVserverByIdVariables
    >(useQueryProductVserverById.Document, {
        ...queryDefaultOptions,
        ...options,
    });
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryProductVserverById.lazy = function (
    options?: LazyQueryHookOptions<
        ProductVserverByIdData,
        ProductVserverByIdVariables
    >
) {
    return useLazyQuery(useQueryProductVserverById.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type ProductVserverByIdVariables = {
    id: ProductVserverByIdVariablesId;
};

type ProductVserverByIdVariablesId = string;

export type ProductVserverByIdData = {
    productVserverById: ProductVserverByIdDataProductVserverById;
};

type ProductVserverByIdDataProductVserverById = ProductVserverPart & {
    __typename?: 'ProductVserver';
    trafficTransferredInMB?: Nullable<ProductVserverByIdDataProductVserverByIdTrafficTransferredInMB>;
};

type ProductVserverByIdDataProductVserverByIdTrafficTransferredInMB = number;

useMutationProductVserverUnlockNetworkSpeed.Document = gql`
    mutation productVserverUnlockNetworkSpeed($id: ID!) {
        productVserverUnlockNetworkSpeed(id: $id) {
            ...ProductVserverPart
        }
    }
    ${_gql_ProductVserverPart}
` as DocumentNode;

export function useMutationProductVserverUnlockNetworkSpeed(
    options?: MutationHookOptions<
        ProductVserverUnlockNetworkSpeedData,
        ProductVserverUnlockNetworkSpeedVariables
    >
): MutationHookFn<
    ProductVserverUnlockNetworkSpeedData,
    ProductVserverUnlockNetworkSpeedVariables
> {
    return useMutation<
        ProductVserverUnlockNetworkSpeedData,
        ProductVserverUnlockNetworkSpeedVariables
    >(useMutationProductVserverUnlockNetworkSpeed.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type ProductVserverUnlockNetworkSpeedVariables = {
    id: ProductVserverUnlockNetworkSpeedVariablesId;
};

type ProductVserverUnlockNetworkSpeedVariablesId = string;

export type ProductVserverUnlockNetworkSpeedData = {
    productVserverUnlockNetworkSpeed: ProductVserverUnlockNetworkSpeedDataProductVserverUnlockNetworkSpeed;
};

type ProductVserverUnlockNetworkSpeedDataProductVserverUnlockNetworkSpeed = ProductVserverPart & {
    __typename?: 'ProductVserver';
};

useQueryMyProductVservers.Document = gql`
    query myProductVservers {
        productVserverMy {
            id
            product {
                expire
                id
            }
            images {
                id
                logo {
                    url
                }
            }
            name
        }
    }
` as DocumentNode;

export function useQueryMyProductVservers(
    options?: QueryHookOptions<
        MyProductVserversData,
        MyProductVserversVariables
    >
) {
    const result = useQuery<MyProductVserversData, MyProductVserversVariables>(
        useQueryMyProductVservers.Document,
        { ...queryDefaultOptions, ...options }
    );
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryMyProductVservers.lazy = function (
    options?: LazyQueryHookOptions<
        MyProductVserversData,
        MyProductVserversVariables
    >
) {
    return useLazyQuery(useQueryMyProductVservers.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type MyProductVserversVariables = {};

export type MyProductVserversData = {
    productVserverMy: Array<MyProductVserversDataProductVserverMy>;
};

type MyProductVserversDataProductVserverMy = {
    __typename?: 'ProductVserver';
    id: MyProductVserversDataProductVserverMyId;
    product: MyProductVserversDataProductVserverMyProduct;
    images: Array<MyProductVserversDataProductVserverMyImages>;
    name: MyProductVserversDataProductVserverMyName;
};

type MyProductVserversDataProductVserverMyId = string;
type MyProductVserversDataProductVserverMyProduct = {
    __typename?: 'Product';
    expire?: Nullable<MyProductVserversDataProductVserverMyProductExpire>;
    id: MyProductVserversDataProductVserverMyProductId;
};

type MyProductVserversDataProductVserverMyProductExpire = any;
type MyProductVserversDataProductVserverMyProductId = string;
type MyProductVserversDataProductVserverMyImages = {
    __typename?: 'ProductVserverImage';
    id: MyProductVserversDataProductVserverMyImagesId;
    logo?: Nullable<MyProductVserversDataProductVserverMyImagesLogo>;
};

type MyProductVserversDataProductVserverMyImagesId = string;
type MyProductVserversDataProductVserverMyImagesLogo = {
    __typename?: 'File';
    url: MyProductVserversDataProductVserverMyImagesLogoUrl;
};

type MyProductVserversDataProductVserverMyImagesLogoUrl = string;
type MyProductVserversDataProductVserverMyName = string;

/*,
 * Fragments from undefined,
 */
export type ProductVserverImagePart = {
    id: ProductVserverImagePartId;
    title: ProductVserverImagePartTitle;
    platform: ProductVserverImagePartPlatform;
    resourceUrl: ProductVserverImagePartResourceUrl;
    logo?: Nullable<ProductVserverImagePartLogo>;
    active: ProductVserverImagePartActive;
};

type ProductVserverImagePartId = string;
type ProductVserverImagePartTitle = string;
type ProductVserverImagePartPlatform = string;
type ProductVserverImagePartResourceUrl = string;
type ProductVserverImagePartLogo = {
    __typename?: 'File';
    id: ProductVserverImagePartLogoId;
    url: ProductVserverImagePartLogoUrl;
};

type ProductVserverImagePartLogoId = string;
type ProductVserverImagePartLogoUrl = string;
type ProductVserverImagePartActive = boolean;
const _gql_ProductVserverImagePart = gql`
    fragment ProductVserverImagePart on ProductVserverImage {
        id
        title
        platform
        resourceUrl
        logo {
            id
            url
        }

        active
    }
`;

/*,
 * Operations from undefined,
 */

useQueryProductVserverImages.Document = gql`
    query productVserverImages($filter: CordFilter) {
        productVserverImages(filter: $filter) {
            edges {
                ...ProductVserverImagePart
            }
            pageInfo {
                totalCount
            }
        }
    }
    ${_gql_ProductVserverImagePart}
` as DocumentNode;

export function useQueryProductVserverImages(
    options?: QueryHookOptions<
        ProductVserverImagesData,
        ProductVserverImagesVariables
    >
) {
    const result = useQuery<
        ProductVserverImagesData,
        ProductVserverImagesVariables
    >(useQueryProductVserverImages.Document, {
        ...queryDefaultOptions,
        ...options,
    });
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryProductVserverImages.lazy = function (
    options?: LazyQueryHookOptions<
        ProductVserverImagesData,
        ProductVserverImagesVariables
    >
) {
    return useLazyQuery(useQueryProductVserverImages.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type ProductVserverImagesVariables = {
    filter?: Nullable<ProductVserverImagesVariablesFilter>;
};

type ProductVserverImagesVariablesFilter = CordFilter;

export type ProductVserverImagesData = {
    productVserverImages: ProductVserverImagesDataProductVserverImages;
};

type ProductVserverImagesDataProductVserverImages = {
    __typename?: 'ProductVserverImageResultMany';
    edges: Array<ProductVserverImagesDataProductVserverImagesEdges>;
    pageInfo: ProductVserverImagesDataProductVserverImagesPageInfo;
};

type ProductVserverImagesDataProductVserverImagesEdges = ProductVserverImagePart & {
    __typename?: 'ProductVserverImage';
};

type ProductVserverImagesDataProductVserverImagesPageInfo = {
    __typename?: 'CordPageInfo';
    totalCount: ProductVserverImagesDataProductVserverImagesPageInfoTotalCount;
};

type ProductVserverImagesDataProductVserverImagesPageInfoTotalCount = number;

useMutationProductVserverImageCreate.Document = gql`
    mutation productVserverImageCreate($data: ProductVserverImageCreateInput!) {
        productVserverImageCreate(data: $data) {
            ...ProductVserverImagePart
        }
    }
    ${_gql_ProductVserverImagePart}
` as DocumentNode;

export function useMutationProductVserverImageCreate(
    options?: MutationHookOptions<
        ProductVserverImageCreateData,
        ProductVserverImageCreateVariables
    >
): MutationHookFn<
    ProductVserverImageCreateData,
    ProductVserverImageCreateVariables
> {
    return useMutation<
        ProductVserverImageCreateData,
        ProductVserverImageCreateVariables
    >(useMutationProductVserverImageCreate.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type ProductVserverImageCreateVariables = {
    data: ProductVserverImageCreateVariablesData;
};

type ProductVserverImageCreateVariablesData = ProductVserverImageCreateInput;

export type ProductVserverImageCreateData = {
    productVserverImageCreate: ProductVserverImageCreateDataProductVserverImageCreate;
};

type ProductVserverImageCreateDataProductVserverImageCreate = ProductVserverImagePart & {
    __typename?: 'ProductVserverImage';
};

useMutationProductVserverImageEdit.Document = gql`
    mutation productVserverImageEdit($data: ProductVserverImageEditInput!) {
        productVserverImageEdit(data: $data) {
            ...ProductVserverImagePart
        }
    }
    ${_gql_ProductVserverImagePart}
` as DocumentNode;

export function useMutationProductVserverImageEdit(
    options?: MutationHookOptions<
        ProductVserverImageEditData,
        ProductVserverImageEditVariables
    >
): MutationHookFn<
    ProductVserverImageEditData,
    ProductVserverImageEditVariables
> {
    return useMutation<
        ProductVserverImageEditData,
        ProductVserverImageEditVariables
    >(useMutationProductVserverImageEdit.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type ProductVserverImageEditVariables = {
    data: ProductVserverImageEditVariablesData;
};

type ProductVserverImageEditVariablesData = ProductVserverImageEditInput;

export type ProductVserverImageEditData = {
    productVserverImageEdit: ProductVserverImageEditDataProductVserverImageEdit;
};

type ProductVserverImageEditDataProductVserverImageEdit = ProductVserverImagePart & {
    __typename?: 'ProductVserverImage';
};

useMutationProductVserverImageDelete.Document = gql`
    mutation productVserverImageDelete($id: ID!) {
        productVserverImageDelete(id: $id)
    }
` as DocumentNode;

export function useMutationProductVserverImageDelete(
    options?: MutationHookOptions<
        ProductVserverImageDeleteData,
        ProductVserverImageDeleteVariables
    >
): MutationHookFn<
    ProductVserverImageDeleteData,
    ProductVserverImageDeleteVariables
> {
    return useMutation<
        ProductVserverImageDeleteData,
        ProductVserverImageDeleteVariables
    >(useMutationProductVserverImageDelete.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type ProductVserverImageDeleteVariables = {
    id: ProductVserverImageDeleteVariablesId;
};

type ProductVserverImageDeleteVariablesId = string;

export type ProductVserverImageDeleteData = {
    productVserverImageDelete: ProductVserverImageDeleteDataProductVserverImageDelete;
};

type ProductVserverImageDeleteDataProductVserverImageDelete = boolean;

useQueryProductVserverImageById.Document = gql`
    query productVserverImageById($id: ID!) {
        productVserverImageById(id: $id) {
            ...ProductVserverImagePart
        }
    }
    ${_gql_ProductVserverImagePart}
` as DocumentNode;

export function useQueryProductVserverImageById(
    options?: QueryHookOptions<
        ProductVserverImageByIdData,
        ProductVserverImageByIdVariables
    >
) {
    const result = useQuery<
        ProductVserverImageByIdData,
        ProductVserverImageByIdVariables
    >(useQueryProductVserverImageById.Document, {
        ...queryDefaultOptions,
        ...options,
    });
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryProductVserverImageById.lazy = function (
    options?: LazyQueryHookOptions<
        ProductVserverImageByIdData,
        ProductVserverImageByIdVariables
    >
) {
    return useLazyQuery(useQueryProductVserverImageById.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type ProductVserverImageByIdVariables = {
    id: ProductVserverImageByIdVariablesId;
};

type ProductVserverImageByIdVariablesId = string;

export type ProductVserverImageByIdData = {
    productVserverImageById: ProductVserverImageByIdDataProductVserverImageById;
};

type ProductVserverImageByIdDataProductVserverImageById = ProductVserverImagePart & {
    __typename?: 'ProductVserverImage';
};

useQueryProductVserverImagePlatformImages.Document = gql`
    query productVserverImagePlatformImages(
        $platform: String!
        $search: String
    ) {
        productVserverImagePlatformImages(
            platform: $platform
            search: $search
        ) {
            ...ProductVserverImagePart
        }
    }
    ${_gql_ProductVserverImagePart}
` as DocumentNode;

export function useQueryProductVserverImagePlatformImages(
    options?: QueryHookOptions<
        ProductVserverImagePlatformImagesData,
        ProductVserverImagePlatformImagesVariables
    >
) {
    const result = useQuery<
        ProductVserverImagePlatformImagesData,
        ProductVserverImagePlatformImagesVariables
    >(useQueryProductVserverImagePlatformImages.Document, {
        ...queryDefaultOptions,
        ...options,
    });
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryProductVserverImagePlatformImages.lazy = function (
    options?: LazyQueryHookOptions<
        ProductVserverImagePlatformImagesData,
        ProductVserverImagePlatformImagesVariables
    >
) {
    return useLazyQuery(useQueryProductVserverImagePlatformImages.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type ProductVserverImagePlatformImagesVariables = {
    platform: ProductVserverImagePlatformImagesVariablesPlatform;
    search?: Nullable<ProductVserverImagePlatformImagesVariablesSearch>;
};

type ProductVserverImagePlatformImagesVariablesPlatform = string;
type ProductVserverImagePlatformImagesVariablesSearch = string;

export type ProductVserverImagePlatformImagesData = {
    productVserverImagePlatformImages: Array<ProductVserverImagePlatformImagesDataProductVserverImagePlatformImages>;
};

type ProductVserverImagePlatformImagesDataProductVserverImagePlatformImages = ProductVserverImagePart & {
    __typename?: 'ProductVserverImage';
};

/*,
 * Fragments from undefined,
 */

/*,
 * Operations from undefined,
 */

useMutationCreateProductVserverIp.Document = gql`
    mutation createProductVserverIp(
        $ip: String!
        $hostNodeId: ID
        $gateway: String!
        $netmask: String!
        $active: Boolean!
        $cidr: Int
    ) {
        productVserverIpCreate(
            ip: $ip
            hostNodeId: $hostNodeId
            gateway: $gateway
            netmask: $netmask
            cidr: $cidr
            active: $active
        ) {
            id
        }
    }
` as DocumentNode;

export function useMutationCreateProductVserverIp(
    options?: MutationHookOptions<
        CreateProductVserverIpData,
        CreateProductVserverIpVariables
    >
): MutationHookFn<CreateProductVserverIpData, CreateProductVserverIpVariables> {
    return useMutation<
        CreateProductVserverIpData,
        CreateProductVserverIpVariables
    >(useMutationCreateProductVserverIp.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type CreateProductVserverIpVariables = {
    ip: CreateProductVserverIpVariablesIp;
    hostNodeId?: Nullable<CreateProductVserverIpVariablesHostNodeId>;
    gateway: CreateProductVserverIpVariablesGateway;
    netmask: CreateProductVserverIpVariablesNetmask;
    active: CreateProductVserverIpVariablesActive;
    cidr?: Nullable<CreateProductVserverIpVariablesCidr>;
};

type CreateProductVserverIpVariablesIp = string;
type CreateProductVserverIpVariablesHostNodeId = string;
type CreateProductVserverIpVariablesGateway = string;
type CreateProductVserverIpVariablesNetmask = string;
type CreateProductVserverIpVariablesActive = boolean;
type CreateProductVserverIpVariablesCidr = number;

export type CreateProductVserverIpData = {
    productVserverIpCreate: Array<CreateProductVserverIpDataProductVserverIpCreate>;
};

type CreateProductVserverIpDataProductVserverIpCreate = {
    __typename?: 'ProductVserverIp';
    id: CreateProductVserverIpDataProductVserverIpCreateId;
};

type CreateProductVserverIpDataProductVserverIpCreateId = string;

useMutationEditProductVserverIp.Document = gql`
    mutation editProductVserverIp(
        $ip: String!
        $hostNodeId: ID
        $gateway: String!
        $netmask: String!
        $active: Boolean!
        $vserverId: ID
        $id: ID!
    ) {
        productVserverIpEdit(
            ip: $ip
            hostNodeId: $hostNodeId
            gateway: $gateway
            netmask: $netmask
            vserverId: $vserverId
            id: $id
            active: $active
        ) {
            id
            create
            ip
            assigned
            netmask
            active
            gateway
            hostNode {
                id
            }
            vserver {
                id
            }
        }
    }
` as DocumentNode;

export function useMutationEditProductVserverIp(
    options?: MutationHookOptions<
        EditProductVserverIpData,
        EditProductVserverIpVariables
    >
): MutationHookFn<EditProductVserverIpData, EditProductVserverIpVariables> {
    return useMutation<EditProductVserverIpData, EditProductVserverIpVariables>(
        useMutationEditProductVserverIp.Document,
        { ...mutationDefaultOptions, ...options }
    ) as any;
}

export type EditProductVserverIpVariables = {
    ip: EditProductVserverIpVariablesIp;
    hostNodeId?: Nullable<EditProductVserverIpVariablesHostNodeId>;
    gateway: EditProductVserverIpVariablesGateway;
    netmask: EditProductVserverIpVariablesNetmask;
    active: EditProductVserverIpVariablesActive;
    vserverId?: Nullable<EditProductVserverIpVariablesVserverId>;
    id: EditProductVserverIpVariablesId;
};

type EditProductVserverIpVariablesIp = string;
type EditProductVserverIpVariablesHostNodeId = string;
type EditProductVserverIpVariablesGateway = string;
type EditProductVserverIpVariablesNetmask = string;
type EditProductVserverIpVariablesActive = boolean;
type EditProductVserverIpVariablesVserverId = string;
type EditProductVserverIpVariablesId = string;

export type EditProductVserverIpData = {
    productVserverIpEdit: EditProductVserverIpDataProductVserverIpEdit;
};

type EditProductVserverIpDataProductVserverIpEdit = {
    __typename?: 'ProductVserverIp';
    id: EditProductVserverIpDataProductVserverIpEditId;
    create: EditProductVserverIpDataProductVserverIpEditCreate;
    ip: EditProductVserverIpDataProductVserverIpEditIp;
    assigned: EditProductVserverIpDataProductVserverIpEditAssigned;
    netmask: EditProductVserverIpDataProductVserverIpEditNetmask;
    active: EditProductVserverIpDataProductVserverIpEditActive;
    gateway: EditProductVserverIpDataProductVserverIpEditGateway;
    hostNode?: Nullable<EditProductVserverIpDataProductVserverIpEditHostNode>;
    vserver?: Nullable<EditProductVserverIpDataProductVserverIpEditVserver>;
};

type EditProductVserverIpDataProductVserverIpEditId = string;
type EditProductVserverIpDataProductVserverIpEditCreate = any;
type EditProductVserverIpDataProductVserverIpEditIp = string;
type EditProductVserverIpDataProductVserverIpEditAssigned = boolean;
type EditProductVserverIpDataProductVserverIpEditNetmask = string;
type EditProductVserverIpDataProductVserverIpEditActive = boolean;
type EditProductVserverIpDataProductVserverIpEditGateway = string;
type EditProductVserverIpDataProductVserverIpEditHostNode = {
    __typename?: 'HostNode';
    id: EditProductVserverIpDataProductVserverIpEditHostNodeId;
};

type EditProductVserverIpDataProductVserverIpEditHostNodeId = string;
type EditProductVserverIpDataProductVserverIpEditVserver = {
    __typename?: 'ProductVserver';
    id: EditProductVserverIpDataProductVserverIpEditVserverId;
};

type EditProductVserverIpDataProductVserverIpEditVserverId = string;

useMutationDeleteProductVserverIp.Document = gql`
    mutation deleteProductVserverIp($id: ID!) {
        productVserverIpDelete(id: $id)
    }
` as DocumentNode;

export function useMutationDeleteProductVserverIp(
    options?: MutationHookOptions<
        DeleteProductVserverIpData,
        DeleteProductVserverIpVariables
    >
): MutationHookFn<DeleteProductVserverIpData, DeleteProductVserverIpVariables> {
    return useMutation<
        DeleteProductVserverIpData,
        DeleteProductVserverIpVariables
    >(useMutationDeleteProductVserverIp.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type DeleteProductVserverIpVariables = {
    id: DeleteProductVserverIpVariablesId;
};

type DeleteProductVserverIpVariablesId = string;

export type DeleteProductVserverIpData = {
    productVserverIpDelete: DeleteProductVserverIpDataProductVserverIpDelete;
};

type DeleteProductVserverIpDataProductVserverIpDelete = boolean;

useQueryProductVserverIps.Document = gql`
    query productVserverIps($filter: CordFilter) {
        productVserverIps(filter: $filter) {
            edges {
                id
                create
                ip
                assigned
            }
            pageInfo {
                totalCount
            }
        }
    }
` as DocumentNode;

export function useQueryProductVserverIps(
    options?: QueryHookOptions<
        ProductVserverIpsData,
        ProductVserverIpsVariables
    >
) {
    const result = useQuery<ProductVserverIpsData, ProductVserverIpsVariables>(
        useQueryProductVserverIps.Document,
        { ...queryDefaultOptions, ...options }
    );
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryProductVserverIps.lazy = function (
    options?: LazyQueryHookOptions<
        ProductVserverIpsData,
        ProductVserverIpsVariables
    >
) {
    return useLazyQuery(useQueryProductVserverIps.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type ProductVserverIpsVariables = {
    filter?: Nullable<ProductVserverIpsVariablesFilter>;
};

type ProductVserverIpsVariablesFilter = CordFilter;

export type ProductVserverIpsData = {
    productVserverIps: ProductVserverIpsDataProductVserverIps;
};

type ProductVserverIpsDataProductVserverIps = {
    __typename?: 'ProductVserverIpResultMany';
    edges: Array<ProductVserverIpsDataProductVserverIpsEdges>;
    pageInfo: ProductVserverIpsDataProductVserverIpsPageInfo;
};

type ProductVserverIpsDataProductVserverIpsEdges = {
    __typename?: 'ProductVserverIp';
    id: ProductVserverIpsDataProductVserverIpsEdgesId;
    create: ProductVserverIpsDataProductVserverIpsEdgesCreate;
    ip: ProductVserverIpsDataProductVserverIpsEdgesIp;
    assigned: ProductVserverIpsDataProductVserverIpsEdgesAssigned;
};

type ProductVserverIpsDataProductVserverIpsEdgesId = string;
type ProductVserverIpsDataProductVserverIpsEdgesCreate = any;
type ProductVserverIpsDataProductVserverIpsEdgesIp = string;
type ProductVserverIpsDataProductVserverIpsEdgesAssigned = boolean;
type ProductVserverIpsDataProductVserverIpsPageInfo = {
    __typename?: 'CordPageInfo';
    totalCount: ProductVserverIpsDataProductVserverIpsPageInfoTotalCount;
};

type ProductVserverIpsDataProductVserverIpsPageInfoTotalCount = number;

useQueryProductVserverIpById.Document = gql`
    query productVserverIpById($id: ID!) {
        productVserverIpById(id: $id) {
            id
            create
            ip
            assigned
            netmask
            active
            gateway
            hostNode {
                id
            }
            vserver {
                id
            }
        }
    }
` as DocumentNode;

export function useQueryProductVserverIpById(
    options?: QueryHookOptions<
        ProductVserverIpByIdData,
        ProductVserverIpByIdVariables
    >
) {
    const result = useQuery<
        ProductVserverIpByIdData,
        ProductVserverIpByIdVariables
    >(useQueryProductVserverIpById.Document, {
        ...queryDefaultOptions,
        ...options,
    });
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryProductVserverIpById.lazy = function (
    options?: LazyQueryHookOptions<
        ProductVserverIpByIdData,
        ProductVserverIpByIdVariables
    >
) {
    return useLazyQuery(useQueryProductVserverIpById.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type ProductVserverIpByIdVariables = {
    id: ProductVserverIpByIdVariablesId;
};

type ProductVserverIpByIdVariablesId = string;

export type ProductVserverIpByIdData = {
    productVserverIpById: ProductVserverIpByIdDataProductVserverIpById;
};

type ProductVserverIpByIdDataProductVserverIpById = {
    __typename?: 'ProductVserverIp';
    id: ProductVserverIpByIdDataProductVserverIpByIdId;
    create: ProductVserverIpByIdDataProductVserverIpByIdCreate;
    ip: ProductVserverIpByIdDataProductVserverIpByIdIp;
    assigned: ProductVserverIpByIdDataProductVserverIpByIdAssigned;
    netmask: ProductVserverIpByIdDataProductVserverIpByIdNetmask;
    active: ProductVserverIpByIdDataProductVserverIpByIdActive;
    gateway: ProductVserverIpByIdDataProductVserverIpByIdGateway;
    hostNode?: Nullable<ProductVserverIpByIdDataProductVserverIpByIdHostNode>;
    vserver?: Nullable<ProductVserverIpByIdDataProductVserverIpByIdVserver>;
};

type ProductVserverIpByIdDataProductVserverIpByIdId = string;
type ProductVserverIpByIdDataProductVserverIpByIdCreate = any;
type ProductVserverIpByIdDataProductVserverIpByIdIp = string;
type ProductVserverIpByIdDataProductVserverIpByIdAssigned = boolean;
type ProductVserverIpByIdDataProductVserverIpByIdNetmask = string;
type ProductVserverIpByIdDataProductVserverIpByIdActive = boolean;
type ProductVserverIpByIdDataProductVserverIpByIdGateway = string;
type ProductVserverIpByIdDataProductVserverIpByIdHostNode = {
    __typename?: 'HostNode';
    id: ProductVserverIpByIdDataProductVserverIpByIdHostNodeId;
};

type ProductVserverIpByIdDataProductVserverIpByIdHostNodeId = string;
type ProductVserverIpByIdDataProductVserverIpByIdVserver = {
    __typename?: 'ProductVserver';
    id: ProductVserverIpByIdDataProductVserverIpByIdVserverId;
};

type ProductVserverIpByIdDataProductVserverIpByIdVserverId = string;

useQueryProductVserverIpFree.Document = gql`
    query productVserverIpFree {
        productVserverIpFree {
            id
            create
            ip
            assigned
            netmask
            active
            gateway
        }
    }
` as DocumentNode;

export function useQueryProductVserverIpFree(
    options?: QueryHookOptions<
        ProductVserverIpFreeData,
        ProductVserverIpFreeVariables
    >
) {
    const result = useQuery<
        ProductVserverIpFreeData,
        ProductVserverIpFreeVariables
    >(useQueryProductVserverIpFree.Document, {
        ...queryDefaultOptions,
        ...options,
    });
    if (result.data && !Object.keys(result.data).length) {
        delete result.data;
    }
    return result;
}

useQueryProductVserverIpFree.lazy = function (
    options?: LazyQueryHookOptions<
        ProductVserverIpFreeData,
        ProductVserverIpFreeVariables
    >
) {
    return useLazyQuery(useQueryProductVserverIpFree.Document, {
        ...lazyQueryDefaultOptions,
        ...options,
    });
};

export type ProductVserverIpFreeVariables = {};

export type ProductVserverIpFreeData = {
    productVserverIpFree: Array<ProductVserverIpFreeDataProductVserverIpFree>;
};

type ProductVserverIpFreeDataProductVserverIpFree = {
    __typename?: 'ProductVserverIp';
    id: ProductVserverIpFreeDataProductVserverIpFreeId;
    create: ProductVserverIpFreeDataProductVserverIpFreeCreate;
    ip: ProductVserverIpFreeDataProductVserverIpFreeIp;
    assigned: ProductVserverIpFreeDataProductVserverIpFreeAssigned;
    netmask: ProductVserverIpFreeDataProductVserverIpFreeNetmask;
    active: ProductVserverIpFreeDataProductVserverIpFreeActive;
    gateway: ProductVserverIpFreeDataProductVserverIpFreeGateway;
};

type ProductVserverIpFreeDataProductVserverIpFreeId = string;
type ProductVserverIpFreeDataProductVserverIpFreeCreate = any;
type ProductVserverIpFreeDataProductVserverIpFreeIp = string;
type ProductVserverIpFreeDataProductVserverIpFreeAssigned = boolean;
type ProductVserverIpFreeDataProductVserverIpFreeNetmask = string;
type ProductVserverIpFreeDataProductVserverIpFreeActive = boolean;
type ProductVserverIpFreeDataProductVserverIpFreeGateway = string;

useMutationProductVserverIpReassignIp.Document = gql`
    mutation productVserverIpReassignIp($id: ID!, $newId: ID!) {
        productVserverIpReassignIp(id: $id, newId: $newId)
    }
` as DocumentNode;

export function useMutationProductVserverIpReassignIp(
    options?: MutationHookOptions<
        ProductVserverIpReassignIpData,
        ProductVserverIpReassignIpVariables
    >
): MutationHookFn<
    ProductVserverIpReassignIpData,
    ProductVserverIpReassignIpVariables
> {
    return useMutation<
        ProductVserverIpReassignIpData,
        ProductVserverIpReassignIpVariables
    >(useMutationProductVserverIpReassignIp.Document, {
        ...mutationDefaultOptions,
        ...options,
    }) as any;
}

export type ProductVserverIpReassignIpVariables = {
    id: ProductVserverIpReassignIpVariablesId;
    newId: ProductVserverIpReassignIpVariablesNewId;
};

type ProductVserverIpReassignIpVariablesId = string;
type ProductVserverIpReassignIpVariablesNewId = string;

export type ProductVserverIpReassignIpData = {
    productVserverIpReassignIp: ProductVserverIpReassignIpDataProductVserverIpReassignIp;
};

type ProductVserverIpReassignIpDataProductVserverIpReassignIp = boolean;

/*
 * Boilerplate
 */

type MutationHookFn<TData, TVariables> = [
    (
        options?: MutationFunctionOptions<TData, TVariables>
    ) => Promise<ExecutionResult<TData>>,
    MutationResult<TData>
];

export interface ExecutionResult<T = Record<string, any>> {
    data: T;
    extensions?: Record<string, any>;
    errors?: GraphQLError[];
}

type Nullable<T> = T | null;
type Omit<T, K> = Pick<T, Exclude<keyof T, K>>;

const queryDefaultOptions = {
    fetchPolicy: 'cache-and-network' as 'cache-and-network',
};
const lazyQueryDefaultOptions = {};
const mutationDefaultOptions = {};
const subscriptionDefaultOptions = {};
